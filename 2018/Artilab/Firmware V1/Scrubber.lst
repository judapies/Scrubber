CCS PCH C Compiler, Version 4.104, 5967               11-feb.-20 16:45

               Filename: D:\Laboratorio\Scrubber\2018\Artilab\Firmware V1\Scrubber.lst

               ROM used: 18096 bytes (55%)
                         Largest free fragment is 14668
               RAM used: 216 (11%) at main() level
                         243 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1690
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06CA:  CLRF   FEA
06CC:  MOVLW  EB
06CE:  MOVWF  FE9
06D0:  MOVF   FEF,W
06D2:  BZ    06F0
06D4:  MOVLW  0F
06D6:  MOVWF  01
06D8:  CLRF   00
06DA:  DECFSZ 00,F
06DC:  BRA    06DA
06DE:  DECFSZ 01,F
06E0:  BRA    06D8
06E2:  MOVLW  8F
06E4:  MOVWF  00
06E6:  DECFSZ 00,F
06E8:  BRA    06E6
06EA:  NOP   
06EC:  DECFSZ FEF,F
06EE:  BRA    06D4
06F0:  RETLW  00
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
06F2:  SWAPF  xEC,W
06F4:  ANDLW  F0
06F6:  MOVWF  00
06F8:  MOVLW  0F
06FA:  ANDWF  F81,W
06FC:  IORWF  00,W
06FE:  MOVWF  F81
....................       delay_cycles(25); 
0700:  MOVLW  08
0702:  MOVWF  00
0704:  DECFSZ 00,F
0706:  BRA    0704
....................       lcd.enable = 1; 
0708:  BSF    F81.3
....................       delay_us(55); 
070A:  MOVLW  DB
070C:  MOVWF  00
070E:  DECFSZ 00,F
0710:  BRA    070E
0712:  BRA    0714
....................       lcd.enable = 0; 
0714:  BCF    F81.3
.................... } 
0716:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0718:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
071A:  MOVLW  01
071C:  MOVWF  xEB
071E:  RCALL  06CA
....................       lcd.rs = address; 
0720:  BTFSS  xE9.0
0722:  BCF    F81.1
0724:  BTFSC  xE9.0
0726:  BSF    F81.1
....................       delay_cycles(25); 
0728:  MOVLW  08
072A:  MOVWF  00
072C:  DECFSZ 00,F
072E:  BRA    072C
....................       lcd.rw = 0; 
0730:  BCF    F81.2
....................       delay_cycles(25); 
0732:  MOVLW  08
0734:  MOVWF  00
0736:  DECFSZ 00,F
0738:  BRA    0736
....................       lcd.enable = 0; 
073A:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
073C:  SWAPF  xEA,W
073E:  MOVWF  xEB
0740:  MOVLW  0F
0742:  ANDWF  xEB,F
0744:  MOVFF  EB,EC
0748:  RCALL  06F2
....................       lcd_send_nibble(n & 0xf); 
074A:  MOVF   xEA,W
074C:  ANDLW  0F
074E:  MOVWF  xEB
0750:  MOVWF  xEC
0752:  RCALL  06F2
.................... } 
0754:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0756:  MOVLW  00
0758:  MOVWF  F93
....................     lcd.rs = 0; 
075A:  BCF    F81.1
....................     lcd.rw = 0; 
075C:  BCF    F81.2
....................     lcd.enable = 0; 
075E:  BCF    F81.3
....................     delay_ms(15); 
0760:  MOVLW  0F
0762:  MOVWF  xEB
0764:  RCALL  06CA
....................     for(i=1;i<=3;++i) { 
0766:  MOVLW  01
0768:  MOVWF  xD4
076A:  MOVF   xD4,W
076C:  SUBLW  03
076E:  BNC   0780
....................        lcd_send_nibble(3); 
0770:  MOVLW  03
0772:  MOVWF  xEC
0774:  RCALL  06F2
....................        delay_ms(5); 
0776:  MOVLW  05
0778:  MOVWF  xEB
077A:  RCALL  06CA
....................     } 
077C:  INCF   xD4,F
077E:  BRA    076A
....................     lcd_send_nibble(2); 
0780:  MOVLW  02
0782:  MOVWF  xEC
0784:  RCALL  06F2
....................     for(i=0;i<=3;++i) 
0786:  CLRF   xD4
0788:  MOVF   xD4,W
078A:  SUBLW  03
078C:  BNC   07AA
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
078E:  CLRF   03
0790:  MOVF   xD4,W
0792:  MOVFF  FF2,D5
0796:  BCF    FF2.7
0798:  RCALL  0096
079A:  BTFSC  xD5.7
079C:  BSF    FF2.7
079E:  MOVWF  xD5
07A0:  CLRF   xE9
07A2:  MOVWF  xEA
07A4:  RCALL  0718
07A6:  INCF   xD4,F
07A8:  BRA    0788
.................... } 
07AA:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
082E:  MOVLW  01
0830:  SUBWF  xE7,W
0832:  ADDLW  FC
0834:  BC    0854
0836:  ADDLW  04
0838:  GOTO   0864
....................      case 1 : address=0x80;break; 
083C:  MOVLW  80
083E:  MOVWF  xE8
0840:  BRA    0854
....................      case 2 : address=0xc0;break; 
0842:  MOVLW  C0
0844:  MOVWF  xE8
0846:  BRA    0854
....................      case 3 : address=0x94;break; 
0848:  MOVLW  94
084A:  MOVWF  xE8
084C:  BRA    0854
....................      case 4 : address=0xd4;break; 
084E:  MOVLW  D4
0850:  MOVWF  xE8
0852:  BRA    0854
....................    } 
....................    address+=x-1; 
0854:  MOVLW  01
0856:  SUBWF  xE6,W
0858:  ADDWF  xE8,F
....................    lcd_send_byte(0,address); 
085A:  CLRF   xE9
085C:  MOVFF  E8,EA
0860:  RCALL  0718
.................... } 
0862:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0890:  MOVF   xE5,W
0892:  SUBLW  F1
0894:  BNZ   089A
....................    { 
....................       c=238; 
0896:  MOVLW  EE
0898:  MOVWF  xE5
....................    } 
....................    if(c=='Ñ') 
089A:  MOVF   xE5,W
089C:  SUBLW  D1
089E:  BNZ   08A4
....................    { 
....................       c=255; 
08A0:  MOVLW  FF
08A2:  MOVWF  xE5
....................    } 
....................     
....................    switch (c) { 
08A4:  MOVF   xE5,W
08A6:  XORLW  0C
08A8:  BZ    08B4
08AA:  XORLW  06
08AC:  BZ    08C8
08AE:  XORLW  02
08B0:  BZ    08D6
08B2:  BRA    08E0
....................      case '\f'   : lcd_send_byte(0,1); 
08B4:  CLRF   xE9
08B6:  MOVLW  01
08B8:  MOVWF  xEA
08BA:  RCALL  0718
....................                    lcdline=1; 
08BC:  MOVLW  01
08BE:  MOVWF  16
....................                    delay_ms(2); 
08C0:  MOVLW  02
08C2:  MOVWF  xEB
08C4:  RCALL  06CA
....................                                            break; 
08C6:  BRA    08EC
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
08C8:  INCF   16,F
08CA:  MOVLW  01
08CC:  MOVWF  xE6
08CE:  MOVFF  16,E7
08D2:  RCALL  082E
08D4:  BRA    08EC
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08D6:  CLRF   xE9
08D8:  MOVLW  10
08DA:  MOVWF  xEA
08DC:  RCALL  0718
08DE:  BRA    08EC
....................      default     : lcd_send_byte(1,c);     break; 
08E0:  MOVLW  01
08E2:  MOVWF  xE9
08E4:  MOVFF  E5,EA
08E8:  RCALL  0718
08EA:  BRA    08EC
....................    } 
.................... } 
08EC:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A2) 
.................... #define   DOWN          !input(PIN_A3) 
.................... #define   RIGHT         !input(PIN_A4) 
.................... #define   LEFT          !input(PIN_A5) 
....................  
.................... #define   HIGH          input(PIN_E1) 
.................... #define   LOW           input(PIN_E0) 
.................... #define   NLBAS         input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Bomba_on            output_bit(PIN_D1,1) 
.................... #define   Bomba_off           output_bit(PIN_D1,0) 
.................... #define   Agua_on             output_bit(PIN_D2,1) 
.................... #define   Agua_off            output_bit(PIN_D2,0) 
.................... #define   Alarma_on           output_bit(PIN_D3,1) 
.................... #define   Alarma_off          output_bit(PIN_D3,0) 
.................... #define   Desague_on          output_bit(PIN_D4,1) 
.................... #define   Desague_off         output_bit(PIN_D4,0) 
.................... #define   Peristaltica_on     output_bit(PIN_C2,1) 
.................... #define   Peristaltica_off    output_bit(PIN_C2,0) 
....................  
....................  
.................... short estadobp=0,estadoba=0,estadoagua=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,Lectura=0,Grabar=0,SensadoNivel=0,visualiza=0; 
.................... int8 Menu=0, n_opcionH=8,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horas=0; 
.................... int8 r=0,q=0,i=0,MediaMovil=6,punto=1,negativo=10,treset=0,tcontrol=0,tpulso=3; 
.................... int8 BandaInt=0,BandaDec=0,sPpHInt=0,sPpHDec=0,bInt=0,bDec=0,Y0Int=0,Y0Dec=0,Y1Int=0,Y1Dec=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
....................  
.................... int16 tiempos,TiempoSensadoNivel=0; 
.................... float PromPH[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,PH=0.0,X0=0.0,Y0=0.0,X1=0.0,Y1=0.0,pHpoint=4.0,pVpH=0.0,sPpH=7.0,m=0.0,b=0.0,Banda=0.0,tmp=0.0,sPH=0.0,sPL=0.0; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   44,F
00BE:  BTFSC  FD8.2
00C0:  INCF   45,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   45,F
00C4:  BNZ   00CC
00C6:  MOVF   44,W
00C8:  SUBLW  C7
00CA:  BC    00FC
....................    {tiempos=0;Lectura=1;treset++;tcontrol++;visualiza=1; 
00CC:  CLRF   45
00CE:  CLRF   44
00D0:  BSF    17.7
00D2:  INCF   2B,F
00D4:  INCF   2C,F
00D6:  BSF    18.2
....................       if(SensadoNivel){ 
00D8:  BTFSS  18.1
00DA:  BRA    00E2
....................          TiempoSensadoNivel++; 
00DC:  INCF   46,F
00DE:  BTFSC  FD8.2
00E0:  INCF   47,F
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadoba==1) 
00E2:  BTFSS  17.1
00E4:  BRA    00FC
....................    { 
....................       segundos++; 
00E6:  INCF   22,F
....................       if(segundos==60) 
00E8:  MOVF   22,W
00EA:  SUBLW  3C
00EC:  BNZ   00F2
....................       { 
....................          segundos=0;minutos++; 
00EE:  CLRF   22
00F0:  INCF   23,F
....................       } 
....................       if(minutos==60) 
00F2:  MOVF   23,W
00F4:  SUBLW  3C
00F6:  BNZ   00FC
....................       { 
....................          minutos=0;horas++; 
00F8:  CLRF   23
00FA:  INCF   24,F
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
00FC:  BCF    F9E.0
00FE:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0E56:  DECFSZ xD5,W
0E58:  BRA    0E6E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. un Punto      ");} 
0E5A:  MOVLW  02
0E5C:  MOVWF  xE6
0E5E:  MOVFF  D6,E7
0E62:  RCALL  082E
0E64:  MOVLW  02
0E66:  MOVWF  FF6
0E68:  MOVLW  01
0E6A:  MOVWF  FF7
0E6C:  RCALL  08EE
....................    if(x==2) 
0E6E:  MOVF   xD5,W
0E70:  SUBLW  02
0E72:  BNZ   0E88
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. dos Puntos    ");} 
0E74:  MOVLW  02
0E76:  MOVWF  xE6
0E78:  MOVFF  D6,E7
0E7C:  RCALL  082E
0E7E:  MOVLW  16
0E80:  MOVWF  FF6
0E82:  MOVLW  01
0E84:  MOVWF  FF7
0E86:  RCALL  08EE
....................    if(x==3) 
0E88:  MOVF   xD5,W
0E8A:  SUBLW  03
0E8C:  BNZ   0EA2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0E8E:  MOVLW  02
0E90:  MOVWF  xE6
0E92:  MOVFF  D6,E7
0E96:  RCALL  082E
0E98:  MOVLW  2A
0E9A:  MOVWF  FF6
0E9C:  MOVLW  01
0E9E:  MOVWF  FF7
0EA0:  RCALL  08EE
....................    if(x==4) 
0EA2:  MOVF   xD5,W
0EA4:  SUBLW  04
0EA6:  BNZ   0EBC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
0EA8:  MOVLW  02
0EAA:  MOVWF  xE6
0EAC:  MOVFF  D6,E7
0EB0:  RCALL  082E
0EB2:  MOVLW  3E
0EB4:  MOVWF  FF6
0EB6:  MOVLW  01
0EB8:  MOVWF  FF7
0EBA:  RCALL  08EE
....................    if(x==5) 
0EBC:  MOVF   xD5,W
0EBE:  SUBLW  05
0EC0:  BNZ   0ED6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Banda Muerta       ");} 
0EC2:  MOVLW  02
0EC4:  MOVWF  xE6
0EC6:  MOVFF  D6,E7
0ECA:  RCALL  082E
0ECC:  MOVLW  52
0ECE:  MOVWF  FF6
0ED0:  MOVLW  01
0ED2:  MOVWF  FF7
0ED4:  RCALL  08EE
....................    if(x==6) 
0ED6:  MOVF   xD5,W
0ED8:  SUBLW  06
0EDA:  BNZ   0EF0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
0EDC:  MOVLW  02
0EDE:  MOVWF  xE6
0EE0:  MOVFF  D6,E7
0EE4:  RCALL  082E
0EE6:  MOVLW  66
0EE8:  MOVWF  FF6
0EEA:  MOVLW  01
0EEC:  MOVWF  FF7
0EEE:  RCALL  08EE
....................    if(x==7) 
0EF0:  MOVF   xD5,W
0EF2:  SUBLW  07
0EF4:  BNZ   0F0A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
0EF6:  MOVLW  02
0EF8:  MOVWF  xE6
0EFA:  MOVFF  D6,E7
0EFE:  RCALL  082E
0F00:  MOVLW  7A
0F02:  MOVWF  FF6
0F04:  MOVLW  01
0F06:  MOVWF  FF7
0F08:  RCALL  08EE
.................... } 
0F0A:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
07E2:  RLCF   xD9,W
07E4:  MOVWF  00
07E6:  RLCF   00,F
07E8:  MOVLW  FC
07EA:  ANDWF  00,F
07EC:  MOVFF  00,01
07F0:  MOVF   FC2,W
07F2:  ANDLW  C3
07F4:  IORWF  00,W
07F6:  MOVWF  FC2
07F8:  MOVLW  0A
07FA:  MOVWF  xEB
07FC:  RCALL  06CA
07FE:  BSF    FC2.1
0800:  BTFSC  FC2.1
0802:  BRA    0800
0804:  MOVF   FC4,W
0806:  CLRF   xDF
0808:  MOVWF  xDE
080A:  RCALL  07AC
080C:  MOVFF  03,DD
0810:  MOVFF  02,DC
0814:  MOVFF  01,DB
0818:  MOVFF  00,DA
081C:  MOVFF  DA,00
0820:  MOVFF  DB,01
0824:  MOVFF  DC,02
0828:  MOVFF  DD,03
.................... } 
082C:  RETLW  00
....................  
.................... float Leer_Sensor_pH(int media){ 
*
12E2:  CLRF   xD8
12E4:  CLRF   xD7
12E6:  CLRF   xD6
12E8:  CLRF   xD5
....................    float promediopH=0.0; 
....................    V1 = sensores(0);   //Lectura de ADC de 10 bit 
12EA:  CLRF   xD9
12EC:  CALL   07E2
12F0:  MOVFF  03,9B
12F4:  MOVFF  02,9A
12F8:  MOVFF  01,99
12FC:  MOVFF  00,98
....................    m=(Y1-Y0)/(X1-X0); //Y1=pH ingresado, Y0=pH ingresado, X0=ADC de Y0, X1=ADC de Y1 
1300:  BSF    FD8.1
1302:  MOVFF  AF,E0
1306:  MOVFF  AE,DF
130A:  MOVFF  AD,DE
130E:  MOVFF  AC,DD
1312:  MOVFF  A7,E4
1316:  MOVFF  A6,E3
131A:  MOVFF  A5,E2
131E:  MOVFF  A4,E1
1322:  CALL   0A68
1326:  MOVFF  00,D9
132A:  MOVFF  01,DA
132E:  MOVFF  02,DB
1332:  MOVFF  03,DC
1336:  BSF    FD8.1
1338:  MOVFF  AB,E0
133C:  MOVFF  AA,DF
1340:  MOVFF  A9,DE
1344:  MOVFF  A8,DD
1348:  MOVFF  A3,E4
134C:  MOVFF  A2,E3
1350:  MOVFF  A1,E2
1354:  MOVFF  A0,E1
1358:  CALL   0A68
135C:  MOVFF  DC,E0
1360:  MOVFF  DB,DF
1364:  MOVFF  DA,DE
1368:  MOVFF  D9,DD
136C:  MOVFF  03,E4
1370:  MOVFF  02,E3
1374:  MOVFF  01,E2
1378:  MOVFF  00,E1
137C:  CALL   090E
1380:  MOVFF  03,BF
1384:  MOVFF  02,BE
1388:  MOVFF  01,BD
138C:  MOVFF  00,BC
....................    if(negativo==10) 
1390:  MOVF   2A,W
1392:  SUBLW  0A
1394:  BNZ   13FE
....................    { 
....................       PH=(m*V1)+b;// PH=mx+b 
1396:  MOVFF  BF,E8
139A:  MOVFF  BE,E7
139E:  MOVFF  BD,E6
13A2:  MOVFF  BC,E5
13A6:  MOVFF  9B,EC
13AA:  MOVFF  9A,EB
13AE:  MOVFF  99,EA
13B2:  MOVFF  98,E9
13B6:  RCALL  0F0C
13B8:  MOVFF  00,D9
13BC:  MOVFF  01,DA
13C0:  MOVFF  02,DB
13C4:  MOVFF  03,DC
13C8:  BCF    FD8.1
13CA:  MOVFF  03,E0
13CE:  MOVFF  02,DF
13D2:  MOVFF  01,DE
13D6:  MOVFF  00,DD
13DA:  MOVFF  C3,E4
13DE:  MOVFF  C2,E3
13E2:  MOVFF  C1,E2
13E6:  MOVFF  C0,E1
13EA:  CALL   0A68
13EE:  MOVFF  03,9F
13F2:  MOVFF  02,9E
13F6:  MOVFF  01,9D
13FA:  MOVFF  00,9C
....................    } 
....................    if(negativo==20) 
13FE:  MOVF   2A,W
1400:  SUBLW  14
1402:  BNZ   146C
....................    { 
....................       PH=(m*V1)-b;// PH=mx+b 
1404:  MOVFF  BF,E8
1408:  MOVFF  BE,E7
140C:  MOVFF  BD,E6
1410:  MOVFF  BC,E5
1414:  MOVFF  9B,EC
1418:  MOVFF  9A,EB
141C:  MOVFF  99,EA
1420:  MOVFF  98,E9
1424:  RCALL  0F0C
1426:  MOVFF  00,D9
142A:  MOVFF  01,DA
142E:  MOVFF  02,DB
1432:  MOVFF  03,DC
1436:  BSF    FD8.1
1438:  MOVFF  03,E0
143C:  MOVFF  02,DF
1440:  MOVFF  01,DE
1444:  MOVFF  00,DD
1448:  MOVFF  C3,E4
144C:  MOVFF  C2,E3
1450:  MOVFF  C1,E2
1454:  MOVFF  C0,E1
1458:  CALL   0A68
145C:  MOVFF  03,9F
1460:  MOVFF  02,9E
1464:  MOVFF  01,9D
1468:  MOVFF  00,9C
....................    }   
....................     
....................    if(PH<0.0) 
146C:  MOVFF  9F,DC
1470:  MOVFF  9E,DB
1474:  MOVFF  9D,DA
1478:  MOVFF  9C,D9
147C:  CLRF   xE0
147E:  CLRF   xDF
1480:  CLRF   xDE
1482:  CLRF   xDD
1484:  RCALL  0CD2
1486:  BNC   1490
....................    { 
....................       PH=0.0; 
1488:  CLRF   x9F
148A:  CLRF   x9E
148C:  CLRF   x9D
148E:  CLRF   x9C
....................    } 
....................  
....................    if(r>media-1) 
1490:  MOVLW  01
1492:  SUBWF  xD4,W
1494:  SUBWF  25,W
1496:  BZ    149C
1498:  BNC   149C
....................    {r=0;} 
149A:  CLRF   25
....................    PromPH[r]=PH;r++; 
149C:  MOVF   25,W
149E:  MULLW  04
14A0:  MOVF   FF3,W
14A2:  CLRF   03
14A4:  ADDLW  48
14A6:  MOVWF  FE9
14A8:  MOVLW  00
14AA:  ADDWFC 03,W
14AC:  MOVWF  FEA
14AE:  MOVFF  9C,FEF
14B2:  MOVFF  9D,FEC
14B6:  MOVFF  9E,FEC
14BA:  MOVFF  9F,FEC
14BE:  INCF   25,F
....................           
....................    for(q=0;q<=(media-1);q++) 
14C0:  CLRF   26
14C2:  MOVLW  01
14C4:  SUBWF  xD4,W
14C6:  SUBWF  26,W
14C8:  BZ    14CC
14CA:  BC    1538
....................    { 
....................       promediopH+=PromPH[q]; 
14CC:  MOVF   26,W
14CE:  MULLW  04
14D0:  MOVF   FF3,W
14D2:  CLRF   03
14D4:  ADDLW  48
14D6:  MOVWF  FE9
14D8:  MOVLW  00
14DA:  ADDWFC 03,W
14DC:  MOVWF  FEA
14DE:  MOVFF  FEF,00
14E2:  MOVFF  FEC,01
14E6:  MOVFF  FEC,02
14EA:  MOVFF  FEC,03
14EE:  MOVFF  FEA,DA
14F2:  MOVFF  FE9,D9
14F6:  BCF    FD8.1
14F8:  MOVFF  D8,E0
14FC:  MOVFF  D7,DF
1500:  MOVFF  D6,DE
1504:  MOVFF  D5,DD
1508:  MOVFF  03,E4
150C:  MOVFF  02,E3
1510:  MOVFF  01,E2
1514:  MOVFF  00,E1
1518:  CALL   0A68
151C:  MOVFF  DA,FEA
1520:  MOVFF  D9,FE9
1524:  MOVFF  03,D8
1528:  MOVFF  02,D7
152C:  MOVFF  01,D6
1530:  MOVFF  00,D5
....................    }  
1534:  INCF   26,F
1536:  BRA    14C2
....................    promediopH=promediopH/media;    
1538:  CLRF   xDF
153A:  MOVFF  D4,DE
153E:  CALL   07AC
1542:  MOVFF  D8,E0
1546:  MOVFF  D7,DF
154A:  MOVFF  D6,DE
154E:  MOVFF  D5,DD
1552:  MOVFF  03,E4
1556:  MOVFF  02,E3
155A:  MOVFF  01,E2
155E:  MOVFF  00,E1
1562:  CALL   090E
1566:  MOVFF  03,D8
156A:  MOVFF  02,D7
156E:  MOVFF  01,D6
1572:  MOVFF  00,D5
....................     
....................    return promediopH; 
1576:  MOVFF  D5,00
157A:  MOVFF  D6,01
157E:  MOVFF  D7,02
1582:  MOVFF  D8,03
.................... } 
1586:  GOTO   4694 (RETURN)
....................  
.................... void Controla(void){ 
....................    sPH=sPpH+Banda; 
158A:  BCF    FD8.1
158C:  MOVFF  BB,E0
1590:  MOVFF  BA,DF
1594:  MOVFF  B9,DE
1598:  MOVFF  B8,DD
159C:  MOVFF  C7,E4
15A0:  MOVFF  C6,E3
15A4:  MOVFF  C5,E2
15A8:  MOVFF  C4,E1
15AC:  CALL   0A68
15B0:  MOVFF  03,CF
15B4:  MOVFF  02,CE
15B8:  MOVFF  01,CD
15BC:  MOVFF  00,CC
....................    sPL=sPpH-Banda; 
15C0:  BSF    FD8.1
15C2:  MOVFF  BB,E0
15C6:  MOVFF  BA,DF
15CA:  MOVFF  B9,DE
15CE:  MOVFF  B8,DD
15D2:  MOVFF  C7,E4
15D6:  MOVFF  C6,E3
15DA:  MOVFF  C5,E2
15DE:  MOVFF  C4,E1
15E2:  CALL   0A68
15E6:  MOVFF  03,D3
15EA:  MOVFF  02,D2
15EE:  MOVFF  01,D1
15F2:  MOVFF  00,D0
....................    if(pVpH>sPL && pVpH<sPH) 
15F6:  MOVFF  D3,DC
15FA:  MOVFF  D2,DB
15FE:  MOVFF  D1,DA
1602:  MOVFF  D0,D9
1606:  MOVFF  B7,E0
160A:  MOVFF  B6,DF
160E:  MOVFF  B5,DE
1612:  MOVFF  B4,DD
1616:  CALL   0CD2
161A:  BNC   164A
161C:  MOVFF  B7,DC
1620:  MOVFF  B6,DB
1624:  MOVFF  B5,DA
1628:  MOVFF  B4,D9
162C:  MOVFF  CF,E0
1630:  MOVFF  CE,DF
1634:  MOVFF  CD,DE
1638:  MOVFF  CC,DD
163C:  CALL   0CD2
1640:  BNC   164A
....................    { 
....................       Peristaltica_off; 
1642:  BCF    F8B.2
1644:  BCF    F94.2
....................       estadobp=0; 
1646:  BCF    17.0
....................    } 
....................    else 
1648:  BRA    168C
....................    { 
....................       if(pVpH<sPL) 
164A:  MOVFF  B7,DC
164E:  MOVFF  B6,DB
1652:  MOVFF  B5,DA
1656:  MOVFF  B4,D9
165A:  MOVFF  D3,E0
165E:  MOVFF  D2,DF
1662:  MOVFF  D1,DE
1666:  MOVFF  D0,DD
166A:  CALL   0CD2
166E:  BNC   1686
....................       { 
....................          if(tcontrol<tpulso) 
1670:  MOVF   2D,W
1672:  SUBWF  2C,W
1674:  BC    167E
....................          { 
....................             Peristaltica_on; 
1676:  BSF    F8B.2
1678:  BCF    F94.2
....................             estadobp=1; 
167A:  BSF    17.0
....................          } 
....................          else 
167C:  BRA    1684
....................          { 
....................             Peristaltica_off; 
167E:  BCF    F8B.2
1680:  BCF    F94.2
....................             estadobp=0; 
1682:  BCF    17.0
....................          } 
....................       } 
....................       else 
1684:  BRA    168C
....................       { 
....................          Peristaltica_off; 
1686:  BCF    F8B.2
1688:  BCF    F94.2
....................          estadobp=0; 
168A:  BCF    17.0
....................       } 
....................    } 
.................... } 
168C:  GOTO   46AC (RETURN)
....................  
.................... void main () 
.................... { 
1690:  CLRF   FF8
1692:  BCF    FD0.7
1694:  BSF    07.7
1696:  CLRF   FEA
1698:  CLRF   FE9
169A:  BCF    17.0
169C:  BCF    17.1
169E:  BCF    17.2
16A0:  BCF    17.3
16A2:  BCF    17.4
16A4:  BCF    17.5
16A6:  BCF    17.6
16A8:  BCF    17.7
16AA:  BCF    18.0
16AC:  BCF    18.1
16AE:  BCF    18.2
16B0:  CLRF   19
16B2:  MOVLW  08
16B4:  MOVWF  1A
16B6:  MOVLW  02
16B8:  MOVWF  1B
16BA:  MOVLW  0B
16BC:  MOVWF  1C
16BE:  MOVLW  02
16C0:  MOVWF  1D
16C2:  MOVLW  03
16C4:  MOVWF  1E
16C6:  MOVLW  02
16C8:  MOVWF  1F
16CA:  MOVWF  20
16CC:  MOVLW  04
16CE:  MOVWF  21
16D0:  CLRF   22
16D2:  CLRF   23
16D4:  CLRF   24
16D6:  CLRF   25
16D8:  CLRF   26
16DA:  CLRF   27
16DC:  MOVLW  06
16DE:  MOVWF  28
16E0:  MOVLW  01
16E2:  MOVWF  29
16E4:  MOVLW  0A
16E6:  MOVWF  2A
16E8:  CLRF   2B
16EA:  CLRF   2C
16EC:  MOVLW  03
16EE:  MOVWF  2D
16F0:  CLRF   2E
16F2:  CLRF   2F
16F4:  CLRF   30
16F6:  CLRF   31
16F8:  CLRF   32
16FA:  CLRF   33
16FC:  CLRF   34
16FE:  CLRF   35
1700:  CLRF   36
1702:  CLRF   37
1704:  CLRF   38
1706:  CLRF   47
1708:  CLRF   46
170A:  CLRF   x9B
170C:  CLRF   x9A
170E:  CLRF   x99
1710:  CLRF   x98
1712:  CLRF   x9F
1714:  CLRF   x9E
1716:  CLRF   x9D
1718:  CLRF   x9C
171A:  CLRF   xA3
171C:  CLRF   xA2
171E:  CLRF   xA1
1720:  CLRF   xA0
1722:  CLRF   xA7
1724:  CLRF   xA6
1726:  CLRF   xA5
1728:  CLRF   xA4
172A:  CLRF   xAB
172C:  CLRF   xAA
172E:  CLRF   xA9
1730:  CLRF   xA8
1732:  CLRF   xAF
1734:  CLRF   xAE
1736:  CLRF   xAD
1738:  CLRF   xAC
173A:  CLRF   xB3
173C:  CLRF   xB2
173E:  CLRF   xB1
1740:  MOVLW  81
1742:  MOVWF  xB0
1744:  CLRF   xB7
1746:  CLRF   xB6
1748:  CLRF   xB5
174A:  CLRF   xB4
174C:  CLRF   xBB
174E:  CLRF   xBA
1750:  MOVLW  60
1752:  MOVWF  xB9
1754:  MOVLW  81
1756:  MOVWF  xB8
1758:  CLRF   xBF
175A:  CLRF   xBE
175C:  CLRF   xBD
175E:  CLRF   xBC
1760:  CLRF   xC3
1762:  CLRF   xC2
1764:  CLRF   xC1
1766:  CLRF   xC0
1768:  CLRF   xC7
176A:  CLRF   xC6
176C:  CLRF   xC5
176E:  CLRF   xC4
1770:  CLRF   xCB
1772:  CLRF   xCA
1774:  CLRF   xC9
1776:  CLRF   xC8
1778:  CLRF   xCF
177A:  CLRF   xCE
177C:  CLRF   xCD
177E:  CLRF   xCC
1780:  CLRF   xD3
1782:  CLRF   xD2
1784:  CLRF   xD1
1786:  CLRF   xD0
1788:  MOVF   FC1,W
178A:  ANDLW  C0
178C:  IORLW  0F
178E:  MOVWF  FC1
1790:  MOVLW  07
1792:  MOVWF  FB4
1794:  MOVLW  3E
1796:  MOVWF  39
1798:  MOVLW  20
179A:  MOVWF  3A
179C:  MOVLW  5E
179E:  MOVWF  3B
17A0:  CLRF   3C
17A2:  CLRF   3D
17A4:  CLRF   3E
17A6:  CLRF   3F
17A8:  CLRF   40
17AA:  CLRF   41
17AC:  CLRF   42
17AE:  CLRF   43
17B0:  CLRF   48
17B2:  CLRF   49
17B4:  CLRF   4A
17B6:  CLRF   4B
17B8:  CLRF   4C
17BA:  CLRF   4D
17BC:  CLRF   4E
17BE:  CLRF   4F
17C0:  CLRF   50
17C2:  CLRF   51
17C4:  CLRF   52
17C6:  CLRF   53
17C8:  CLRF   54
17CA:  CLRF   55
17CC:  CLRF   56
17CE:  CLRF   57
17D0:  CLRF   58
17D2:  CLRF   59
17D4:  CLRF   5A
17D6:  CLRF   5B
17D8:  CLRF   5C
17DA:  CLRF   5D
17DC:  CLRF   5E
17DE:  CLRF   5F
17E0:  CLRF   x60
17E2:  CLRF   x61
17E4:  CLRF   x62
17E6:  CLRF   x63
17E8:  CLRF   x64
17EA:  CLRF   x65
17EC:  CLRF   x66
17EE:  CLRF   x67
17F0:  CLRF   x68
17F2:  CLRF   x69
17F4:  CLRF   x6A
17F6:  CLRF   x6B
17F8:  CLRF   x6C
17FA:  CLRF   x6D
17FC:  CLRF   x6E
17FE:  CLRF   x6F
1800:  CLRF   x70
1802:  CLRF   x71
1804:  CLRF   x72
1806:  CLRF   x73
1808:  CLRF   x74
180A:  CLRF   x75
180C:  CLRF   x76
180E:  CLRF   x77
1810:  CLRF   x78
1812:  CLRF   x79
1814:  CLRF   x7A
1816:  CLRF   x7B
1818:  CLRF   x7C
181A:  CLRF   x7D
181C:  CLRF   x7E
181E:  CLRF   x7F
1820:  CLRF   x80
1822:  CLRF   x81
1824:  CLRF   x82
1826:  CLRF   x83
1828:  CLRF   x84
182A:  CLRF   x85
182C:  CLRF   x86
182E:  CLRF   x87
1830:  CLRF   x88
1832:  CLRF   x89
1834:  CLRF   x8A
1836:  CLRF   x8B
1838:  CLRF   x8C
183A:  CLRF   x8D
183C:  CLRF   x8E
183E:  CLRF   x8F
1840:  CLRF   x90
1842:  CLRF   x91
1844:  CLRF   x92
1846:  CLRF   x93
1848:  CLRF   x94
184A:  CLRF   x95
184C:  CLRF   x96
184E:  CLRF   x97
....................    lcd_init(); 
1850:  CALL   0756
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1854:  MOVLW  85
1856:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1858:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
185A:  MOVF   FC1,W
185C:  ANDLW  C0
185E:  IORLW  0D
1860:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1862:  BCF    FC0.0
1864:  BSF    FC0.1
1866:  BCF    FC0.2
1868:  BCF    FC0.7
186A:  BSF    FC2.0
....................    enable_interrupts(global); 
186C:  MOVLW  C0
186E:  IORWF  FF2,F
....................    sensores(0); 
1870:  CLRF   xD9
1872:  CALL   07E2
....................    lcd_gotoxy(1,1); 
1876:  MOVLW  01
1878:  MOVWF  xE6
187A:  MOVWF  xE7
187C:  CALL   082E
....................    printf(lcd_putc,"     SCRUBBER       "); 
1880:  MOVLW  8E
1882:  MOVWF  FF6
1884:  MOVLW  01
1886:  MOVWF  FF7
1888:  CALL   08EE
....................    lcd_gotoxy(1,2); 
188C:  MOVLW  01
188E:  MOVWF  xE6
1890:  MOVLW  02
1892:  MOVWF  xE7
1894:  CALL   082E
....................    printf(lcd_putc,"                    "); 
1898:  MOVLW  A4
189A:  MOVWF  FF6
189C:  MOVLW  01
189E:  MOVWF  FF7
18A0:  CALL   08EE
....................    lcd_gotoxy(1,3); 
18A4:  MOVLW  01
18A6:  MOVWF  xE6
18A8:  MOVLW  03
18AA:  MOVWF  xE7
18AC:  CALL   082E
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
18B0:  MOVLW  BA
18B2:  MOVWF  FF6
18B4:  MOVLW  01
18B6:  MOVWF  FF7
18B8:  CALL   08EE
....................    lcd_gotoxy(1,4); 
18BC:  MOVLW  01
18BE:  MOVWF  xE6
18C0:  MOVLW  04
18C2:  MOVWF  xE7
18C4:  CALL   082E
....................    printf(lcd_putc,"  REF:JPOPSCBB02   "); 
18C8:  MOVLW  D0
18CA:  MOVWF  FF6
18CC:  MOVLW  01
18CE:  MOVWF  FF7
18D0:  CALL   08EE
....................    delay_ms(1500); 
18D4:  MOVLW  06
18D6:  MOVWF  xD4
18D8:  MOVLW  FA
18DA:  MOVWF  xEB
18DC:  CALL   06CA
18E0:  DECFSZ xD4,F
18E2:  BRA    18D8
....................    printf(lcd_putc,"\f"); 
18E4:  MOVLW  0C
18E6:  MOVWF  xE5
18E8:  CALL   0890
....................     
....................    if(UP){ 
18EC:  BSF    F92.2
18EE:  BTFSC  F80.2
18F0:  BRA    19A0
....................       delay_ms(1000); 
18F2:  MOVLW  04
18F4:  MOVWF  xD4
18F6:  MOVLW  FA
18F8:  MOVWF  xEB
18FA:  CALL   06CA
18FE:  DECFSZ xD4,F
1900:  BRA    18F6
....................       if(UP){ 
1902:  BSF    F92.2
1904:  BTFSC  F80.2
1906:  BRA    19A0
....................          write_eeprom(50,0); 
1908:  MOVLW  32
190A:  MOVWF  FA9
190C:  CLRF   FA8
190E:  BCF    FA6.6
1910:  BCF    FA6.7
1912:  BSF    FA6.2
1914:  MOVF   FF2,W
1916:  MOVWF  00
1918:  BCF    FF2.7
191A:  MOVLB  F
191C:  MOVLW  55
191E:  MOVWF  FA7
1920:  MOVLW  AA
1922:  MOVWF  FA7
1924:  BSF    FA6.1
1926:  BTFSC  FA6.1
1928:  BRA    1926
192A:  BCF    FA6.2
192C:  MOVF   00,W
192E:  IORWF  FF2,F
....................          delay_ms(10); 
1930:  MOVLW  0A
1932:  MOVLB  0
1934:  MOVWF  xEB
1936:  CALL   06CA
....................          write_eeprom(51,0); 
193A:  MOVLW  33
193C:  MOVWF  FA9
193E:  CLRF   FA8
1940:  BCF    FA6.6
1942:  BCF    FA6.7
1944:  BSF    FA6.2
1946:  MOVF   FF2,W
1948:  MOVWF  00
194A:  BCF    FF2.7
194C:  MOVLB  F
194E:  MOVLW  55
1950:  MOVWF  FA7
1952:  MOVLW  AA
1954:  MOVWF  FA7
1956:  BSF    FA6.1
1958:  BTFSC  FA6.1
195A:  BRA    1958
195C:  BCF    FA6.2
195E:  MOVF   00,W
1960:  IORWF  FF2,F
....................          delay_ms(10); 
1962:  MOVLW  0A
1964:  MOVLB  0
1966:  MOVWF  xEB
1968:  CALL   06CA
....................          write_eeprom(52,0); 
196C:  MOVLW  34
196E:  MOVWF  FA9
1970:  CLRF   FA8
1972:  BCF    FA6.6
1974:  BCF    FA6.7
1976:  BSF    FA6.2
1978:  MOVF   FF2,W
197A:  MOVWF  00
197C:  BCF    FF2.7
197E:  MOVLB  F
1980:  MOVLW  55
1982:  MOVWF  FA7
1984:  MOVLW  AA
1986:  MOVWF  FA7
1988:  BSF    FA6.1
198A:  BTFSC  FA6.1
198C:  BRA    198A
198E:  BCF    FA6.2
1990:  MOVF   00,W
1992:  IORWF  FF2,F
....................          delay_ms(10); 
1994:  MOVLW  0A
1996:  MOVLB  0
1998:  MOVWF  xEB
199A:  CALL   06CA
....................          reset_cpu(); 
199E:  RESET
....................       } 
....................    } 
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(10); 
19A0:  MOVFF  FF2,D4
19A4:  BCF    FF2.7
19A6:  CLRF   FA9
19A8:  BCF    FA6.6
19AA:  BCF    FA6.7
19AC:  BSF    FA6.0
19AE:  MOVF   FA8,W
19B0:  BTFSC  xD4.7
19B2:  BSF    FF2.7
19B4:  MOVWF  40
19B6:  MOVLW  0A
19B8:  MOVWF  xEB
19BA:  CALL   06CA
....................    if(contrasena[0]>9){ 
19BE:  MOVF   40,W
19C0:  SUBLW  09
19C2:  BC    19F6
....................       contrasena[0]=0;write_eeprom(0,0);delay_ms(10); 
19C4:  CLRF   40
19C6:  CLRF   FA9
19C8:  CLRF   FA8
19CA:  BCF    FA6.6
19CC:  BCF    FA6.7
19CE:  BSF    FA6.2
19D0:  MOVF   FF2,W
19D2:  MOVWF  00
19D4:  BCF    FF2.7
19D6:  MOVLB  F
19D8:  MOVLW  55
19DA:  MOVWF  FA7
19DC:  MOVLW  AA
19DE:  MOVWF  FA7
19E0:  BSF    FA6.1
19E2:  BTFSC  FA6.1
19E4:  BRA    19E2
19E6:  BCF    FA6.2
19E8:  MOVF   00,W
19EA:  IORWF  FF2,F
19EC:  MOVLW  0A
19EE:  MOVLB  0
19F0:  MOVWF  xEB
19F2:  CALL   06CA
....................    } 
....................    contrasena[1]=read_eeprom(1);delay_ms(20); 
19F6:  MOVFF  FF2,D4
19FA:  BCF    FF2.7
19FC:  MOVLW  01
19FE:  MOVWF  FA9
1A00:  BCF    FA6.6
1A02:  BCF    FA6.7
1A04:  BSF    FA6.0
1A06:  MOVF   FA8,W
1A08:  BTFSC  xD4.7
1A0A:  BSF    FF2.7
1A0C:  MOVWF  41
1A0E:  MOVLW  14
1A10:  MOVWF  xEB
1A12:  CALL   06CA
....................    if(contrasena[1]>9){ 
1A16:  MOVF   41,W
1A18:  SUBLW  09
1A1A:  BC    1A50
....................       contrasena[1]=0;write_eeprom(1,0);delay_ms(10); 
1A1C:  CLRF   41
1A1E:  MOVLW  01
1A20:  MOVWF  FA9
1A22:  CLRF   FA8
1A24:  BCF    FA6.6
1A26:  BCF    FA6.7
1A28:  BSF    FA6.2
1A2A:  MOVF   FF2,W
1A2C:  MOVWF  00
1A2E:  BCF    FF2.7
1A30:  MOVLB  F
1A32:  MOVLW  55
1A34:  MOVWF  FA7
1A36:  MOVLW  AA
1A38:  MOVWF  FA7
1A3A:  BSF    FA6.1
1A3C:  BTFSC  FA6.1
1A3E:  BRA    1A3C
1A40:  BCF    FA6.2
1A42:  MOVF   00,W
1A44:  IORWF  FF2,F
1A46:  MOVLW  0A
1A48:  MOVLB  0
1A4A:  MOVWF  xEB
1A4C:  CALL   06CA
....................    } 
....................    contrasena[2]=read_eeprom(2);delay_ms(20); 
1A50:  MOVFF  FF2,D4
1A54:  BCF    FF2.7
1A56:  MOVLW  02
1A58:  MOVWF  FA9
1A5A:  BCF    FA6.6
1A5C:  BCF    FA6.7
1A5E:  BSF    FA6.0
1A60:  MOVF   FA8,W
1A62:  BTFSC  xD4.7
1A64:  BSF    FF2.7
1A66:  MOVWF  42
1A68:  MOVLW  14
1A6A:  MOVWF  xEB
1A6C:  CALL   06CA
....................    if(contrasena[2]>9){ 
1A70:  MOVF   42,W
1A72:  SUBLW  09
1A74:  BC    1AAA
....................       contrasena[2]=0;write_eeprom(2,0);delay_ms(10); 
1A76:  CLRF   42
1A78:  MOVLW  02
1A7A:  MOVWF  FA9
1A7C:  CLRF   FA8
1A7E:  BCF    FA6.6
1A80:  BCF    FA6.7
1A82:  BSF    FA6.2
1A84:  MOVF   FF2,W
1A86:  MOVWF  00
1A88:  BCF    FF2.7
1A8A:  MOVLB  F
1A8C:  MOVLW  55
1A8E:  MOVWF  FA7
1A90:  MOVLW  AA
1A92:  MOVWF  FA7
1A94:  BSF    FA6.1
1A96:  BTFSC  FA6.1
1A98:  BRA    1A96
1A9A:  BCF    FA6.2
1A9C:  MOVF   00,W
1A9E:  IORWF  FF2,F
1AA0:  MOVLW  0A
1AA2:  MOVLB  0
1AA4:  MOVWF  xEB
1AA6:  CALL   06CA
....................    } 
....................    contrasena[3]=read_eeprom(3);delay_ms(20); 
1AAA:  MOVFF  FF2,D4
1AAE:  BCF    FF2.7
1AB0:  MOVLW  03
1AB2:  MOVWF  FA9
1AB4:  BCF    FA6.6
1AB6:  BCF    FA6.7
1AB8:  BSF    FA6.0
1ABA:  MOVF   FA8,W
1ABC:  BTFSC  xD4.7
1ABE:  BSF    FF2.7
1AC0:  MOVWF  43
1AC2:  MOVLW  14
1AC4:  MOVWF  xEB
1AC6:  CALL   06CA
....................    if(contrasena[3]>9){ 
1ACA:  MOVF   43,W
1ACC:  SUBLW  09
1ACE:  BC    1B04
....................       contrasena[3]=0;write_eeprom(3,0);delay_ms(10); 
1AD0:  CLRF   43
1AD2:  MOVLW  03
1AD4:  MOVWF  FA9
1AD6:  CLRF   FA8
1AD8:  BCF    FA6.6
1ADA:  BCF    FA6.7
1ADC:  BSF    FA6.2
1ADE:  MOVF   FF2,W
1AE0:  MOVWF  00
1AE2:  BCF    FF2.7
1AE4:  MOVLB  F
1AE6:  MOVLW  55
1AE8:  MOVWF  FA7
1AEA:  MOVLW  AA
1AEC:  MOVWF  FA7
1AEE:  BSF    FA6.1
1AF0:  BTFSC  FA6.1
1AF2:  BRA    1AF0
1AF4:  BCF    FA6.2
1AF6:  MOVF   00,W
1AF8:  IORWF  FF2,F
1AFA:  MOVLW  0A
1AFC:  MOVLB  0
1AFE:  MOVWF  xEB
1B00:  CALL   06CA
....................    } 
....................    MediaMovil=read_eeprom(5);delay_ms(20); 
1B04:  MOVFF  FF2,D4
1B08:  BCF    FF2.7
1B0A:  MOVLW  05
1B0C:  MOVWF  FA9
1B0E:  BCF    FA6.6
1B10:  BCF    FA6.7
1B12:  BSF    FA6.0
1B14:  MOVF   FA8,W
1B16:  BTFSC  xD4.7
1B18:  BSF    FF2.7
1B1A:  MOVWF  28
1B1C:  MOVLW  14
1B1E:  MOVWF  xEB
1B20:  CALL   06CA
....................    if(MediaMovil>16){ 
1B24:  MOVF   28,W
1B26:  SUBLW  10
1B28:  BC    1B62
....................       MediaMovil=16;write_eeprom(5,16);delay_ms(10); 
1B2A:  MOVLW  10
1B2C:  MOVWF  28
1B2E:  MOVLW  05
1B30:  MOVWF  FA9
1B32:  MOVLW  10
1B34:  MOVWF  FA8
1B36:  BCF    FA6.6
1B38:  BCF    FA6.7
1B3A:  BSF    FA6.2
1B3C:  MOVF   FF2,W
1B3E:  MOVWF  00
1B40:  BCF    FF2.7
1B42:  MOVLB  F
1B44:  MOVLW  55
1B46:  MOVWF  FA7
1B48:  MOVLW  AA
1B4A:  MOVWF  FA7
1B4C:  BSF    FA6.1
1B4E:  BTFSC  FA6.1
1B50:  BRA    1B4E
1B52:  BCF    FA6.2
1B54:  MOVF   00,W
1B56:  IORWF  FF2,F
1B58:  MOVLW  0A
1B5A:  MOVLB  0
1B5C:  MOVWF  xEB
1B5E:  CALL   06CA
....................    } 
....................    BandaInt=read_eeprom(6);delay_ms(20); 
1B62:  MOVFF  FF2,D4
1B66:  BCF    FF2.7
1B68:  MOVLW  06
1B6A:  MOVWF  FA9
1B6C:  BCF    FA6.6
1B6E:  BCF    FA6.7
1B70:  BSF    FA6.0
1B72:  MOVF   FA8,W
1B74:  BTFSC  xD4.7
1B76:  BSF    FF2.7
1B78:  MOVWF  2E
1B7A:  MOVLW  14
1B7C:  MOVWF  xEB
1B7E:  CALL   06CA
....................    if(BandaInt>10){ 
1B82:  MOVF   2E,W
1B84:  SUBLW  0A
1B86:  BC    1BC0
....................       BandaInt=10;write_eeprom(6,10);delay_ms(10); 
1B88:  MOVLW  0A
1B8A:  MOVWF  2E
1B8C:  MOVLW  06
1B8E:  MOVWF  FA9
1B90:  MOVLW  0A
1B92:  MOVWF  FA8
1B94:  BCF    FA6.6
1B96:  BCF    FA6.7
1B98:  BSF    FA6.2
1B9A:  MOVF   FF2,W
1B9C:  MOVWF  00
1B9E:  BCF    FF2.7
1BA0:  MOVLB  F
1BA2:  MOVLW  55
1BA4:  MOVWF  FA7
1BA6:  MOVLW  AA
1BA8:  MOVWF  FA7
1BAA:  BSF    FA6.1
1BAC:  BTFSC  FA6.1
1BAE:  BRA    1BAC
1BB0:  BCF    FA6.2
1BB2:  MOVF   00,W
1BB4:  IORWF  FF2,F
1BB6:  MOVLW  0A
1BB8:  MOVLB  0
1BBA:  MOVWF  xEB
1BBC:  CALL   06CA
....................    } 
....................    BandaDec=read_eeprom(7);delay_ms(20); 
1BC0:  MOVFF  FF2,D4
1BC4:  BCF    FF2.7
1BC6:  MOVLW  07
1BC8:  MOVWF  FA9
1BCA:  BCF    FA6.6
1BCC:  BCF    FA6.7
1BCE:  BSF    FA6.0
1BD0:  MOVF   FA8,W
1BD2:  BTFSC  xD4.7
1BD4:  BSF    FF2.7
1BD6:  MOVWF  2F
1BD8:  MOVLW  14
1BDA:  MOVWF  xEB
1BDC:  CALL   06CA
....................    if(BandaDec>9){ 
1BE0:  MOVF   2F,W
1BE2:  SUBLW  09
1BE4:  BC    1C1A
....................       BandaDec=0;write_eeprom(7,0);delay_ms(10); 
1BE6:  CLRF   2F
1BE8:  MOVLW  07
1BEA:  MOVWF  FA9
1BEC:  CLRF   FA8
1BEE:  BCF    FA6.6
1BF0:  BCF    FA6.7
1BF2:  BSF    FA6.2
1BF4:  MOVF   FF2,W
1BF6:  MOVWF  00
1BF8:  BCF    FF2.7
1BFA:  MOVLB  F
1BFC:  MOVLW  55
1BFE:  MOVWF  FA7
1C00:  MOVLW  AA
1C02:  MOVWF  FA7
1C04:  BSF    FA6.1
1C06:  BTFSC  FA6.1
1C08:  BRA    1C06
1C0A:  BCF    FA6.2
1C0C:  MOVF   00,W
1C0E:  IORWF  FF2,F
1C10:  MOVLW  0A
1C12:  MOVLB  0
1C14:  MOVWF  xEB
1C16:  CALL   06CA
....................    } 
....................    sPpHInt=read_eeprom(8);delay_ms(20); 
1C1A:  MOVFF  FF2,D4
1C1E:  BCF    FF2.7
1C20:  MOVLW  08
1C22:  MOVWF  FA9
1C24:  BCF    FA6.6
1C26:  BCF    FA6.7
1C28:  BSF    FA6.0
1C2A:  MOVF   FA8,W
1C2C:  BTFSC  xD4.7
1C2E:  BSF    FF2.7
1C30:  MOVWF  30
1C32:  MOVLW  14
1C34:  MOVWF  xEB
1C36:  CALL   06CA
....................    if(sPpHInt>14){ 
1C3A:  MOVF   30,W
1C3C:  SUBLW  0E
1C3E:  BC    1C78
....................       sPpHInt=7;write_eeprom(8,7);delay_ms(10); 
1C40:  MOVLW  07
1C42:  MOVWF  30
1C44:  MOVLW  08
1C46:  MOVWF  FA9
1C48:  MOVLW  07
1C4A:  MOVWF  FA8
1C4C:  BCF    FA6.6
1C4E:  BCF    FA6.7
1C50:  BSF    FA6.2
1C52:  MOVF   FF2,W
1C54:  MOVWF  00
1C56:  BCF    FF2.7
1C58:  MOVLB  F
1C5A:  MOVLW  55
1C5C:  MOVWF  FA7
1C5E:  MOVLW  AA
1C60:  MOVWF  FA7
1C62:  BSF    FA6.1
1C64:  BTFSC  FA6.1
1C66:  BRA    1C64
1C68:  BCF    FA6.2
1C6A:  MOVF   00,W
1C6C:  IORWF  FF2,F
1C6E:  MOVLW  0A
1C70:  MOVLB  0
1C72:  MOVWF  xEB
1C74:  CALL   06CA
....................    } 
....................    sPpHDec=read_eeprom(9);delay_ms(20); 
1C78:  MOVFF  FF2,D4
1C7C:  BCF    FF2.7
1C7E:  MOVLW  09
1C80:  MOVWF  FA9
1C82:  BCF    FA6.6
1C84:  BCF    FA6.7
1C86:  BSF    FA6.0
1C88:  MOVF   FA8,W
1C8A:  BTFSC  xD4.7
1C8C:  BSF    FF2.7
1C8E:  MOVWF  31
1C90:  MOVLW  14
1C92:  MOVWF  xEB
1C94:  CALL   06CA
....................    if(sPpHDec>9){ 
1C98:  MOVF   31,W
1C9A:  SUBLW  09
1C9C:  BC    1CD2
....................       sPpHDec=0;write_eeprom(9,0);delay_ms(10); 
1C9E:  CLRF   31
1CA0:  MOVLW  09
1CA2:  MOVWF  FA9
1CA4:  CLRF   FA8
1CA6:  BCF    FA6.6
1CA8:  BCF    FA6.7
1CAA:  BSF    FA6.2
1CAC:  MOVF   FF2,W
1CAE:  MOVWF  00
1CB0:  BCF    FF2.7
1CB2:  MOVLB  F
1CB4:  MOVLW  55
1CB6:  MOVWF  FA7
1CB8:  MOVLW  AA
1CBA:  MOVWF  FA7
1CBC:  BSF    FA6.1
1CBE:  BTFSC  FA6.1
1CC0:  BRA    1CBE
1CC2:  BCF    FA6.2
1CC4:  MOVF   00,W
1CC6:  IORWF  FF2,F
1CC8:  MOVLW  0A
1CCA:  MOVLB  0
1CCC:  MOVWF  xEB
1CCE:  CALL   06CA
....................    } 
....................    bInt=read_eeprom(20); 
1CD2:  MOVFF  FF2,D4
1CD6:  BCF    FF2.7
1CD8:  MOVLW  14
1CDA:  MOVWF  FA9
1CDC:  BCF    FA6.6
1CDE:  BCF    FA6.7
1CE0:  BSF    FA6.0
1CE2:  MOVF   FA8,W
1CE4:  BTFSC  xD4.7
1CE6:  BSF    FF2.7
1CE8:  MOVWF  32
....................    delay_ms(20); 
1CEA:  MOVLW  14
1CEC:  MOVWF  xEB
1CEE:  CALL   06CA
....................    bDec=read_eeprom(21); 
1CF2:  MOVFF  FF2,D4
1CF6:  BCF    FF2.7
1CF8:  MOVLW  15
1CFA:  MOVWF  FA9
1CFC:  BCF    FA6.6
1CFE:  BCF    FA6.7
1D00:  BSF    FA6.0
1D02:  MOVF   FA8,W
1D04:  BTFSC  xD4.7
1D06:  BSF    FF2.7
1D08:  MOVWF  33
....................    delay_ms(20); 
1D0A:  MOVLW  14
1D0C:  MOVWF  xEB
1D0E:  CALL   06CA
....................    X0=read_eeprom(30); 
1D12:  MOVFF  FF2,D4
1D16:  BCF    FF2.7
1D18:  MOVLW  1E
1D1A:  MOVWF  FA9
1D1C:  BCF    FA6.6
1D1E:  BCF    FA6.7
1D20:  BSF    FA6.0
1D22:  MOVF   FA8,W
1D24:  BTFSC  xD4.7
1D26:  BSF    FF2.7
1D28:  CLRF   xDF
1D2A:  MOVWF  xDE
1D2C:  CALL   07AC
1D30:  MOVFF  03,A3
1D34:  MOVFF  02,A2
1D38:  MOVFF  01,A1
1D3C:  MOVFF  00,A0
....................    delay_ms(20); 
1D40:  MOVLW  14
1D42:  MOVWF  xEB
1D44:  CALL   06CA
....................    X1=read_eeprom(31); 
1D48:  MOVFF  FF2,D4
1D4C:  BCF    FF2.7
1D4E:  MOVLW  1F
1D50:  MOVWF  FA9
1D52:  BCF    FA6.6
1D54:  BCF    FA6.7
1D56:  BSF    FA6.0
1D58:  MOVF   FA8,W
1D5A:  BTFSC  xD4.7
1D5C:  BSF    FF2.7
1D5E:  CLRF   xDF
1D60:  MOVWF  xDE
1D62:  CALL   07AC
1D66:  MOVFF  03,AB
1D6A:  MOVFF  02,AA
1D6E:  MOVFF  01,A9
1D72:  MOVFF  00,A8
....................    delay_ms(20); 
1D76:  MOVLW  14
1D78:  MOVWF  xEB
1D7A:  CALL   06CA
....................    Y0Int=read_eeprom(32); 
1D7E:  MOVFF  FF2,D4
1D82:  BCF    FF2.7
1D84:  MOVLW  20
1D86:  MOVWF  FA9
1D88:  BCF    FA6.6
1D8A:  BCF    FA6.7
1D8C:  BSF    FA6.0
1D8E:  MOVF   FA8,W
1D90:  BTFSC  xD4.7
1D92:  BSF    FF2.7
1D94:  MOVWF  34
....................    delay_ms(20); 
1D96:  MOVLW  14
1D98:  MOVWF  xEB
1D9A:  CALL   06CA
....................    Y0Dec=read_eeprom(33); 
1D9E:  MOVFF  FF2,D4
1DA2:  BCF    FF2.7
1DA4:  MOVLW  21
1DA6:  MOVWF  FA9
1DA8:  BCF    FA6.6
1DAA:  BCF    FA6.7
1DAC:  BSF    FA6.0
1DAE:  MOVF   FA8,W
1DB0:  BTFSC  xD4.7
1DB2:  BSF    FF2.7
1DB4:  MOVWF  35
....................    delay_ms(20); 
1DB6:  MOVLW  14
1DB8:  MOVWF  xEB
1DBA:  CALL   06CA
....................    Y1Int=read_eeprom(34); 
1DBE:  MOVFF  FF2,D4
1DC2:  BCF    FF2.7
1DC4:  MOVLW  22
1DC6:  MOVWF  FA9
1DC8:  BCF    FA6.6
1DCA:  BCF    FA6.7
1DCC:  BSF    FA6.0
1DCE:  MOVF   FA8,W
1DD0:  BTFSC  xD4.7
1DD2:  BSF    FF2.7
1DD4:  MOVWF  36
....................    delay_ms(20); 
1DD6:  MOVLW  14
1DD8:  MOVWF  xEB
1DDA:  CALL   06CA
....................    Y1Dec=read_eeprom(35); 
1DDE:  MOVFF  FF2,D4
1DE2:  BCF    FF2.7
1DE4:  MOVLW  23
1DE6:  MOVWF  FA9
1DE8:  BCF    FA6.6
1DEA:  BCF    FA6.7
1DEC:  BSF    FA6.0
1DEE:  MOVF   FA8,W
1DF0:  BTFSC  xD4.7
1DF2:  BSF    FF2.7
1DF4:  MOVWF  37
....................    delay_ms(20); 
1DF6:  MOVLW  14
1DF8:  MOVWF  xEB
1DFA:  CALL   06CA
....................    segundos=read_eeprom(50); 
1DFE:  MOVFF  FF2,D4
1E02:  BCF    FF2.7
1E04:  MOVLW  32
1E06:  MOVWF  FA9
1E08:  BCF    FA6.6
1E0A:  BCF    FA6.7
1E0C:  BSF    FA6.0
1E0E:  MOVF   FA8,W
1E10:  BTFSC  xD4.7
1E12:  BSF    FF2.7
1E14:  MOVWF  22
....................    delay_ms(20); 
1E16:  MOVLW  14
1E18:  MOVWF  xEB
1E1A:  CALL   06CA
....................    minutos=read_eeprom(51); 
1E1E:  MOVFF  FF2,D4
1E22:  BCF    FF2.7
1E24:  MOVLW  33
1E26:  MOVWF  FA9
1E28:  BCF    FA6.6
1E2A:  BCF    FA6.7
1E2C:  BSF    FA6.0
1E2E:  MOVF   FA8,W
1E30:  BTFSC  xD4.7
1E32:  BSF    FF2.7
1E34:  MOVWF  23
....................    delay_ms(20); 
1E36:  MOVLW  14
1E38:  MOVWF  xEB
1E3A:  CALL   06CA
....................    horas=read_eeprom(52); 
1E3E:  MOVFF  FF2,D4
1E42:  BCF    FF2.7
1E44:  MOVLW  34
1E46:  MOVWF  FA9
1E48:  BCF    FA6.6
1E4A:  BCF    FA6.7
1E4C:  BSF    FA6.0
1E4E:  MOVF   FA8,W
1E50:  BTFSC  xD4.7
1E52:  BSF    FF2.7
1E54:  MOVWF  24
....................    delay_ms(20); 
1E56:  MOVLW  14
1E58:  MOVWF  xEB
1E5A:  CALL   06CA
....................    negativo=read_eeprom(60); 
1E5E:  MOVFF  FF2,D4
1E62:  BCF    FF2.7
1E64:  MOVLW  3C
1E66:  MOVWF  FA9
1E68:  BCF    FA6.6
1E6A:  BCF    FA6.7
1E6C:  BSF    FA6.0
1E6E:  MOVF   FA8,W
1E70:  BTFSC  xD4.7
1E72:  BSF    FF2.7
1E74:  MOVWF  2A
....................    delay_ms(20); 
1E76:  MOVLW  14
1E78:  MOVWF  xEB
1E7A:  CALL   06CA
....................    tpulso=read_eeprom(70); 
1E7E:  MOVFF  FF2,D4
1E82:  BCF    FF2.7
1E84:  MOVLW  46
1E86:  MOVWF  FA9
1E88:  BCF    FA6.6
1E8A:  BCF    FA6.7
1E8C:  BSF    FA6.0
1E8E:  MOVF   FA8,W
1E90:  BTFSC  xD4.7
1E92:  BSF    FF2.7
1E94:  MOVWF  2D
....................    delay_ms(20); 
1E96:  MOVLW  14
1E98:  MOVWF  xEB
1E9A:  CALL   06CA
....................     
....................    tmp=Y0Dec/10.0; 
1E9E:  CLRF   xDF
1EA0:  MOVFF  35,DE
1EA4:  CALL   07AC
1EA8:  MOVFF  03,E0
1EAC:  MOVFF  02,DF
1EB0:  MOVFF  01,DE
1EB4:  MOVFF  00,DD
1EB8:  CLRF   xE4
1EBA:  CLRF   xE3
1EBC:  MOVLW  20
1EBE:  MOVWF  xE2
1EC0:  MOVLW  82
1EC2:  MOVWF  xE1
1EC4:  CALL   090E
1EC8:  MOVFF  03,CB
1ECC:  MOVFF  02,CA
1ED0:  MOVFF  01,C9
1ED4:  MOVFF  00,C8
....................    Y0=Y0Int+tmp; 
1ED8:  CLRF   xDF
1EDA:  MOVFF  34,DE
1EDE:  CALL   07AC
1EE2:  BCF    FD8.1
1EE4:  MOVFF  03,E0
1EE8:  MOVFF  02,DF
1EEC:  MOVFF  01,DE
1EF0:  MOVFF  00,DD
1EF4:  MOVFF  CB,E4
1EF8:  MOVFF  CA,E3
1EFC:  MOVFF  C9,E2
1F00:  MOVFF  C8,E1
1F04:  CALL   0A68
1F08:  MOVFF  03,A7
1F0C:  MOVFF  02,A6
1F10:  MOVFF  01,A5
1F14:  MOVFF  00,A4
....................     
....................    tmp=Y1Dec/10.0; 
1F18:  CLRF   xDF
1F1A:  MOVFF  37,DE
1F1E:  CALL   07AC
1F22:  MOVFF  03,E0
1F26:  MOVFF  02,DF
1F2A:  MOVFF  01,DE
1F2E:  MOVFF  00,DD
1F32:  CLRF   xE4
1F34:  CLRF   xE3
1F36:  MOVLW  20
1F38:  MOVWF  xE2
1F3A:  MOVLW  82
1F3C:  MOVWF  xE1
1F3E:  CALL   090E
1F42:  MOVFF  03,CB
1F46:  MOVFF  02,CA
1F4A:  MOVFF  01,C9
1F4E:  MOVFF  00,C8
....................    Y1=Y1Int+tmp; 
1F52:  CLRF   xDF
1F54:  MOVFF  36,DE
1F58:  CALL   07AC
1F5C:  BCF    FD8.1
1F5E:  MOVFF  03,E0
1F62:  MOVFF  02,DF
1F66:  MOVFF  01,DE
1F6A:  MOVFF  00,DD
1F6E:  MOVFF  CB,E4
1F72:  MOVFF  CA,E3
1F76:  MOVFF  C9,E2
1F7A:  MOVFF  C8,E1
1F7E:  CALL   0A68
1F82:  MOVFF  03,AF
1F86:  MOVFF  02,AE
1F8A:  MOVFF  01,AD
1F8E:  MOVFF  00,AC
....................     
....................    tmp=bDec/100.0; 
1F92:  CLRF   xDF
1F94:  MOVFF  33,DE
1F98:  CALL   07AC
1F9C:  MOVFF  03,E0
1FA0:  MOVFF  02,DF
1FA4:  MOVFF  01,DE
1FA8:  MOVFF  00,DD
1FAC:  CLRF   xE4
1FAE:  CLRF   xE3
1FB0:  MOVLW  48
1FB2:  MOVWF  xE2
1FB4:  MOVLW  85
1FB6:  MOVWF  xE1
1FB8:  CALL   090E
1FBC:  MOVFF  03,CB
1FC0:  MOVFF  02,CA
1FC4:  MOVFF  01,C9
1FC8:  MOVFF  00,C8
....................    b=bInt+tmp; 
1FCC:  CLRF   xDF
1FCE:  MOVFF  32,DE
1FD2:  CALL   07AC
1FD6:  BCF    FD8.1
1FD8:  MOVFF  03,E0
1FDC:  MOVFF  02,DF
1FE0:  MOVFF  01,DE
1FE4:  MOVFF  00,DD
1FE8:  MOVFF  CB,E4
1FEC:  MOVFF  CA,E3
1FF0:  MOVFF  C9,E2
1FF4:  MOVFF  C8,E1
1FF8:  CALL   0A68
1FFC:  MOVFF  03,C3
2000:  MOVFF  02,C2
2004:  MOVFF  01,C1
2008:  MOVFF  00,C0
....................     
....................    tmp=sPpHDec/10.0; 
200C:  CLRF   xDF
200E:  MOVFF  31,DE
2012:  CALL   07AC
2016:  MOVFF  03,E0
201A:  MOVFF  02,DF
201E:  MOVFF  01,DE
2022:  MOVFF  00,DD
2026:  CLRF   xE4
2028:  CLRF   xE3
202A:  MOVLW  20
202C:  MOVWF  xE2
202E:  MOVLW  82
2030:  MOVWF  xE1
2032:  CALL   090E
2036:  MOVFF  03,CB
203A:  MOVFF  02,CA
203E:  MOVFF  01,C9
2042:  MOVFF  00,C8
....................    sPpH=sPpHInt+tmp; 
2046:  CLRF   xDF
2048:  MOVFF  30,DE
204C:  CALL   07AC
2050:  BCF    FD8.1
2052:  MOVFF  03,E0
2056:  MOVFF  02,DF
205A:  MOVFF  01,DE
205E:  MOVFF  00,DD
2062:  MOVFF  CB,E4
2066:  MOVFF  CA,E3
206A:  MOVFF  C9,E2
206E:  MOVFF  C8,E1
2072:  CALL   0A68
2076:  MOVFF  03,BB
207A:  MOVFF  02,BA
207E:  MOVFF  01,B9
2082:  MOVFF  00,B8
....................     
....................    tmp=BandaDec/10.0; 
2086:  CLRF   xDF
2088:  MOVFF  2F,DE
208C:  CALL   07AC
2090:  MOVFF  03,E0
2094:  MOVFF  02,DF
2098:  MOVFF  01,DE
209C:  MOVFF  00,DD
20A0:  CLRF   xE4
20A2:  CLRF   xE3
20A4:  MOVLW  20
20A6:  MOVWF  xE2
20A8:  MOVLW  82
20AA:  MOVWF  xE1
20AC:  CALL   090E
20B0:  MOVFF  03,CB
20B4:  MOVFF  02,CA
20B8:  MOVFF  01,C9
20BC:  MOVFF  00,C8
....................    Banda=BandaInt+tmp; 
20C0:  CLRF   xDF
20C2:  MOVFF  2E,DE
20C6:  CALL   07AC
20CA:  BCF    FD8.1
20CC:  MOVFF  03,E0
20D0:  MOVFF  02,DF
20D4:  MOVFF  01,DE
20D8:  MOVFF  00,DD
20DC:  MOVFF  CB,E4
20E0:  MOVFF  CA,E3
20E4:  MOVFF  C9,E2
20E8:  MOVFF  C8,E1
20EC:  CALL   0A68
20F0:  MOVFF  03,C7
20F4:  MOVFF  02,C6
20F8:  MOVFF  01,C5
20FC:  MOVFF  00,C4
....................     
....................    if(b>255){ 
2100:  CLRF   xDC
2102:  CLRF   xDB
2104:  MOVLW  7F
2106:  MOVWF  xDA
2108:  MOVLW  86
210A:  MOVWF  xD9
210C:  MOVFF  C3,E0
2110:  MOVFF  C2,DF
2114:  MOVFF  C1,DE
2118:  MOVFF  C0,DD
211C:  CALL   0CD2
2120:  BNC   2132
....................       b=0.32; 
2122:  MOVLW  0A
2124:  MOVWF  xC3
2126:  MOVLW  D7
2128:  MOVWF  xC2
212A:  MOVLW  23
212C:  MOVWF  xC1
212E:  MOVLW  7D
2130:  MOVWF  xC0
....................    } 
....................    if(X0>250){ 
2132:  CLRF   xDC
2134:  CLRF   xDB
2136:  MOVLW  7A
2138:  MOVWF  xDA
213A:  MOVLW  86
213C:  MOVWF  xD9
213E:  MOVFF  A3,E0
2142:  MOVFF  A2,DF
2146:  MOVFF  A1,DE
214A:  MOVFF  A0,DD
214E:  CALL   0CD2
2152:  BNC   2160
....................       X0=60; 
2154:  CLRF   xA3
2156:  CLRF   xA2
2158:  MOVLW  70
215A:  MOVWF  xA1
215C:  MOVLW  84
215E:  MOVWF  xA0
....................    } 
....................    if(X1>250){ 
2160:  CLRF   xDC
2162:  CLRF   xDB
2164:  MOVLW  7A
2166:  MOVWF  xDA
2168:  MOVLW  86
216A:  MOVWF  xD9
216C:  MOVFF  AB,E0
2170:  MOVFF  AA,DF
2174:  MOVFF  A9,DE
2178:  MOVFF  A8,DD
217C:  CALL   0CD2
2180:  BNC   218E
....................       X1=103; 
2182:  CLRF   xAB
2184:  CLRF   xAA
2186:  MOVLW  4E
2188:  MOVWF  xA9
218A:  MOVLW  85
218C:  MOVWF  xA8
....................    } 
....................    if(Y0>250){ 
218E:  CLRF   xDC
2190:  CLRF   xDB
2192:  MOVLW  7A
2194:  MOVWF  xDA
2196:  MOVLW  86
2198:  MOVWF  xD9
219A:  MOVFF  A7,E0
219E:  MOVFF  A6,DF
21A2:  MOVFF  A5,DE
21A6:  MOVFF  A4,DD
21AA:  CALL   0CD2
21AE:  BNC   21BA
....................       Y0=4.0; 
21B0:  CLRF   xA7
21B2:  CLRF   xA6
21B4:  CLRF   xA5
21B6:  MOVLW  81
21B8:  MOVWF  xA4
....................    } 
....................    if(Y1>250){ 
21BA:  CLRF   xDC
21BC:  CLRF   xDB
21BE:  MOVLW  7A
21C0:  MOVWF  xDA
21C2:  MOVLW  86
21C4:  MOVWF  xD9
21C6:  MOVFF  AF,E0
21CA:  MOVFF  AE,DF
21CE:  MOVFF  AD,DE
21D2:  MOVFF  AC,DD
21D6:  CALL   0CD2
21DA:  BNC   21E8
....................       Y1=7.0; 
21DC:  CLRF   xAF
21DE:  CLRF   xAE
21E0:  MOVLW  60
21E2:  MOVWF  xAD
21E4:  MOVLW  81
21E6:  MOVWF  xAC
....................    } 
....................    if(negativo>20){ 
21E8:  MOVF   2A,W
21EA:  SUBLW  14
21EC:  BC    21F2
....................       negativo=20; 
21EE:  MOVLW  14
21F0:  MOVWF  2A
....................    } 
....................    //b=0.32 
....................    //x=60 
....................    //x1=103 
....................    //Y0=4.0 
....................    //Y1=7.0 
....................    //negativo=20; 
....................    
....................    Menu=100; 
21F2:  MOVLW  64
21F4:  MOVWF  19
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
21F6:  MOVF   19,F
21F8:  BTFSS  FD8.2
21FA:  BRA    25A4
....................    lcd_gotoxy(1,1); 
21FC:  MOVLW  01
21FE:  MOVWF  xE6
2200:  MOVWF  xE7
2202:  CALL   082E
....................    printf(lcd_putc,"     Ingrese        "); 
2206:  MOVLW  E4
2208:  MOVWF  FF6
220A:  MOVLW  01
220C:  MOVWF  FF7
220E:  CALL   08EE
....................    lcd_gotoxy(1,2); 
2212:  MOVLW  01
2214:  MOVWF  xE6
2216:  MOVLW  02
2218:  MOVWF  xE7
221A:  CALL   082E
....................    printf(lcd_putc,"    Contraseña      "); 
221E:  MOVLW  FA
2220:  MOVWF  FF6
2222:  MOVLW  01
2224:  MOVWF  FF7
2226:  CALL   08EE
....................    lcd_gotoxy(1,3); 
222A:  MOVLW  01
222C:  MOVWF  xE6
222E:  MOVLW  03
2230:  MOVWF  xE7
2232:  CALL   082E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2236:  MOVLW  10
2238:  MOVWF  FF6
223A:  MOVLW  02
223C:  MOVWF  FF7
223E:  MOVLW  0A
2240:  MOVWF  xD8
2242:  CALL   0D48
2246:  MOVFF  3C,D4
224A:  MOVLW  1F
224C:  MOVWF  xD5
224E:  CALL   0D8E
2252:  MOVFF  3D,D4
2256:  MOVLW  1F
2258:  MOVWF  xD5
225A:  CALL   0D8E
225E:  MOVFF  3E,D4
2262:  MOVLW  1F
2264:  MOVWF  xD5
2266:  CALL   0D8E
226A:  MOVFF  3F,D4
226E:  MOVLW  1F
2270:  MOVWF  xD5
2272:  CALL   0D8E
2276:  MOVLW  20
2278:  MOVWF  xE5
227A:  CALL   0890
227E:  MOVLW  20
2280:  MOVWF  xE5
2282:  CALL   0890
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
2286:  BSF    F92.2
2288:  BTFSC  F80.2
228A:  BRA    22AE
....................       { 
....................          if(Flanco == 0) 
228C:  BTFSC  17.3
228E:  BRA    22AC
....................          { 
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
2290:  MOVLW  0B
2292:  SUBWF  1C,W
2294:  CLRF   03
2296:  ADDLW  3C
2298:  MOVWF  FE9
229A:  MOVLW  00
229C:  ADDWFC 03,W
229E:  MOVWF  FEA
22A0:  INCF   FEF,F
22A2:  BSF    17.3
22A4:  MOVLW  1E
22A6:  MOVWF  xEB
22A8:  CALL   06CA
....................          } 
....................       } 
....................       else 
22AC:  BRA    22B0
....................       { 
....................          Flanco = 0; 
22AE:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
22B0:  BSF    F92.3
22B2:  BTFSC  F80.3
22B4:  BRA    22D8
....................       { 
....................          if(Flanco2 == 0) 
22B6:  BTFSC  17.5
22B8:  BRA    22D6
....................          { 
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
22BA:  MOVLW  0B
22BC:  SUBWF  1C,W
22BE:  CLRF   03
22C0:  ADDLW  3C
22C2:  MOVWF  FE9
22C4:  MOVLW  00
22C6:  ADDWFC 03,W
22C8:  MOVWF  FEA
22CA:  DECF   FEF,F
22CC:  BSF    17.5
22CE:  MOVLW  1E
22D0:  MOVWF  xEB
22D2:  CALL   06CA
....................          } 
....................       } 
....................       else 
22D6:  BRA    22DA
....................       { 
....................          Flanco2 = 0; 
22D8:  BCF    17.5
....................       } 
....................     
....................       if(RIGHT)// Si Oprime Derecha 
22DA:  BSF    F92.4
22DC:  BTFSC  F80.4
22DE:  BRA    22FA
....................       { 
....................          if(Flanco1 == 0) 
22E0:  BTFSC  17.4
22E2:  BRA    22F8
....................          { 
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
22E4:  BSF    17.4
22E6:  INCF   1C,F
22E8:  MOVLW  1E
22EA:  MOVWF  xEB
22EC:  CALL   06CA
22F0:  MOVLW  0C
22F2:  MOVWF  xE5
22F4:  CALL   0890
....................          } 
....................       } 
....................       else 
22F8:  BRA    22FC
....................       { 
....................          Flanco1 = 0; 
22FA:  BCF    17.4
....................       } 
....................              
....................       if(LEFT)// Si Oprime izquierda 
22FC:  BSF    F92.5
22FE:  BTFSC  F80.5
2300:  BRA    231C
....................       { 
....................          if(Flanco3 == 0) 
2302:  BTFSC  17.6
2304:  BRA    231A
....................          { 
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
2306:  BSF    17.6
2308:  DECF   1C,F
230A:  MOVLW  1E
230C:  MOVWF  xEB
230E:  CALL   06CA
2312:  MOVLW  0C
2314:  MOVWF  xE5
2316:  CALL   0890
....................          } 
....................       } 
....................       else 
231A:  BRA    231E
....................       { 
....................          Flanco3 = 0; 
231C:  BCF    17.6
....................       } 
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
231E:  MOVLW  0B
2320:  SUBWF  1C,W
2322:  CLRF   03
2324:  ADDLW  3C
2326:  MOVWF  FE9
2328:  MOVLW  00
232A:  ADDWFC 03,W
232C:  MOVWF  FEA
232E:  BTFSC  FEF.7
2330:  BRA    2334
2332:  BRA    2348
....................        {clave[unidad-11]=9;} 
2334:  MOVLW  0B
2336:  SUBWF  1C,W
2338:  CLRF   03
233A:  ADDLW  3C
233C:  MOVWF  FE9
233E:  MOVLW  00
2340:  ADDWFC 03,W
2342:  MOVWF  FEA
2344:  MOVLW  09
2346:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2348:  MOVLW  0B
234A:  SUBWF  1C,W
234C:  CLRF   03
234E:  ADDLW  3C
2350:  MOVWF  FE9
2352:  MOVLW  00
2354:  ADDWFC 03,W
2356:  MOVWF  FEA
2358:  BTFSC  FEF.7
235A:  BRA    2374
235C:  MOVF   FEF,W
235E:  SUBLW  09
2360:  BC    2374
....................        {clave[unidad-11]=0;} 
2362:  MOVLW  0B
2364:  SUBWF  1C,W
2366:  CLRF   03
2368:  ADDLW  3C
236A:  MOVWF  FE9
236C:  MOVLW  00
236E:  ADDWFC 03,W
2370:  MOVWF  FEA
2372:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2374:  MOVF   1C,W
2376:  SUBLW  0A
2378:  BNC   237E
....................        {unidad=11;} 
237A:  MOVLW  0B
237C:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
237E:  MOVFF  1C,E6
2382:  MOVLW  04
2384:  MOVWF  xE7
2386:  CALL   082E
....................        lcd_putc(t[2]); 
238A:  MOVFF  3B,E5
238E:  CALL   0890
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2392:  MOVF   1C,W
2394:  SUBLW  0E
2396:  BTFSC  FD8.0
2398:  BRA    2580
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
239A:  MOVF   3C,W
239C:  SUBLW  03
239E:  BNZ   247A
23A0:  MOVF   3D,W
23A2:  SUBLW  08
23A4:  BNZ   247A
23A6:  MOVF   3E,W
23A8:  SUBLW  09
23AA:  BNZ   247A
23AC:  MOVF   3F,W
23AE:  SUBLW  02
23B0:  BNZ   247A
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
23B2:  CLRF   FA9
23B4:  CLRF   FA8
23B6:  BCF    FA6.6
23B8:  BCF    FA6.7
23BA:  BSF    FA6.2
23BC:  MOVF   FF2,W
23BE:  MOVWF  00
23C0:  BCF    FF2.7
23C2:  MOVLB  F
23C4:  MOVLW  55
23C6:  MOVWF  FA7
23C8:  MOVLW  AA
23CA:  MOVWF  FA7
23CC:  BSF    FA6.1
23CE:  BTFSC  FA6.1
23D0:  BRA    23CE
23D2:  BCF    FA6.2
23D4:  MOVF   00,W
23D6:  IORWF  FF2,F
23D8:  MOVLW  14
23DA:  MOVLB  0
23DC:  MOVWF  xEB
23DE:  CALL   06CA
23E2:  MOVLW  01
23E4:  MOVWF  FA9
23E6:  CLRF   FA8
23E8:  BCF    FA6.6
23EA:  BCF    FA6.7
23EC:  BSF    FA6.2
23EE:  MOVF   FF2,W
23F0:  MOVWF  00
23F2:  BCF    FF2.7
23F4:  MOVLB  F
23F6:  MOVLW  55
23F8:  MOVWF  FA7
23FA:  MOVLW  AA
23FC:  MOVWF  FA7
23FE:  BSF    FA6.1
2400:  BTFSC  FA6.1
2402:  BRA    2400
2404:  BCF    FA6.2
2406:  MOVF   00,W
2408:  IORWF  FF2,F
240A:  MOVLW  14
240C:  MOVLB  0
240E:  MOVWF  xEB
2410:  CALL   06CA
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2414:  MOVLW  02
2416:  MOVWF  FA9
2418:  CLRF   FA8
241A:  BCF    FA6.6
241C:  BCF    FA6.7
241E:  BSF    FA6.2
2420:  MOVF   FF2,W
2422:  MOVWF  00
2424:  BCF    FF2.7
2426:  MOVLB  F
2428:  MOVLW  55
242A:  MOVWF  FA7
242C:  MOVLW  AA
242E:  MOVWF  FA7
2430:  BSF    FA6.1
2432:  BTFSC  FA6.1
2434:  BRA    2432
2436:  BCF    FA6.2
2438:  MOVF   00,W
243A:  IORWF  FF2,F
243C:  MOVLW  14
243E:  MOVLB  0
2440:  MOVWF  xEB
2442:  CALL   06CA
2446:  MOVLW  03
2448:  MOVWF  FA9
244A:  CLRF   FA8
244C:  BCF    FA6.6
244E:  BCF    FA6.7
2450:  BSF    FA6.2
2452:  MOVF   FF2,W
2454:  MOVWF  00
2456:  BCF    FF2.7
2458:  MOVLB  F
245A:  MOVLW  55
245C:  MOVWF  FA7
245E:  MOVLW  AA
2460:  MOVWF  FA7
2462:  BSF    FA6.1
2464:  BTFSC  FA6.1
2466:  BRA    2464
2468:  BCF    FA6.2
246A:  MOVF   00,W
246C:  IORWF  FF2,F
246E:  MOVLW  14
2470:  MOVLB  0
2472:  MOVWF  xEB
2474:  CALL   06CA
....................              reset_cpu();} 
2478:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
247A:  MOVF   40,W
247C:  SUBWF  3C,W
247E:  BNZ   2512
2480:  MOVF   41,W
2482:  SUBWF  3D,W
2484:  BNZ   2512
2486:  MOVF   42,W
2488:  SUBWF  3E,W
248A:  BNZ   2512
248C:  MOVF   43,W
248E:  SUBWF  3F,W
2490:  BNZ   2512
....................             {lcd_gotoxy(1,1); 
2492:  MOVLW  01
2494:  MOVWF  xE6
2496:  MOVWF  xE7
2498:  CALL   082E
....................             printf(lcd_putc,"                   "); 
249C:  MOVLW  26
249E:  MOVWF  FF6
24A0:  MOVLW  02
24A2:  MOVWF  FF7
24A4:  CALL   08EE
....................             lcd_gotoxy(1,2); 
24A8:  MOVLW  01
24AA:  MOVWF  xE6
24AC:  MOVLW  02
24AE:  MOVWF  xE7
24B0:  CALL   082E
....................             printf(lcd_putc,"     Contraseña    "); 
24B4:  MOVLW  3A
24B6:  MOVWF  FF6
24B8:  MOVLW  02
24BA:  MOVWF  FF7
24BC:  CALL   08EE
....................             lcd_gotoxy(1,3); 
24C0:  MOVLW  01
24C2:  MOVWF  xE6
24C4:  MOVLW  03
24C6:  MOVWF  xE7
24C8:  CALL   082E
....................             printf(lcd_putc,"      Correcta     "); 
24CC:  MOVLW  4E
24CE:  MOVWF  FF6
24D0:  MOVLW  02
24D2:  MOVWF  FF7
24D4:  CALL   08EE
....................             lcd_gotoxy(1,4); 
24D8:  MOVLW  01
24DA:  MOVWF  xE6
24DC:  MOVLW  04
24DE:  MOVWF  xE7
24E0:  CALL   082E
....................             printf(lcd_putc,"                   "); 
24E4:  MOVLW  62
24E6:  MOVWF  FF6
24E8:  MOVLW  02
24EA:  MOVWF  FF7
24EC:  CALL   08EE
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
24F0:  MOVLW  04
24F2:  MOVWF  xD4
24F4:  MOVLW  FA
24F6:  MOVWF  xEB
24F8:  CALL   06CA
24FC:  DECFSZ xD4,F
24FE:  BRA    24F4
2500:  MOVLW  64
2502:  MOVWF  19
2504:  MOVLW  0B
2506:  MOVWF  1C
2508:  MOVLW  0C
250A:  MOVWF  xE5
250C:  CALL   0890
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2510:  BRA    2580
....................          {lcd_gotoxy(1,1); 
2512:  MOVLW  01
2514:  MOVWF  xE6
2516:  MOVWF  xE7
2518:  CALL   082E
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
251C:  MOVLW  01
251E:  MOVWF  xE6
2520:  MOVLW  02
2522:  MOVWF  xE7
2524:  CALL   082E
....................             printf(lcd_putc,"     Contraseña    "); 
2528:  MOVLW  76
252A:  MOVWF  FF6
252C:  MOVLW  02
252E:  MOVWF  FF7
2530:  CALL   08EE
....................             lcd_gotoxy(1,3); 
2534:  MOVLW  01
2536:  MOVWF  xE6
2538:  MOVLW  03
253A:  MOVWF  xE7
253C:  CALL   082E
....................             printf(lcd_putc,"     Incorrecta    "); 
2540:  MOVLW  8A
2542:  MOVWF  FF6
2544:  MOVLW  02
2546:  MOVWF  FF7
2548:  CALL   08EE
....................             lcd_gotoxy(1,4); 
254C:  MOVLW  01
254E:  MOVWF  xE6
2550:  MOVLW  04
2552:  MOVWF  xE7
2554:  CALL   082E
....................             printf(lcd_putc,"                   "); 
2558:  MOVLW  9E
255A:  MOVWF  FF6
255C:  MOVLW  02
255E:  MOVWF  FF7
2560:  CALL   08EE
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
2564:  MOVLW  04
2566:  MOVWF  xD4
2568:  MOVLW  FA
256A:  MOVWF  xEB
256C:  CALL   06CA
2570:  DECFSZ xD4,F
2572:  BRA    2568
2574:  MOVLW  0B
2576:  MOVWF  1C
2578:  MOVLW  0C
257A:  MOVWF  xE5
257C:  CALL   0890
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
2580:  MOVF   1C,W
2582:  SUBLW  0B
2584:  BC    25A4
2586:  MOVF   1C,W
2588:  SUBLW  0D
258A:  BNC   25A4
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
258C:  MOVLW  01
258E:  SUBWF  1C,W
2590:  MOVWF  xD4
2592:  MOVWF  xE6
2594:  MOVLW  04
2596:  MOVWF  xE7
2598:  CALL   082E
....................             lcd_putc(t[1]); 
259C:  MOVFF  3A,E5
25A0:  CALL   0890
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
25A4:  DECFSZ 19,W
25A6:  BRA    2798
....................    lcd_gotoxy(1,1); 
25A8:  MOVLW  01
25AA:  MOVWF  xE6
25AC:  MOVWF  xE7
25AE:  CALL   082E
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
25B2:  MOVLW  B2
25B4:  MOVWF  FF6
25B6:  MOVLW  02
25B8:  MOVWF  FF7
25BA:  CALL   08EE
....................       if(paso<0) 
25BE:  BTFSC  38.7
25C0:  BRA    25C4
25C2:  BRA    25C6
....................         {paso=0;} 
25C4:  CLRF   38
....................          
....................       if(UP)//Si oprime hacia arriba 
25C6:  BSF    F92.2
25C8:  BTFSC  F80.2
25CA:  BRA    25E6
....................       { 
....................          if(Flanco == 0) 
25CC:  BTFSC  17.3
25CE:  BRA    25E4
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
25D0:  DECF   1F,F
25D2:  DECF   1D,F
25D4:  MOVLW  01
25D6:  ADDWF  1D,W
25D8:  MOVWF  1E
25DA:  BSF    17.3
25DC:  MOVLW  1E
25DE:  MOVWF  xEB
25E0:  CALL   06CA
....................          } 
....................       } 
....................       else 
25E4:  BRA    25E8
....................       { 
....................          Flanco = 0; 
25E6:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
25E8:  BSF    F92.3
25EA:  BTFSC  F80.3
25EC:  BRA    2608
....................       { 
....................          if(Flanco2 == 0) 
25EE:  BTFSC  17.5
25F0:  BRA    2606
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
25F2:  INCF   1F,F
25F4:  INCF   1D,F
25F6:  MOVLW  01
25F8:  SUBWF  1D,W
25FA:  MOVWF  1E
25FC:  BSF    17.5
25FE:  MOVLW  1E
2600:  MOVWF  xEB
2602:  CALL   06CA
....................          } 
....................       } 
....................       else 
2606:  BRA    260A
....................       { 
....................          Flanco2 = 0; 
2608:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
260A:  MOVF   1F,W
260C:  SUBWF  21,W
260E:  BC    2620
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2610:  INCF   38,F
2612:  MOVFF  1F,21
2616:  MOVLW  02
2618:  SUBWF  21,W
261A:  MOVWF  20
261C:  MOVLW  04
261E:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
2620:  MOVF   20,W
2622:  SUBWF  1F,W
2624:  BC    2636
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2626:  DECF   38,F
2628:  MOVFF  1F,20
262C:  MOVLW  02
262E:  ADDWF  20,W
2630:  MOVWF  21
2632:  MOVLW  02
2634:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
2636:  MOVF   1F,W
2638:  SUBWF  1A,W
263A:  BC    264E
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
263C:  MOVFF  1B,1F
2640:  MOVLW  02
2642:  MOVWF  1D
2644:  CLRF   38
2646:  MOVFF  1F,20
264A:  ADDWF  20,W
264C:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
264E:  MOVF   1B,W
2650:  SUBWF  1F,W
2652:  BC    266A
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
2654:  MOVFF  1A,1F
2658:  MOVLW  04
265A:  MOVWF  1D
265C:  SUBWF  1A,W
265E:  MOVWF  38
2660:  MOVFF  1F,21
2664:  MOVLW  02
2666:  SUBWF  21,W
2668:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
266A:  MOVLW  01
266C:  ADDWF  38,W
266E:  MOVWF  xD4
2670:  MOVWF  xD5
2672:  MOVLW  02
2674:  MOVWF  xD6
2676:  CALL   0E56
....................         mensajes(2+paso,3); 
267A:  MOVLW  02
267C:  ADDWF  38,W
267E:  MOVWF  xD4
2680:  MOVWF  xD5
2682:  MOVLW  03
2684:  MOVWF  xD6
2686:  CALL   0E56
....................         mensajes(3+paso,4); 
268A:  MOVLW  03
268C:  ADDWF  38,W
268E:  MOVWF  xD4
2690:  MOVWF  xD5
2692:  MOVLW  04
2694:  MOVWF  xD6
2696:  CALL   0E56
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
269A:  MOVLW  01
269C:  MOVWF  xE6
269E:  MOVFF  1D,E7
26A2:  CALL   082E
....................         lcd_putc(t[0]); 
26A6:  MOVFF  39,E5
26AA:  CALL   0890
....................  
....................         if(Flecha==2) 
26AE:  MOVF   1D,W
26B0:  SUBLW  02
26B2:  BNZ   26DC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
26B4:  MOVLW  01
26B6:  MOVWF  xE6
26B8:  MOVLW  04
26BA:  MOVWF  xE7
26BC:  CALL   082E
....................             lcd_putc(t[1]); 
26C0:  MOVFF  3A,E5
26C4:  CALL   0890
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26C8:  MOVLW  01
26CA:  MOVWF  xE6
26CC:  MOVLW  03
26CE:  MOVWF  xE7
26D0:  CALL   082E
....................             lcd_putc(t[1]); 
26D4:  MOVFF  3A,E5
26D8:  CALL   0890
....................           } 
....................          
....................         if(Flecha==4) 
26DC:  MOVF   1D,W
26DE:  SUBLW  04
26E0:  BNZ   270A
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26E2:  MOVLW  01
26E4:  MOVWF  xE6
26E6:  MOVLW  02
26E8:  MOVWF  xE7
26EA:  CALL   082E
....................             lcd_putc(t[1]); 
26EE:  MOVFF  3A,E5
26F2:  CALL   0890
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26F6:  MOVLW  01
26F8:  MOVWF  xE6
26FA:  MOVLW  03
26FC:  MOVWF  xE7
26FE:  CALL   082E
....................             lcd_putc(t[1]); 
2702:  MOVFF  3A,E5
2706:  CALL   0890
....................           } 
....................          
....................         if(Flecha==3) 
270A:  MOVF   1D,W
270C:  SUBLW  03
270E:  BNZ   2738
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2710:  MOVLW  01
2712:  MOVWF  xE6
2714:  MOVLW  04
2716:  MOVWF  xE7
2718:  CALL   082E
....................             lcd_putc(t[1]); 
271C:  MOVFF  3A,E5
2720:  CALL   0890
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2724:  MOVLW  01
2726:  MOVWF  xE6
2728:  MOVLW  02
272A:  MOVWF  xE7
272C:  CALL   082E
....................             lcd_putc(t[1]); 
2730:  MOVFF  3A,E5
2734:  CALL   0890
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2738:  BSF    F92.4
273A:  BTFSC  F80.4
273C:  BRA    2774
....................        { 
....................          if(Flanco1 == 0) 
273E:  BTFSC  17.4
2740:  BRA    2772
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2742:  BSF    17.4
2744:  MOVFF  1F,19
2748:  MOVLW  03
274A:  MOVWF  1D
274C:  MOVLW  02
274E:  MOVWF  xD4
2750:  MOVLW  96
2752:  MOVWF  xEB
2754:  CALL   06CA
2758:  DECFSZ xD4,F
275A:  BRA    2750
275C:  MOVLW  0C
275E:  MOVWF  xE5
2760:  CALL   0890
....................             if(Menu==6) 
2764:  MOVF   19,W
2766:  SUBLW  06
2768:  BNZ   2772
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
276A:  CLRF   3C
276C:  CLRF   3D
276E:  CLRF   3E
2770:  CLRF   3F
....................             } 
....................          } 
....................        } 
....................        else 
2772:  BRA    2776
....................        { 
....................          Flanco1 = 0; 
2774:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
2776:  BSF    F92.5
2778:  BTFSC  F80.5
277A:  BRA    2798
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
277C:  MOVLW  64
277E:  MOVWF  19
2780:  MOVLW  0C
2782:  MOVWF  xE5
2784:  CALL   0890
2788:  MOVLW  02
278A:  MOVWF  xD4
278C:  MOVLW  FA
278E:  MOVWF  xEB
2790:  CALL   06CA
2794:  DECFSZ xD4,F
2796:  BRA    278C
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de Calibracion en un punto 
2798:  MOVF   19,W
279A:  SUBLW  02
279C:  BTFSS  FD8.2
279E:  BRA    2BA8
....................     
....................    lcd_gotoxy(1,1); 
27A0:  MOVLW  01
27A2:  MOVWF  xE6
27A4:  MOVWF  xE7
27A6:  CALL   082E
....................    printf(lcd_putc,"Calibracion un Punto"); 
27AA:  MOVLW  C8
27AC:  MOVWF  FF6
27AE:  MOVLW  02
27B0:  MOVWF  FF7
27B2:  CALL   08EE
....................    lcd_gotoxy(1,2); 
27B6:  MOVLW  01
27B8:  MOVWF  xE6
27BA:  MOVLW  02
27BC:  MOVWF  xE7
27BE:  CALL   082E
....................    printf(lcd_putc," Ingrese valor  pH  "); 
27C2:  MOVLW  DE
27C4:  MOVWF  FF6
27C6:  MOVLW  02
27C8:  MOVWF  FF7
27CA:  CALL   08EE
....................    lcd_gotoxy(1,3); 
27CE:  MOVLW  01
27D0:  MOVWF  xE6
27D2:  MOVLW  03
27D4:  MOVWF  xE7
27D6:  CALL   082E
....................    printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
27DA:  MOVLW  F4
27DC:  MOVWF  FF6
27DE:  MOVLW  02
27E0:  MOVWF  FF7
27E2:  MOVLW  05
27E4:  MOVWF  xD8
27E6:  CALL   0D48
27EA:  MOVLW  01
27EC:  MOVWF  FE9
27EE:  MOVFF  B3,DB
27F2:  MOVFF  B2,DA
27F6:  MOVFF  B1,D9
27FA:  MOVFF  B0,D8
27FE:  MOVWF  xDC
2800:  CALL   10B8
2804:  MOVLW  FE
2806:  MOVWF  FF6
2808:  MOVLW  02
280A:  MOVWF  FF7
280C:  MOVLW  05
280E:  MOVWF  xD8
2810:  CALL   0D48
....................     
....................           
....................    if(pHpoint<0.5) 
2814:  MOVFF  B3,DC
2818:  MOVFF  B2,DB
281C:  MOVFF  B1,DA
2820:  MOVFF  B0,D9
2824:  CLRF   xE0
2826:  CLRF   xDF
2828:  CLRF   xDE
282A:  MOVLW  7E
282C:  MOVWF  xDD
282E:  CALL   0CD2
2832:  BNC   283E
....................    { 
....................       pHpoint=0.5; 
2834:  CLRF   xB3
2836:  CLRF   xB2
2838:  CLRF   xB1
283A:  MOVLW  7E
283C:  MOVWF  xB0
....................    } 
....................    if(pHpoint>14.0) 
283E:  CLRF   xDC
2840:  CLRF   xDB
2842:  MOVLW  60
2844:  MOVWF  xDA
2846:  MOVLW  82
2848:  MOVWF  xD9
284A:  MOVFF  B3,E0
284E:  MOVFF  B2,DF
2852:  MOVFF  B1,DE
2856:  MOVFF  B0,DD
285A:  CALL   0CD2
285E:  BNC   286C
....................    { 
....................       pHpoint=14.0; 
2860:  CLRF   xB3
2862:  CLRF   xB2
2864:  MOVLW  60
2866:  MOVWF  xB1
2868:  MOVLW  82
286A:  MOVWF  xB0
....................    } 
....................     
....................    if(UP) 
286C:  BSF    F92.2
286E:  BTFSC  F80.2
2870:  BRA    28D2
....................    { 
....................       if(pHpoint<14.0) 
2872:  MOVFF  B3,DC
2876:  MOVFF  B2,DB
287A:  MOVFF  B1,DA
287E:  MOVFF  B0,D9
2882:  CLRF   xE0
2884:  CLRF   xDF
2886:  MOVLW  60
2888:  MOVWF  xDE
288A:  MOVLW  82
288C:  MOVWF  xDD
288E:  CALL   0CD2
2892:  BNC   28D2
....................       { 
....................          pHpoint+=0.1;delay_ms(50); 
2894:  BCF    FD8.1
2896:  MOVFF  B3,E0
289A:  MOVFF  B2,DF
289E:  MOVFF  B1,DE
28A2:  MOVFF  B0,DD
28A6:  MOVLW  CD
28A8:  MOVWF  xE4
28AA:  MOVLW  CC
28AC:  MOVWF  xE3
28AE:  MOVLW  4C
28B0:  MOVWF  xE2
28B2:  MOVLW  7B
28B4:  MOVWF  xE1
28B6:  CALL   0A68
28BA:  MOVFF  03,B3
28BE:  MOVFF  02,B2
28C2:  MOVFF  01,B1
28C6:  MOVFF  00,B0
28CA:  MOVLW  32
28CC:  MOVWF  xEB
28CE:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(DOWN) 
28D2:  BSF    F92.3
28D4:  BTFSC  F80.3
28D6:  BRA    2936
....................    { 
....................       if(pHpoint>0.5) 
28D8:  CLRF   xDC
28DA:  CLRF   xDB
28DC:  CLRF   xDA
28DE:  MOVLW  7E
28E0:  MOVWF  xD9
28E2:  MOVFF  B3,E0
28E6:  MOVFF  B2,DF
28EA:  MOVFF  B1,DE
28EE:  MOVFF  B0,DD
28F2:  CALL   0CD2
28F6:  BNC   2936
....................       { 
....................          pHpoint-=0.1;delay_ms(50); 
28F8:  BSF    FD8.1
28FA:  MOVFF  B3,E0
28FE:  MOVFF  B2,DF
2902:  MOVFF  B1,DE
2906:  MOVFF  B0,DD
290A:  MOVLW  CD
290C:  MOVWF  xE4
290E:  MOVLW  CC
2910:  MOVWF  xE3
2912:  MOVLW  4C
2914:  MOVWF  xE2
2916:  MOVLW  7B
2918:  MOVWF  xE1
291A:  CALL   0A68
291E:  MOVFF  03,B3
2922:  MOVFF  02,B2
2926:  MOVFF  01,B1
292A:  MOVFF  00,B0
292E:  MOVLW  32
2930:  MOVWF  xEB
2932:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2936:  BSF    F92.4
2938:  BTFSC  F80.4
293A:  BRA    2B7E
....................    { 
....................       b=pHpoint-pVpH; 
293C:  BSF    FD8.1
293E:  MOVFF  B3,E0
2942:  MOVFF  B2,DF
2946:  MOVFF  B1,DE
294A:  MOVFF  B0,DD
294E:  MOVFF  B7,E4
2952:  MOVFF  B6,E3
2956:  MOVFF  B5,E2
295A:  MOVFF  B4,E1
295E:  CALL   0A68
2962:  MOVFF  03,C3
2966:  MOVFF  02,C2
296A:  MOVFF  01,C1
296E:  MOVFF  00,C0
....................       if(b>=0) 
2972:  CLRF   xDC
2974:  CLRF   xDB
2976:  CLRF   xDA
2978:  CLRF   xD9
297A:  MOVFF  C3,E0
297E:  MOVFF  C2,DF
2982:  MOVFF  C1,DE
2986:  MOVFF  C0,DD
298A:  CALL   0CD2
298E:  BC    2992
2990:  BNZ   29C2
....................       { 
....................          negativo=10;write_eeprom(60,negativo); 
2992:  MOVLW  0A
2994:  MOVWF  2A
2996:  MOVLW  3C
2998:  MOVWF  FA9
299A:  MOVFF  2A,FA8
299E:  BCF    FA6.6
29A0:  BCF    FA6.7
29A2:  BSF    FA6.2
29A4:  MOVF   FF2,W
29A6:  MOVWF  00
29A8:  BCF    FF2.7
29AA:  MOVLB  F
29AC:  MOVLW  55
29AE:  MOVWF  FA7
29B0:  MOVLW  AA
29B2:  MOVWF  FA7
29B4:  BSF    FA6.1
29B6:  BTFSC  FA6.1
29B8:  BRA    29B6
29BA:  BCF    FA6.2
29BC:  MOVF   00,W
29BE:  IORWF  FF2,F
29C0:  MOVLB  0
....................       } 
....................       if(b<0) 
29C2:  MOVFF  C3,DC
29C6:  MOVFF  C2,DB
29CA:  MOVFF  C1,DA
29CE:  MOVFF  C0,D9
29D2:  CLRF   xE0
29D4:  CLRF   xDF
29D6:  CLRF   xDE
29D8:  CLRF   xDD
29DA:  CALL   0CD2
29DE:  BNC   2A10
....................       { 
....................          negativo=20;write_eeprom(60,negativo); 
29E0:  MOVLW  14
29E2:  MOVWF  2A
29E4:  MOVLW  3C
29E6:  MOVWF  FA9
29E8:  MOVFF  2A,FA8
29EC:  BCF    FA6.6
29EE:  BCF    FA6.7
29F0:  BSF    FA6.2
29F2:  MOVF   FF2,W
29F4:  MOVWF  00
29F6:  BCF    FF2.7
29F8:  MOVLB  F
29FA:  MOVLW  55
29FC:  MOVWF  FA7
29FE:  MOVLW  AA
2A00:  MOVWF  FA7
2A02:  BSF    FA6.1
2A04:  BTFSC  FA6.1
2A06:  BRA    2A04
2A08:  BCF    FA6.2
2A0A:  MOVF   00,W
2A0C:  IORWF  FF2,F
2A0E:  MOVLB  0
....................       } 
....................       b=abs(b); 
2A10:  MOVFF  C0,00
2A14:  MOVFF  C1,01
2A18:  MOVFF  C2,02
2A1C:  MOVFF  C3,03
2A20:  BCF    01.7
2A22:  MOVFF  C3,C3
2A26:  MOVFF  C2,C2
2A2A:  MOVFF  01,C1
2A2E:  MOVFF  C0,C0
....................       bInt=(int8)b; 
2A32:  MOVFF  C3,D7
2A36:  MOVFF  C2,D6
2A3A:  MOVFF  C1,D5
2A3E:  MOVFF  C0,D4
2A42:  CALL   123E
2A46:  MOVFF  01,32
....................       tmp=b-bInt; 
2A4A:  CLRF   xDF
2A4C:  MOVFF  32,DE
2A50:  CALL   07AC
2A54:  BSF    FD8.1
2A56:  MOVFF  C3,E0
2A5A:  MOVFF  C2,DF
2A5E:  MOVFF  C1,DE
2A62:  MOVFF  C0,DD
2A66:  MOVFF  03,E4
2A6A:  MOVFF  02,E3
2A6E:  MOVFF  01,E2
2A72:  MOVFF  00,E1
2A76:  CALL   0A68
2A7A:  MOVFF  03,CB
2A7E:  MOVFF  02,CA
2A82:  MOVFF  01,C9
2A86:  MOVFF  00,C8
....................       bDec=tmp*100; 
2A8A:  MOVFF  CB,E8
2A8E:  MOVFF  CA,E7
2A92:  MOVFF  C9,E6
2A96:  MOVFF  C8,E5
2A9A:  CLRF   xEC
2A9C:  CLRF   xEB
2A9E:  MOVLW  48
2AA0:  MOVWF  xEA
2AA2:  MOVLW  85
2AA4:  MOVWF  xE9
2AA6:  CALL   0F0C
2AAA:  MOVFF  03,D7
2AAE:  MOVFF  02,D6
2AB2:  MOVFF  01,D5
2AB6:  MOVFF  00,D4
2ABA:  CALL   123E
2ABE:  MOVFF  01,33
....................       write_eeprom(20,bInt); 
2AC2:  MOVLW  14
2AC4:  MOVWF  FA9
2AC6:  MOVFF  32,FA8
2ACA:  BCF    FA6.6
2ACC:  BCF    FA6.7
2ACE:  BSF    FA6.2
2AD0:  MOVF   FF2,W
2AD2:  MOVWF  00
2AD4:  BCF    FF2.7
2AD6:  MOVLB  F
2AD8:  MOVLW  55
2ADA:  MOVWF  FA7
2ADC:  MOVLW  AA
2ADE:  MOVWF  FA7
2AE0:  BSF    FA6.1
2AE2:  BTFSC  FA6.1
2AE4:  BRA    2AE2
2AE6:  BCF    FA6.2
2AE8:  MOVF   00,W
2AEA:  IORWF  FF2,F
....................       delay_ms(20); 
2AEC:  MOVLW  14
2AEE:  MOVLB  0
2AF0:  MOVWF  xEB
2AF2:  CALL   06CA
....................       write_eeprom(21,bDec); 
2AF6:  MOVLW  15
2AF8:  MOVWF  FA9
2AFA:  MOVFF  33,FA8
2AFE:  BCF    FA6.6
2B00:  BCF    FA6.7
2B02:  BSF    FA6.2
2B04:  MOVF   FF2,W
2B06:  MOVWF  00
2B08:  BCF    FF2.7
2B0A:  MOVLB  F
2B0C:  MOVLW  55
2B0E:  MOVWF  FA7
2B10:  MOVLW  AA
2B12:  MOVWF  FA7
2B14:  BSF    FA6.1
2B16:  BTFSC  FA6.1
2B18:  BRA    2B16
2B1A:  BCF    FA6.2
2B1C:  MOVF   00,W
2B1E:  IORWF  FF2,F
....................       delay_ms(200); 
2B20:  MOVLW  C8
2B22:  MOVLB  0
2B24:  MOVWF  xEB
2B26:  CALL   06CA
....................       printf(lcd_putc,"\f"); 
2B2A:  MOVLW  0C
2B2C:  MOVWF  xE5
2B2E:  CALL   0890
....................       lcd_gotoxy(1,2); 
2B32:  MOVLW  01
2B34:  MOVWF  xE6
2B36:  MOVLW  02
2B38:  MOVWF  xE7
2B3A:  CALL   082E
....................       printf(lcd_putc,"   Calibracion   "); 
2B3E:  MOVLW  04
2B40:  MOVWF  FF6
2B42:  MOVLW  03
2B44:  MOVWF  FF7
2B46:  CALL   08EE
....................       lcd_gotoxy(1,3); 
2B4A:  MOVLW  01
2B4C:  MOVWF  xE6
2B4E:  MOVLW  03
2B50:  MOVWF  xE7
2B52:  CALL   082E
....................       printf(lcd_putc,"     Exitosa     "); 
2B56:  MOVLW  16
2B58:  MOVWF  FF6
2B5A:  MOVLW  03
2B5C:  MOVWF  FF7
2B5E:  CALL   08EE
....................       delay_ms(500); 
2B62:  MOVLW  02
2B64:  MOVWF  xD4
2B66:  MOVLW  FA
2B68:  MOVWF  xEB
2B6A:  CALL   06CA
2B6E:  DECFSZ xD4,F
2B70:  BRA    2B66
....................       printf(lcd_putc,"\f"); 
2B72:  MOVLW  0C
2B74:  MOVWF  xE5
2B76:  CALL   0890
....................       Menu=100; 
2B7A:  MOVLW  64
2B7C:  MOVWF  19
....................    } 
....................     
....................    if(LEFT) 
2B7E:  BSF    F92.5
2B80:  BTFSC  F80.5
2B82:  BRA    2BA8
....................    { 
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B84:  MOVLW  01
2B86:  MOVWF  19
2B88:  CLRF   38
2B8A:  MOVLW  04
2B8C:  MOVWF  xD4
2B8E:  MOVLW  FA
2B90:  MOVWF  xEB
2B92:  CALL   06CA
2B96:  DECFSZ xD4,F
2B98:  BRA    2B8E
2B9A:  MOVLW  02
2B9C:  MOVWF  1D
2B9E:  MOVWF  1F
2BA0:  MOVLW  0C
2BA2:  MOVWF  xE5
2BA4:  CALL   0890
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de calibracion en dos puntos 
2BA8:  MOVF   19,W
2BAA:  SUBLW  03
2BAC:  BTFSS  FD8.2
2BAE:  GOTO   34A6
....................     
....................       lcd_gotoxy(1,1); 
2BB2:  MOVLW  01
2BB4:  MOVWF  xE6
2BB6:  MOVWF  xE7
2BB8:  CALL   082E
....................       printf(lcd_putc,"Calibracion dos Punt"); 
2BBC:  MOVLW  28
2BBE:  MOVWF  FF6
2BC0:  MOVLW  03
2BC2:  MOVWF  FF7
2BC4:  CALL   08EE
....................       lcd_gotoxy(1,2); 
2BC8:  MOVLW  01
2BCA:  MOVWF  xE6
2BCC:  MOVLW  02
2BCE:  MOVWF  xE7
2BD0:  CALL   082E
....................       printf(lcd_putc,"Ingrese valor  pH %u",punto); 
2BD4:  MOVLW  3E
2BD6:  MOVWF  FF6
2BD8:  MOVLW  03
2BDA:  MOVWF  FF7
2BDC:  MOVLW  12
2BDE:  MOVWF  xD8
2BE0:  CALL   0D48
2BE4:  MOVFF  29,D8
2BE8:  MOVLW  1B
2BEA:  MOVWF  xD9
2BEC:  CALL   1276
....................       lcd_gotoxy(1,3); 
2BF0:  MOVLW  01
2BF2:  MOVWF  xE6
2BF4:  MOVLW  03
2BF6:  MOVWF  xE7
2BF8:  CALL   082E
....................       printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
2BFC:  MOVLW  54
2BFE:  MOVWF  FF6
2C00:  MOVLW  03
2C02:  MOVWF  FF7
2C04:  MOVLW  05
2C06:  MOVWF  xD8
2C08:  CALL   0D48
2C0C:  MOVLW  01
2C0E:  MOVWF  FE9
2C10:  MOVFF  B3,DB
2C14:  MOVFF  B2,DA
2C18:  MOVFF  B1,D9
2C1C:  MOVFF  B0,D8
2C20:  MOVWF  xDC
2C22:  CALL   10B8
2C26:  MOVLW  5E
2C28:  MOVWF  FF6
2C2A:  MOVLW  03
2C2C:  MOVWF  FF7
2C2E:  MOVLW  05
2C30:  MOVWF  xD8
2C32:  CALL   0D48
....................       //lcd_gotoxy(1,4); 
....................       //printf(lcd_putc,"     %2.1f  ",sensores(0));  
....................              
....................       if(pHpoint<0.5) 
2C36:  MOVFF  B3,DC
2C3A:  MOVFF  B2,DB
2C3E:  MOVFF  B1,DA
2C42:  MOVFF  B0,D9
2C46:  CLRF   xE0
2C48:  CLRF   xDF
2C4A:  CLRF   xDE
2C4C:  MOVLW  7E
2C4E:  MOVWF  xDD
2C50:  CALL   0CD2
2C54:  BNC   2C60
....................       { 
....................          pHpoint=0.5; 
2C56:  CLRF   xB3
2C58:  CLRF   xB2
2C5A:  CLRF   xB1
2C5C:  MOVLW  7E
2C5E:  MOVWF  xB0
....................       } 
....................       if(pHpoint>14.0) 
2C60:  CLRF   xDC
2C62:  CLRF   xDB
2C64:  MOVLW  60
2C66:  MOVWF  xDA
2C68:  MOVLW  82
2C6A:  MOVWF  xD9
2C6C:  MOVFF  B3,E0
2C70:  MOVFF  B2,DF
2C74:  MOVFF  B1,DE
2C78:  MOVFF  B0,DD
2C7C:  CALL   0CD2
2C80:  BNC   2C8E
....................       { 
....................          pHpoint=14.0; 
2C82:  CLRF   xB3
2C84:  CLRF   xB2
2C86:  MOVLW  60
2C88:  MOVWF  xB1
2C8A:  MOVLW  82
2C8C:  MOVWF  xB0
....................       } 
....................        
....................       if(UP) 
2C8E:  BSF    F92.2
2C90:  BTFSC  F80.2
2C92:  BRA    2CF4
....................       { 
....................          if(pHpoint<14.0) 
2C94:  MOVFF  B3,DC
2C98:  MOVFF  B2,DB
2C9C:  MOVFF  B1,DA
2CA0:  MOVFF  B0,D9
2CA4:  CLRF   xE0
2CA6:  CLRF   xDF
2CA8:  MOVLW  60
2CAA:  MOVWF  xDE
2CAC:  MOVLW  82
2CAE:  MOVWF  xDD
2CB0:  CALL   0CD2
2CB4:  BNC   2CF4
....................          { 
....................             pHpoint+=0.1;delay_ms(50); 
2CB6:  BCF    FD8.1
2CB8:  MOVFF  B3,E0
2CBC:  MOVFF  B2,DF
2CC0:  MOVFF  B1,DE
2CC4:  MOVFF  B0,DD
2CC8:  MOVLW  CD
2CCA:  MOVWF  xE4
2CCC:  MOVLW  CC
2CCE:  MOVWF  xE3
2CD0:  MOVLW  4C
2CD2:  MOVWF  xE2
2CD4:  MOVLW  7B
2CD6:  MOVWF  xE1
2CD8:  CALL   0A68
2CDC:  MOVFF  03,B3
2CE0:  MOVFF  02,B2
2CE4:  MOVFF  01,B1
2CE8:  MOVFF  00,B0
2CEC:  MOVLW  32
2CEE:  MOVWF  xEB
2CF0:  CALL   06CA
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2CF4:  BSF    F92.3
2CF6:  BTFSC  F80.3
2CF8:  BRA    2D58
....................       { 
....................          if(pHpoint>0.5) 
2CFA:  CLRF   xDC
2CFC:  CLRF   xDB
2CFE:  CLRF   xDA
2D00:  MOVLW  7E
2D02:  MOVWF  xD9
2D04:  MOVFF  B3,E0
2D08:  MOVFF  B2,DF
2D0C:  MOVFF  B1,DE
2D10:  MOVFF  B0,DD
2D14:  CALL   0CD2
2D18:  BNC   2D58
....................          { 
....................             pHpoint-=0.1;delay_ms(50); 
2D1A:  BSF    FD8.1
2D1C:  MOVFF  B3,E0
2D20:  MOVFF  B2,DF
2D24:  MOVFF  B1,DE
2D28:  MOVFF  B0,DD
2D2C:  MOVLW  CD
2D2E:  MOVWF  xE4
2D30:  MOVLW  CC
2D32:  MOVWF  xE3
2D34:  MOVLW  4C
2D36:  MOVWF  xE2
2D38:  MOVLW  7B
2D3A:  MOVWF  xE1
2D3C:  CALL   0A68
2D40:  MOVFF  03,B3
2D44:  MOVFF  02,B2
2D48:  MOVFF  01,B1
2D4C:  MOVFF  00,B0
2D50:  MOVLW  32
2D52:  MOVWF  xEB
2D54:  CALL   06CA
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2D58:  BSF    F92.4
2D5A:  BTFSC  F80.4
2D5C:  BRA    33A8
....................       { 
....................          if(punto==1) 
2D5E:  DECFSZ 29,W
2D60:  BRA    2DF8
....................          { 
....................             X0=sensores(0); 
2D62:  CLRF   xD9
2D64:  CALL   07E2
2D68:  MOVFF  03,A3
2D6C:  MOVFF  02,A2
2D70:  MOVFF  01,A1
2D74:  MOVFF  00,A0
....................             Y0=pHpoint; 
2D78:  MOVFF  B3,A7
2D7C:  MOVFF  B2,A6
2D80:  MOVFF  B1,A5
2D84:  MOVFF  B0,A4
....................             punto++; 
2D88:  INCF   29,F
....................             printf(lcd_putc,"\f"); 
2D8A:  MOVLW  0C
2D8C:  MOVWF  xE5
2D8E:  CALL   0890
....................             lcd_gotoxy(1,2); 
2D92:  MOVLW  01
2D94:  MOVWF  xE6
2D96:  MOVLW  02
2D98:  MOVWF  xE7
2D9A:  CALL   082E
....................             printf(lcd_putc,"   Ajustando     "); 
2D9E:  MOVLW  64
2DA0:  MOVWF  FF6
2DA2:  MOVLW  03
2DA4:  MOVWF  FF7
2DA6:  CALL   08EE
....................             lcd_gotoxy(1,3); 
2DAA:  MOVLW  01
2DAC:  MOVWF  xE6
2DAE:  MOVLW  03
2DB0:  MOVWF  xE7
2DB2:  CALL   082E
....................             printf(lcd_putc,"    Punto 1      "); 
2DB6:  MOVLW  76
2DB8:  MOVWF  FF6
2DBA:  MOVLW  03
2DBC:  MOVWF  FF7
2DBE:  CALL   08EE
....................             delay_ms(500); 
2DC2:  MOVLW  02
2DC4:  MOVWF  xD4
2DC6:  MOVLW  FA
2DC8:  MOVWF  xEB
2DCA:  CALL   06CA
2DCE:  DECFSZ xD4,F
2DD0:  BRA    2DC6
....................             delay_ms(1000); 
2DD2:  MOVLW  04
2DD4:  MOVWF  xD4
2DD6:  MOVLW  FA
2DD8:  MOVWF  xEB
2DDA:  CALL   06CA
2DDE:  DECFSZ xD4,F
2DE0:  BRA    2DD6
....................             printf(lcd_putc,"\f"); 
2DE2:  MOVLW  0C
2DE4:  MOVWF  xE5
2DE6:  CALL   0890
....................             pHpoint=7.0; 
2DEA:  CLRF   xB3
2DEC:  CLRF   xB2
2DEE:  MOVLW  60
2DF0:  MOVWF  xB1
2DF2:  MOVLW  81
2DF4:  MOVWF  xB0
....................          } 
....................          else 
2DF6:  BRA    33A8
....................          { 
....................             if(punto==2) 
2DF8:  MOVF   29,W
2DFA:  SUBLW  02
2DFC:  BTFSS  FD8.2
2DFE:  BRA    33A8
....................             { 
....................                X1=sensores(0); 
2E00:  CLRF   xD9
2E02:  CALL   07E2
2E06:  MOVFF  03,AB
2E0A:  MOVFF  02,AA
2E0E:  MOVFF  01,A9
2E12:  MOVFF  00,A8
....................                Y1=pHpoint; 
2E16:  MOVFF  B3,AF
2E1A:  MOVFF  B2,AE
2E1E:  MOVFF  B1,AD
2E22:  MOVFF  B0,AC
....................                 
....................                Y0Int=(int8)Y0; 
2E26:  MOVFF  A7,D7
2E2A:  MOVFF  A6,D6
2E2E:  MOVFF  A5,D5
2E32:  MOVFF  A4,D4
2E36:  CALL   123E
2E3A:  MOVFF  01,34
....................                tmp=Y0-Y0Int; 
2E3E:  CLRF   xDF
2E40:  MOVFF  34,DE
2E44:  CALL   07AC
2E48:  BSF    FD8.1
2E4A:  MOVFF  A7,E0
2E4E:  MOVFF  A6,DF
2E52:  MOVFF  A5,DE
2E56:  MOVFF  A4,DD
2E5A:  MOVFF  03,E4
2E5E:  MOVFF  02,E3
2E62:  MOVFF  01,E2
2E66:  MOVFF  00,E1
2E6A:  CALL   0A68
2E6E:  MOVFF  03,CB
2E72:  MOVFF  02,CA
2E76:  MOVFF  01,C9
2E7A:  MOVFF  00,C8
....................                Y0Dec=tmp*10; 
2E7E:  MOVFF  CB,E8
2E82:  MOVFF  CA,E7
2E86:  MOVFF  C9,E6
2E8A:  MOVFF  C8,E5
2E8E:  CLRF   xEC
2E90:  CLRF   xEB
2E92:  MOVLW  20
2E94:  MOVWF  xEA
2E96:  MOVLW  82
2E98:  MOVWF  xE9
2E9A:  CALL   0F0C
2E9E:  MOVFF  03,D7
2EA2:  MOVFF  02,D6
2EA6:  MOVFF  01,D5
2EAA:  MOVFF  00,D4
2EAE:  CALL   123E
2EB2:  MOVFF  01,35
....................                 
....................                Y1Int=(int8)Y1; 
2EB6:  MOVFF  AF,D7
2EBA:  MOVFF  AE,D6
2EBE:  MOVFF  AD,D5
2EC2:  MOVFF  AC,D4
2EC6:  CALL   123E
2ECA:  MOVFF  01,36
....................                tmp=Y1-Y1Int; 
2ECE:  CLRF   xDF
2ED0:  MOVFF  36,DE
2ED4:  CALL   07AC
2ED8:  BSF    FD8.1
2EDA:  MOVFF  AF,E0
2EDE:  MOVFF  AE,DF
2EE2:  MOVFF  AD,DE
2EE6:  MOVFF  AC,DD
2EEA:  MOVFF  03,E4
2EEE:  MOVFF  02,E3
2EF2:  MOVFF  01,E2
2EF6:  MOVFF  00,E1
2EFA:  CALL   0A68
2EFE:  MOVFF  03,CB
2F02:  MOVFF  02,CA
2F06:  MOVFF  01,C9
2F0A:  MOVFF  00,C8
....................                Y1Dec=tmp*10; 
2F0E:  MOVFF  CB,E8
2F12:  MOVFF  CA,E7
2F16:  MOVFF  C9,E6
2F1A:  MOVFF  C8,E5
2F1E:  CLRF   xEC
2F20:  CLRF   xEB
2F22:  MOVLW  20
2F24:  MOVWF  xEA
2F26:  MOVLW  82
2F28:  MOVWF  xE9
2F2A:  CALL   0F0C
2F2E:  MOVFF  03,D7
2F32:  MOVFF  02,D6
2F36:  MOVFF  01,D5
2F3A:  MOVFF  00,D4
2F3E:  CALL   123E
2F42:  MOVFF  01,37
....................                 
....................                write_eeprom(30,(int8)X0); 
2F46:  MOVFF  A3,D7
2F4A:  MOVFF  A2,D6
2F4E:  MOVFF  A1,D5
2F52:  MOVFF  A0,D4
2F56:  CALL   123E
2F5A:  MOVFF  01,D4
2F5E:  MOVLW  1E
2F60:  MOVWF  FA9
2F62:  MOVFF  D4,FA8
2F66:  BCF    FA6.6
2F68:  BCF    FA6.7
2F6A:  BSF    FA6.2
2F6C:  MOVF   FF2,W
2F6E:  MOVWF  00
2F70:  BCF    FF2.7
2F72:  MOVLB  F
2F74:  MOVLW  55
2F76:  MOVWF  FA7
2F78:  MOVLW  AA
2F7A:  MOVWF  FA7
2F7C:  BSF    FA6.1
2F7E:  BTFSC  FA6.1
2F80:  BRA    2F7E
2F82:  BCF    FA6.2
2F84:  MOVF   00,W
2F86:  IORWF  FF2,F
....................                delay_ms(20); 
2F88:  MOVLW  14
2F8A:  MOVLB  0
2F8C:  MOVWF  xEB
2F8E:  CALL   06CA
....................                write_eeprom(31,(int8)X1); 
2F92:  MOVFF  AB,D7
2F96:  MOVFF  AA,D6
2F9A:  MOVFF  A9,D5
2F9E:  MOVFF  A8,D4
2FA2:  CALL   123E
2FA6:  MOVFF  01,D4
2FAA:  MOVLW  1F
2FAC:  MOVWF  FA9
2FAE:  MOVFF  D4,FA8
2FB2:  BCF    FA6.6
2FB4:  BCF    FA6.7
2FB6:  BSF    FA6.2
2FB8:  MOVF   FF2,W
2FBA:  MOVWF  00
2FBC:  BCF    FF2.7
2FBE:  MOVLB  F
2FC0:  MOVLW  55
2FC2:  MOVWF  FA7
2FC4:  MOVLW  AA
2FC6:  MOVWF  FA7
2FC8:  BSF    FA6.1
2FCA:  BTFSC  FA6.1
2FCC:  BRA    2FCA
2FCE:  BCF    FA6.2
2FD0:  MOVF   00,W
2FD2:  IORWF  FF2,F
....................                delay_ms(20); 
2FD4:  MOVLW  14
2FD6:  MOVLB  0
2FD8:  MOVWF  xEB
2FDA:  CALL   06CA
....................                write_eeprom(32,Y0Int); 
2FDE:  MOVLW  20
2FE0:  MOVWF  FA9
2FE2:  MOVFF  34,FA8
2FE6:  BCF    FA6.6
2FE8:  BCF    FA6.7
2FEA:  BSF    FA6.2
2FEC:  MOVF   FF2,W
2FEE:  MOVWF  00
2FF0:  BCF    FF2.7
2FF2:  MOVLB  F
2FF4:  MOVLW  55
2FF6:  MOVWF  FA7
2FF8:  MOVLW  AA
2FFA:  MOVWF  FA7
2FFC:  BSF    FA6.1
2FFE:  BTFSC  FA6.1
3000:  BRA    2FFE
3002:  BCF    FA6.2
3004:  MOVF   00,W
3006:  IORWF  FF2,F
....................                delay_ms(20); 
3008:  MOVLW  14
300A:  MOVLB  0
300C:  MOVWF  xEB
300E:  CALL   06CA
....................                write_eeprom(33,Y0Dec); 
3012:  MOVLW  21
3014:  MOVWF  FA9
3016:  MOVFF  35,FA8
301A:  BCF    FA6.6
301C:  BCF    FA6.7
301E:  BSF    FA6.2
3020:  MOVF   FF2,W
3022:  MOVWF  00
3024:  BCF    FF2.7
3026:  MOVLB  F
3028:  MOVLW  55
302A:  MOVWF  FA7
302C:  MOVLW  AA
302E:  MOVWF  FA7
3030:  BSF    FA6.1
3032:  BTFSC  FA6.1
3034:  BRA    3032
3036:  BCF    FA6.2
3038:  MOVF   00,W
303A:  IORWF  FF2,F
....................                delay_ms(20); 
303C:  MOVLW  14
303E:  MOVLB  0
3040:  MOVWF  xEB
3042:  CALL   06CA
....................                write_eeprom(34,Y1Int); 
3046:  MOVLW  22
3048:  MOVWF  FA9
304A:  MOVFF  36,FA8
304E:  BCF    FA6.6
3050:  BCF    FA6.7
3052:  BSF    FA6.2
3054:  MOVF   FF2,W
3056:  MOVWF  00
3058:  BCF    FF2.7
305A:  MOVLB  F
305C:  MOVLW  55
305E:  MOVWF  FA7
3060:  MOVLW  AA
3062:  MOVWF  FA7
3064:  BSF    FA6.1
3066:  BTFSC  FA6.1
3068:  BRA    3066
306A:  BCF    FA6.2
306C:  MOVF   00,W
306E:  IORWF  FF2,F
....................                delay_ms(20); 
3070:  MOVLW  14
3072:  MOVLB  0
3074:  MOVWF  xEB
3076:  CALL   06CA
....................                write_eeprom(35,Y1Dec); 
307A:  MOVLW  23
307C:  MOVWF  FA9
307E:  MOVFF  37,FA8
3082:  BCF    FA6.6
3084:  BCF    FA6.7
3086:  BSF    FA6.2
3088:  MOVF   FF2,W
308A:  MOVWF  00
308C:  BCF    FF2.7
308E:  MOVLB  F
3090:  MOVLW  55
3092:  MOVWF  FA7
3094:  MOVLW  AA
3096:  MOVWF  FA7
3098:  BSF    FA6.1
309A:  BTFSC  FA6.1
309C:  BRA    309A
309E:  BCF    FA6.2
30A0:  MOVF   00,W
30A2:  IORWF  FF2,F
....................                delay_ms(20); 
30A4:  MOVLW  14
30A6:  MOVLB  0
30A8:  MOVWF  xEB
30AA:  CALL   06CA
....................                 
....................                b=Y1-(X1*(Y1-Y0)/(X1-X0)); 
30AE:  BSF    FD8.1
30B0:  MOVFF  AF,E0
30B4:  MOVFF  AE,DF
30B8:  MOVFF  AD,DE
30BC:  MOVFF  AC,DD
30C0:  MOVFF  A7,E4
30C4:  MOVFF  A6,E3
30C8:  MOVFF  A5,E2
30CC:  MOVFF  A4,E1
30D0:  CALL   0A68
30D4:  MOVFF  AB,E8
30D8:  MOVFF  AA,E7
30DC:  MOVFF  A9,E6
30E0:  MOVFF  A8,E5
30E4:  MOVFF  03,EC
30E8:  MOVFF  02,EB
30EC:  MOVFF  01,EA
30F0:  MOVFF  00,E9
30F4:  CALL   0F0C
30F8:  MOVFF  00,D4
30FC:  MOVFF  01,D5
3100:  MOVFF  02,D6
3104:  MOVFF  03,D7
3108:  BSF    FD8.1
310A:  MOVFF  AB,E0
310E:  MOVFF  AA,DF
3112:  MOVFF  A9,DE
3116:  MOVFF  A8,DD
311A:  MOVFF  A3,E4
311E:  MOVFF  A2,E3
3122:  MOVFF  A1,E2
3126:  MOVFF  A0,E1
312A:  CALL   0A68
312E:  MOVFF  D7,E0
3132:  MOVFF  D6,DF
3136:  MOVFF  D5,DE
313A:  MOVFF  D4,DD
313E:  MOVFF  03,E4
3142:  MOVFF  02,E3
3146:  MOVFF  01,E2
314A:  MOVFF  00,E1
314E:  CALL   090E
3152:  BSF    FD8.1
3154:  MOVFF  AF,E0
3158:  MOVFF  AE,DF
315C:  MOVFF  AD,DE
3160:  MOVFF  AC,DD
3164:  MOVFF  03,E4
3168:  MOVFF  02,E3
316C:  MOVFF  01,E2
3170:  MOVFF  00,E1
3174:  CALL   0A68
3178:  MOVFF  03,C3
317C:  MOVFF  02,C2
3180:  MOVFF  01,C1
3184:  MOVFF  00,C0
....................                if(b>=0) 
3188:  CLRF   xDC
318A:  CLRF   xDB
318C:  CLRF   xDA
318E:  CLRF   xD9
3190:  MOVFF  C3,E0
3194:  MOVFF  C2,DF
3198:  MOVFF  C1,DE
319C:  MOVFF  C0,DD
31A0:  CALL   0CD2
31A4:  BC    31A8
31A6:  BNZ   31E0
....................                { 
....................                   negativo=10;write_eeprom(60,negativo);delay_ms(20); 
31A8:  MOVLW  0A
31AA:  MOVWF  2A
31AC:  MOVLW  3C
31AE:  MOVWF  FA9
31B0:  MOVFF  2A,FA8
31B4:  BCF    FA6.6
31B6:  BCF    FA6.7
31B8:  BSF    FA6.2
31BA:  MOVF   FF2,W
31BC:  MOVWF  00
31BE:  BCF    FF2.7
31C0:  MOVLB  F
31C2:  MOVLW  55
31C4:  MOVWF  FA7
31C6:  MOVLW  AA
31C8:  MOVWF  FA7
31CA:  BSF    FA6.1
31CC:  BTFSC  FA6.1
31CE:  BRA    31CC
31D0:  BCF    FA6.2
31D2:  MOVF   00,W
31D4:  IORWF  FF2,F
31D6:  MOVLW  14
31D8:  MOVLB  0
31DA:  MOVWF  xEB
31DC:  CALL   06CA
....................                } 
....................                if(b<0) 
31E0:  MOVFF  C3,DC
31E4:  MOVFF  C2,DB
31E8:  MOVFF  C1,DA
31EC:  MOVFF  C0,D9
31F0:  CLRF   xE0
31F2:  CLRF   xDF
31F4:  CLRF   xDE
31F6:  CLRF   xDD
31F8:  CALL   0CD2
31FC:  BNC   3236
....................                { 
....................                   negativo=20;write_eeprom(60,negativo);delay_ms(20); 
31FE:  MOVLW  14
3200:  MOVWF  2A
3202:  MOVLW  3C
3204:  MOVWF  FA9
3206:  MOVFF  2A,FA8
320A:  BCF    FA6.6
320C:  BCF    FA6.7
320E:  BSF    FA6.2
3210:  MOVF   FF2,W
3212:  MOVWF  00
3214:  BCF    FF2.7
3216:  MOVLB  F
3218:  MOVLW  55
321A:  MOVWF  FA7
321C:  MOVLW  AA
321E:  MOVWF  FA7
3220:  BSF    FA6.1
3222:  BTFSC  FA6.1
3224:  BRA    3222
3226:  BCF    FA6.2
3228:  MOVF   00,W
322A:  IORWF  FF2,F
322C:  MOVLW  14
322E:  MOVLB  0
3230:  MOVWF  xEB
3232:  CALL   06CA
....................                } 
....................                b=abs(b); 
3236:  MOVFF  C0,00
323A:  MOVFF  C1,01
323E:  MOVFF  C2,02
3242:  MOVFF  C3,03
3246:  BCF    01.7
3248:  MOVFF  C3,C3
324C:  MOVFF  C2,C2
3250:  MOVFF  01,C1
3254:  MOVFF  C0,C0
....................                bInt=(int8)b; 
3258:  MOVFF  C3,D7
325C:  MOVFF  C2,D6
3260:  MOVFF  C1,D5
3264:  MOVFF  C0,D4
3268:  CALL   123E
326C:  MOVFF  01,32
....................                tmp=b-bInt; 
3270:  CLRF   xDF
3272:  MOVFF  32,DE
3276:  CALL   07AC
327A:  BSF    FD8.1
327C:  MOVFF  C3,E0
3280:  MOVFF  C2,DF
3284:  MOVFF  C1,DE
3288:  MOVFF  C0,DD
328C:  MOVFF  03,E4
3290:  MOVFF  02,E3
3294:  MOVFF  01,E2
3298:  MOVFF  00,E1
329C:  CALL   0A68
32A0:  MOVFF  03,CB
32A4:  MOVFF  02,CA
32A8:  MOVFF  01,C9
32AC:  MOVFF  00,C8
....................                bDec=tmp*100; 
32B0:  MOVFF  CB,E8
32B4:  MOVFF  CA,E7
32B8:  MOVFF  C9,E6
32BC:  MOVFF  C8,E5
32C0:  CLRF   xEC
32C2:  CLRF   xEB
32C4:  MOVLW  48
32C6:  MOVWF  xEA
32C8:  MOVLW  85
32CA:  MOVWF  xE9
32CC:  CALL   0F0C
32D0:  MOVFF  03,D7
32D4:  MOVFF  02,D6
32D8:  MOVFF  01,D5
32DC:  MOVFF  00,D4
32E0:  CALL   123E
32E4:  MOVFF  01,33
....................                write_eeprom(20,bInt); 
32E8:  MOVLW  14
32EA:  MOVWF  FA9
32EC:  MOVFF  32,FA8
32F0:  BCF    FA6.6
32F2:  BCF    FA6.7
32F4:  BSF    FA6.2
32F6:  MOVF   FF2,W
32F8:  MOVWF  00
32FA:  BCF    FF2.7
32FC:  MOVLB  F
32FE:  MOVLW  55
3300:  MOVWF  FA7
3302:  MOVLW  AA
3304:  MOVWF  FA7
3306:  BSF    FA6.1
3308:  BTFSC  FA6.1
330A:  BRA    3308
330C:  BCF    FA6.2
330E:  MOVF   00,W
3310:  IORWF  FF2,F
....................                delay_ms(20); 
3312:  MOVLW  14
3314:  MOVLB  0
3316:  MOVWF  xEB
3318:  CALL   06CA
....................                write_eeprom(21,bDec); 
331C:  MOVLW  15
331E:  MOVWF  FA9
3320:  MOVFF  33,FA8
3324:  BCF    FA6.6
3326:  BCF    FA6.7
3328:  BSF    FA6.2
332A:  MOVF   FF2,W
332C:  MOVWF  00
332E:  BCF    FF2.7
3330:  MOVLB  F
3332:  MOVLW  55
3334:  MOVWF  FA7
3336:  MOVLW  AA
3338:  MOVWF  FA7
333A:  BSF    FA6.1
333C:  BTFSC  FA6.1
333E:  BRA    333C
3340:  BCF    FA6.2
3342:  MOVF   00,W
3344:  IORWF  FF2,F
....................                delay_ms(200); 
3346:  MOVLW  C8
3348:  MOVLB  0
334A:  MOVWF  xEB
334C:  CALL   06CA
....................                printf(lcd_putc,"\f"); 
3350:  MOVLW  0C
3352:  MOVWF  xE5
3354:  CALL   0890
....................                lcd_gotoxy(1,2); 
3358:  MOVLW  01
335A:  MOVWF  xE6
335C:  MOVLW  02
335E:  MOVWF  xE7
3360:  CALL   082E
....................                printf(lcd_putc,"   Calibracion   "); 
3364:  MOVLW  88
3366:  MOVWF  FF6
3368:  MOVLW  03
336A:  MOVWF  FF7
336C:  CALL   08EE
....................                lcd_gotoxy(1,3); 
3370:  MOVLW  01
3372:  MOVWF  xE6
3374:  MOVLW  03
3376:  MOVWF  xE7
3378:  CALL   082E
....................                printf(lcd_putc,"     Exitosa     "); 
337C:  MOVLW  9A
337E:  MOVWF  FF6
3380:  MOVLW  03
3382:  MOVWF  FF7
3384:  CALL   08EE
....................                delay_ms(500); 
3388:  MOVLW  02
338A:  MOVWF  xD4
338C:  MOVLW  FA
338E:  MOVWF  xEB
3390:  CALL   06CA
3394:  DECFSZ xD4,F
3396:  BRA    338C
....................                printf(lcd_putc,"\f");  
3398:  MOVLW  0C
339A:  MOVWF  xE5
339C:  CALL   0890
....................                punto=1; 
33A0:  MOVLW  01
33A2:  MOVWF  29
....................                Menu=100; 
33A4:  MOVLW  64
33A6:  MOVWF  19
....................             } 
....................          } 
....................       } 
....................        
....................       if(LEFT) 
33A8:  BSF    F92.5
33AA:  BTFSC  F80.5
33AC:  BRA    34A6
....................       { 
....................          Menu=1;paso=0;delay_ms(200);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");punto=1; 
33AE:  MOVLW  01
33B0:  MOVWF  19
33B2:  CLRF   38
33B4:  MOVLW  C8
33B6:  MOVWF  xEB
33B8:  CALL   06CA
33BC:  MOVLW  02
33BE:  MOVWF  1D
33C0:  MOVWF  1F
33C2:  MOVLW  0C
33C4:  MOVWF  xE5
33C6:  CALL   0890
33CA:  MOVLW  01
33CC:  MOVWF  29
....................          X0=read_eeprom(30); 
33CE:  MOVFF  FF2,D4
33D2:  BCF    FF2.7
33D4:  MOVLW  1E
33D6:  MOVWF  FA9
33D8:  BCF    FA6.6
33DA:  BCF    FA6.7
33DC:  BSF    FA6.0
33DE:  MOVF   FA8,W
33E0:  BTFSC  xD4.7
33E2:  BSF    FF2.7
33E4:  CLRF   xDF
33E6:  MOVWF  xDE
33E8:  CALL   07AC
33EC:  MOVFF  03,A3
33F0:  MOVFF  02,A2
33F4:  MOVFF  01,A1
33F8:  MOVFF  00,A0
....................          Y0Int=read_eeprom(32);Y0Dec=read_eeprom(33); 
33FC:  MOVFF  FF2,D4
3400:  BCF    FF2.7
3402:  MOVLW  20
3404:  MOVWF  FA9
3406:  BCF    FA6.6
3408:  BCF    FA6.7
340A:  BSF    FA6.0
340C:  MOVF   FA8,W
340E:  BTFSC  xD4.7
3410:  BSF    FF2.7
3412:  MOVWF  34
3414:  MOVFF  FF2,D4
3418:  BCF    FF2.7
341A:  MOVLW  21
341C:  MOVWF  FA9
341E:  BCF    FA6.6
3420:  BCF    FA6.7
3422:  BSF    FA6.0
3424:  MOVF   FA8,W
3426:  BTFSC  xD4.7
3428:  BSF    FF2.7
342A:  MOVWF  35
....................          tmp=Y0Dec/10.0; 
342C:  CLRF   xDF
342E:  MOVFF  35,DE
3432:  CALL   07AC
3436:  MOVFF  03,E0
343A:  MOVFF  02,DF
343E:  MOVFF  01,DE
3442:  MOVFF  00,DD
3446:  CLRF   xE4
3448:  CLRF   xE3
344A:  MOVLW  20
344C:  MOVWF  xE2
344E:  MOVLW  82
3450:  MOVWF  xE1
3452:  CALL   090E
3456:  MOVFF  03,CB
345A:  MOVFF  02,CA
345E:  MOVFF  01,C9
3462:  MOVFF  00,C8
....................          Y0=Y0Int+tmp; 
3466:  CLRF   xDF
3468:  MOVFF  34,DE
346C:  CALL   07AC
3470:  BCF    FD8.1
3472:  MOVFF  03,E0
3476:  MOVFF  02,DF
347A:  MOVFF  01,DE
347E:  MOVFF  00,DD
3482:  MOVFF  CB,E4
3486:  MOVFF  CA,E3
348A:  MOVFF  C9,E2
348E:  MOVFF  C8,E1
3492:  CALL   0A68
3496:  MOVFF  03,A7
349A:  MOVFF  02,A6
349E:  MOVFF  01,A5
34A2:  MOVFF  00,A4
....................       }   
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
34A6:  MOVF   19,W
34A8:  SUBLW  04
34AA:  BTFSS  FD8.2
34AC:  BRA    37A6
....................    lcd_gotoxy(1,1); 
34AE:  MOVLW  01
34B0:  MOVWF  xE6
34B2:  MOVWF  xE7
34B4:  CALL   082E
....................    printf(lcd_putc,"      Ingrese       "); 
34B8:  MOVLW  AC
34BA:  MOVWF  FF6
34BC:  MOVLW  03
34BE:  MOVWF  FF7
34C0:  CALL   08EE
....................    lcd_gotoxy(1,2); 
34C4:  MOVLW  01
34C6:  MOVWF  xE6
34C8:  MOVLW  02
34CA:  MOVWF  xE7
34CC:  CALL   082E
....................    printf(lcd_putc," Contraseña Actual  "); 
34D0:  MOVLW  C2
34D2:  MOVWF  FF6
34D4:  MOVLW  03
34D6:  MOVWF  FF7
34D8:  CALL   08EE
....................    lcd_gotoxy(1,3); 
34DC:  MOVLW  01
34DE:  MOVWF  xE6
34E0:  MOVLW  03
34E2:  MOVWF  xE7
34E4:  CALL   082E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
34E8:  MOVLW  D8
34EA:  MOVWF  FF6
34EC:  MOVLW  03
34EE:  MOVWF  FF7
34F0:  MOVLW  0A
34F2:  MOVWF  xD8
34F4:  CALL   0D48
34F8:  MOVFF  3C,D4
34FC:  MOVLW  1F
34FE:  MOVWF  xD5
3500:  CALL   0D8E
3504:  MOVFF  3D,D4
3508:  MOVLW  1F
350A:  MOVWF  xD5
350C:  CALL   0D8E
3510:  MOVFF  3E,D4
3514:  MOVLW  1F
3516:  MOVWF  xD5
3518:  CALL   0D8E
351C:  MOVFF  3F,D4
3520:  MOVLW  1F
3522:  MOVWF  xD5
3524:  CALL   0D8E
3528:  MOVLW  20
352A:  MOVWF  xE5
352C:  CALL   0890
3530:  MOVLW  20
3532:  MOVWF  xE5
3534:  CALL   0890
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3538:  BSF    F92.2
353A:  BTFSC  F80.2
353C:  BRA    3560
....................       {  if(Flanco == 0)  
353E:  BTFSC  17.3
3540:  BRA    355E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3542:  MOVLW  0B
3544:  SUBWF  1C,W
3546:  CLRF   03
3548:  ADDLW  3C
354A:  MOVWF  FE9
354C:  MOVLW  00
354E:  ADDWFC 03,W
3550:  MOVWF  FEA
3552:  INCF   FEF,F
3554:  BSF    17.3
3556:  MOVLW  1E
3558:  MOVWF  xEB
355A:  CALL   06CA
....................          else 
355E:  BRA    3562
....................             {Flanco = 0;} 
3560:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3562:  BSF    F92.3
3564:  BTFSC  F80.3
3566:  BRA    358A
....................       {  if(Flanco2 == 0)  
3568:  BTFSC  17.5
356A:  BRA    3588
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
356C:  MOVLW  0B
356E:  SUBWF  1C,W
3570:  CLRF   03
3572:  ADDLW  3C
3574:  MOVWF  FE9
3576:  MOVLW  00
3578:  ADDWFC 03,W
357A:  MOVWF  FEA
357C:  DECF   FEF,F
357E:  BSF    17.5
3580:  MOVLW  1E
3582:  MOVWF  xEB
3584:  CALL   06CA
....................          else 
3588:  BRA    358C
....................             {Flanco2 = 0;} 
358A:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
358C:  BSF    F92.4
358E:  BTFSC  F80.4
3590:  BRA    35AC
....................       {  if(Flanco1 == 0)  
3592:  BTFSC  17.4
3594:  BRA    35AA
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3596:  BSF    17.4
3598:  INCF   1C,F
359A:  MOVLW  1E
359C:  MOVWF  xEB
359E:  CALL   06CA
35A2:  MOVLW  0C
35A4:  MOVWF  xE5
35A6:  CALL   0890
....................          else 
35AA:  BRA    35AE
....................             {Flanco1 = 0;}    
35AC:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
35AE:  BSF    F92.5
35B0:  BTFSC  F80.5
35B2:  BRA    35CE
....................       {  if(Flanco3 == 0)  
35B4:  BTFSC  17.6
35B6:  BRA    35CC
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
35B8:  BSF    17.6
35BA:  DECF   1C,F
35BC:  MOVLW  1E
35BE:  MOVWF  xEB
35C0:  CALL   06CA
35C4:  MOVLW  0C
35C6:  MOVWF  xE5
35C8:  CALL   0890
....................          else 
35CC:  BRA    35D0
....................             {Flanco3 = 0;}     
35CE:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
35D0:  MOVLW  0B
35D2:  SUBWF  1C,W
35D4:  CLRF   03
35D6:  ADDLW  3C
35D8:  MOVWF  FE9
35DA:  MOVLW  00
35DC:  ADDWFC 03,W
35DE:  MOVWF  FEA
35E0:  BTFSC  FEF.7
35E2:  BRA    35E6
35E4:  BRA    35FA
....................        {clave[unidad-11]=9;} 
35E6:  MOVLW  0B
35E8:  SUBWF  1C,W
35EA:  CLRF   03
35EC:  ADDLW  3C
35EE:  MOVWF  FE9
35F0:  MOVLW  00
35F2:  ADDWFC 03,W
35F4:  MOVWF  FEA
35F6:  MOVLW  09
35F8:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
35FA:  MOVLW  0B
35FC:  SUBWF  1C,W
35FE:  CLRF   03
3600:  ADDLW  3C
3602:  MOVWF  FE9
3604:  MOVLW  00
3606:  ADDWFC 03,W
3608:  MOVWF  FEA
360A:  BTFSC  FEF.7
360C:  BRA    3626
360E:  MOVF   FEF,W
3610:  SUBLW  09
3612:  BC    3626
....................        {clave[unidad-11]=0;} 
3614:  MOVLW  0B
3616:  SUBWF  1C,W
3618:  CLRF   03
361A:  ADDLW  3C
361C:  MOVWF  FE9
361E:  MOVLW  00
3620:  ADDWFC 03,W
3622:  MOVWF  FEA
3624:  CLRF   FEF
....................        if(unidad<11) 
3626:  MOVF   1C,W
3628:  SUBLW  0A
362A:  BNC   364C
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
362C:  MOVLW  01
362E:  MOVWF  19
3630:  CLRF   38
3632:  MOVLW  02
3634:  MOVWF  1D
3636:  MOVWF  1F
3638:  MOVLW  0B
363A:  MOVWF  1C
363C:  MOVLW  02
363E:  MOVWF  xD4
3640:  MOVLW  FA
3642:  MOVWF  xEB
3644:  CALL   06CA
3648:  DECFSZ xD4,F
364A:  BRA    3640
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
364C:  MOVFF  1C,E6
3650:  MOVLW  04
3652:  MOVWF  xE7
3654:  CALL   082E
....................        lcd_putc(t[2]); 
3658:  MOVFF  3B,E5
365C:  CALL   0890
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3660:  MOVF   1C,W
3662:  SUBLW  0E
3664:  BTFSC  FD8.0
3666:  BRA    3782
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3668:  MOVF   40,W
366A:  SUBWF  3C,W
366C:  BNZ   3708
366E:  MOVF   41,W
3670:  SUBWF  3D,W
3672:  BNZ   3708
3674:  MOVF   42,W
3676:  SUBWF  3E,W
3678:  BNZ   3708
367A:  MOVF   43,W
367C:  SUBWF  3F,W
367E:  BNZ   3708
....................             {lcd_gotoxy(1,1); 
3680:  MOVLW  01
3682:  MOVWF  xE6
3684:  MOVWF  xE7
3686:  CALL   082E
....................             printf(lcd_putc,"                    "); 
368A:  MOVLW  EE
368C:  MOVWF  FF6
368E:  MOVLW  03
3690:  MOVWF  FF7
3692:  CALL   08EE
....................             lcd_gotoxy(1,2); 
3696:  MOVLW  01
3698:  MOVWF  xE6
369A:  MOVLW  02
369C:  MOVWF  xE7
369E:  CALL   082E
....................             printf(lcd_putc,"     Contraseña     "); 
36A2:  MOVLW  04
36A4:  MOVWF  FF6
36A6:  MOVLW  04
36A8:  MOVWF  FF7
36AA:  CALL   08EE
....................             lcd_gotoxy(1,3); 
36AE:  MOVLW  01
36B0:  MOVWF  xE6
36B2:  MOVLW  03
36B4:  MOVWF  xE7
36B6:  CALL   082E
....................             printf(lcd_putc,"      Correcta      "); 
36BA:  MOVLW  1A
36BC:  MOVWF  FF6
36BE:  MOVLW  04
36C0:  MOVWF  FF7
36C2:  CALL   08EE
....................             lcd_gotoxy(1,4); 
36C6:  MOVLW  01
36C8:  MOVWF  xE6
36CA:  MOVLW  04
36CC:  MOVWF  xE7
36CE:  CALL   082E
....................             printf(lcd_putc,"                    "); 
36D2:  MOVLW  30
36D4:  MOVWF  FF6
36D6:  MOVLW  04
36D8:  MOVWF  FF7
36DA:  CALL   08EE
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
36DE:  MOVLW  02
36E0:  MOVWF  xD4
36E2:  MOVLW  FA
36E4:  MOVWF  xEB
36E6:  CALL   06CA
36EA:  DECFSZ xD4,F
36EC:  BRA    36E2
36EE:  MOVLW  3D
36F0:  MOVWF  19
36F2:  MOVLW  0B
36F4:  MOVWF  1C
36F6:  MOVLW  0C
36F8:  MOVWF  xE5
36FA:  CALL   0890
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
36FE:  CLRF   3C
3700:  CLRF   3D
3702:  CLRF   3E
3704:  CLRF   3F
....................          else 
3706:  BRA    3782
....................          {lcd_gotoxy(1,1); 
3708:  MOVLW  01
370A:  MOVWF  xE6
370C:  MOVWF  xE7
370E:  CALL   082E
....................             printf(lcd_putc,"                    "); 
3712:  MOVLW  46
3714:  MOVWF  FF6
3716:  MOVLW  04
3718:  MOVWF  FF7
371A:  CALL   08EE
....................             lcd_gotoxy(1,2); 
371E:  MOVLW  01
3720:  MOVWF  xE6
3722:  MOVLW  02
3724:  MOVWF  xE7
3726:  CALL   082E
....................             printf(lcd_putc,"     Contraseña     "); 
372A:  MOVLW  5C
372C:  MOVWF  FF6
372E:  MOVLW  04
3730:  MOVWF  FF7
3732:  CALL   08EE
....................             lcd_gotoxy(1,3); 
3736:  MOVLW  01
3738:  MOVWF  xE6
373A:  MOVLW  03
373C:  MOVWF  xE7
373E:  CALL   082E
....................             printf(lcd_putc,"     Incorrecta     "); 
3742:  MOVLW  72
3744:  MOVWF  FF6
3746:  MOVLW  04
3748:  MOVWF  FF7
374A:  CALL   08EE
....................             lcd_gotoxy(1,4); 
374E:  MOVLW  01
3750:  MOVWF  xE6
3752:  MOVLW  04
3754:  MOVWF  xE7
3756:  CALL   082E
....................             printf(lcd_putc,"                    "); 
375A:  MOVLW  88
375C:  MOVWF  FF6
375E:  MOVLW  04
3760:  MOVWF  FF7
3762:  CALL   08EE
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3766:  MOVLW  02
3768:  MOVWF  xD4
376A:  MOVLW  FA
376C:  MOVWF  xEB
376E:  CALL   06CA
3772:  DECFSZ xD4,F
3774:  BRA    376A
3776:  MOVLW  0B
3778:  MOVWF  1C
377A:  MOVLW  0C
377C:  MOVWF  xE5
377E:  CALL   0890
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
3782:  MOVF   1C,W
3784:  SUBLW  0B
3786:  BC    37A6
3788:  MOVF   1C,W
378A:  SUBLW  0D
378C:  BNC   37A6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
378E:  MOVLW  01
3790:  SUBWF  1C,W
3792:  MOVWF  xD4
3794:  MOVWF  xE6
3796:  MOVLW  04
3798:  MOVWF  xE7
379A:  CALL   082E
....................             lcd_putc(t[1]); 
379E:  MOVFF  3A,E5
37A2:  CALL   0890
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
37A6:  MOVF   19,W
37A8:  SUBLW  3D
37AA:  BTFSS  FD8.2
37AC:  BRA    3ABC
....................    lcd_gotoxy(1,1); 
37AE:  MOVLW  01
37B0:  MOVWF  xE6
37B2:  MOVWF  xE7
37B4:  CALL   082E
....................    printf(lcd_putc,"     Ingrese        "); 
37B8:  MOVLW  9E
37BA:  MOVWF  FF6
37BC:  MOVLW  04
37BE:  MOVWF  FF7
37C0:  CALL   08EE
....................    lcd_gotoxy(1,2); 
37C4:  MOVLW  01
37C6:  MOVWF  xE6
37C8:  MOVLW  02
37CA:  MOVWF  xE7
37CC:  CALL   082E
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
37D0:  MOVLW  B4
37D2:  MOVWF  FF6
37D4:  MOVLW  04
37D6:  MOVWF  FF7
37D8:  CALL   08EE
....................    lcd_gotoxy(1,3); 
37DC:  MOVLW  01
37DE:  MOVWF  xE6
37E0:  MOVLW  03
37E2:  MOVWF  xE7
37E4:  CALL   082E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
37E8:  MOVLW  CA
37EA:  MOVWF  FF6
37EC:  MOVLW  04
37EE:  MOVWF  FF7
37F0:  MOVLW  0A
37F2:  MOVWF  xD8
37F4:  CALL   0D48
37F8:  MOVFF  3C,D4
37FC:  MOVLW  1F
37FE:  MOVWF  xD5
3800:  CALL   0D8E
3804:  MOVFF  3D,D4
3808:  MOVLW  1F
380A:  MOVWF  xD5
380C:  CALL   0D8E
3810:  MOVFF  3E,D4
3814:  MOVLW  1F
3816:  MOVWF  xD5
3818:  CALL   0D8E
381C:  MOVFF  3F,D4
3820:  MOVLW  1F
3822:  MOVWF  xD5
3824:  CALL   0D8E
3828:  MOVLW  20
382A:  MOVWF  xE5
382C:  CALL   0890
3830:  MOVLW  20
3832:  MOVWF  xE5
3834:  CALL   0890
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3838:  BSF    F92.2
383A:  BTFSC  F80.2
383C:  BRA    3860
....................       {  if(Flanco == 0)  
383E:  BTFSC  17.3
3840:  BRA    385E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3842:  MOVLW  0B
3844:  SUBWF  1C,W
3846:  CLRF   03
3848:  ADDLW  3C
384A:  MOVWF  FE9
384C:  MOVLW  00
384E:  ADDWFC 03,W
3850:  MOVWF  FEA
3852:  INCF   FEF,F
3854:  BSF    17.3
3856:  MOVLW  1E
3858:  MOVWF  xEB
385A:  CALL   06CA
....................          else 
385E:  BRA    3862
....................             {Flanco = 0;} 
3860:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3862:  BSF    F92.3
3864:  BTFSC  F80.3
3866:  BRA    388A
....................       {  if(Flanco2 == 0)  
3868:  BTFSC  17.5
386A:  BRA    3888
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
386C:  MOVLW  0B
386E:  SUBWF  1C,W
3870:  CLRF   03
3872:  ADDLW  3C
3874:  MOVWF  FE9
3876:  MOVLW  00
3878:  ADDWFC 03,W
387A:  MOVWF  FEA
387C:  DECF   FEF,F
387E:  BSF    17.5
3880:  MOVLW  1E
3882:  MOVWF  xEB
3884:  CALL   06CA
....................          else 
3888:  BRA    388C
....................             {Flanco2 = 0;} 
388A:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
388C:  BSF    F92.4
388E:  BTFSC  F80.4
3890:  BRA    38AC
....................       {  if(Flanco1 == 0)  
3892:  BTFSC  17.4
3894:  BRA    38AA
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3896:  BSF    17.4
3898:  INCF   1C,F
389A:  MOVLW  1E
389C:  MOVWF  xEB
389E:  CALL   06CA
38A2:  MOVLW  0C
38A4:  MOVWF  xE5
38A6:  CALL   0890
....................          else 
38AA:  BRA    38AE
....................             {Flanco1 = 0;}    
38AC:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
38AE:  BSF    F92.5
38B0:  BTFSC  F80.5
38B2:  BRA    38CE
....................       {  if(Flanco3 == 0)  
38B4:  BTFSC  17.6
38B6:  BRA    38CC
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
38B8:  BSF    17.6
38BA:  DECF   1C,F
38BC:  MOVLW  1E
38BE:  MOVWF  xEB
38C0:  CALL   06CA
38C4:  MOVLW  0C
38C6:  MOVWF  xE5
38C8:  CALL   0890
....................          else 
38CC:  BRA    38D0
....................             {Flanco3 = 0;}     
38CE:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
38D0:  MOVLW  0B
38D2:  SUBWF  1C,W
38D4:  CLRF   03
38D6:  ADDLW  3C
38D8:  MOVWF  FE9
38DA:  MOVLW  00
38DC:  ADDWFC 03,W
38DE:  MOVWF  FEA
38E0:  BTFSC  FEF.7
38E2:  BRA    38E6
38E4:  BRA    38FA
....................        {clave[unidad-11]=9;} 
38E6:  MOVLW  0B
38E8:  SUBWF  1C,W
38EA:  CLRF   03
38EC:  ADDLW  3C
38EE:  MOVWF  FE9
38F0:  MOVLW  00
38F2:  ADDWFC 03,W
38F4:  MOVWF  FEA
38F6:  MOVLW  09
38F8:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
38FA:  MOVLW  0B
38FC:  SUBWF  1C,W
38FE:  CLRF   03
3900:  ADDLW  3C
3902:  MOVWF  FE9
3904:  MOVLW  00
3906:  ADDWFC 03,W
3908:  MOVWF  FEA
390A:  BTFSC  FEF.7
390C:  BRA    3926
390E:  MOVF   FEF,W
3910:  SUBLW  09
3912:  BC    3926
....................        {clave[unidad-11]=0;} 
3914:  MOVLW  0B
3916:  SUBWF  1C,W
3918:  CLRF   03
391A:  ADDLW  3C
391C:  MOVWF  FE9
391E:  MOVLW  00
3920:  ADDWFC 03,W
3922:  MOVWF  FEA
3924:  CLRF   FEF
....................        if(unidad<11) 
3926:  MOVF   1C,W
3928:  SUBLW  0A
392A:  BNC   3934
....................        {Menu=5;unidad=11;} 
392C:  MOVLW  05
392E:  MOVWF  19
3930:  MOVLW  0B
3932:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3934:  MOVFF  1C,E6
3938:  MOVLW  04
393A:  MOVWF  xE7
393C:  CALL   082E
....................        lcd_putc(t[2]); 
3940:  MOVFF  3B,E5
3944:  CALL   0890
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
3948:  MOVF   1C,W
394A:  SUBLW  0E
394C:  BTFSC  FD8.0
394E:  BRA    3A98
....................        { 
....................             lcd_gotoxy(1,1); 
3950:  MOVLW  01
3952:  MOVWF  xE6
3954:  MOVWF  xE7
3956:  CALL   082E
....................             printf(lcd_putc,"                    "); 
395A:  MOVLW  E0
395C:  MOVWF  FF6
395E:  MOVLW  04
3960:  MOVWF  FF7
3962:  CALL   08EE
....................             lcd_gotoxy(1,2); 
3966:  MOVLW  01
3968:  MOVWF  xE6
396A:  MOVLW  02
396C:  MOVWF  xE7
396E:  CALL   082E
....................             printf(lcd_putc,"     Contraseña     "); 
3972:  MOVLW  F6
3974:  MOVWF  FF6
3976:  MOVLW  04
3978:  MOVWF  FF7
397A:  CALL   08EE
....................             lcd_gotoxy(1,3); 
397E:  MOVLW  01
3980:  MOVWF  xE6
3982:  MOVLW  03
3984:  MOVWF  xE7
3986:  CALL   082E
....................             printf(lcd_putc,"     Almacenada     "); 
398A:  MOVLW  0C
398C:  MOVWF  FF6
398E:  MOVLW  05
3990:  MOVWF  FF7
3992:  CALL   08EE
....................             lcd_gotoxy(1,4); 
3996:  MOVLW  01
3998:  MOVWF  xE6
399A:  MOVLW  04
399C:  MOVWF  xE7
399E:  CALL   082E
....................             printf(lcd_putc,"                    "); 
39A2:  MOVLW  22
39A4:  MOVWF  FF6
39A6:  MOVLW  05
39A8:  MOVWF  FF7
39AA:  CALL   08EE
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
39AE:  CLRF   FA9
39B0:  MOVFF  3C,FA8
39B4:  BCF    FA6.6
39B6:  BCF    FA6.7
39B8:  BSF    FA6.2
39BA:  MOVF   FF2,W
39BC:  MOVWF  00
39BE:  BCF    FF2.7
39C0:  MOVLB  F
39C2:  MOVLW  55
39C4:  MOVWF  FA7
39C6:  MOVLW  AA
39C8:  MOVWF  FA7
39CA:  BSF    FA6.1
39CC:  BTFSC  FA6.1
39CE:  BRA    39CC
39D0:  BCF    FA6.2
39D2:  MOVF   00,W
39D4:  IORWF  FF2,F
39D6:  MOVLW  14
39D8:  MOVLB  0
39DA:  MOVWF  xEB
39DC:  CALL   06CA
39E0:  MOVLW  01
39E2:  MOVWF  FA9
39E4:  MOVFF  3D,FA8
39E8:  BCF    FA6.6
39EA:  BCF    FA6.7
39EC:  BSF    FA6.2
39EE:  MOVF   FF2,W
39F0:  MOVWF  00
39F2:  BCF    FF2.7
39F4:  MOVLB  F
39F6:  MOVLW  55
39F8:  MOVWF  FA7
39FA:  MOVLW  AA
39FC:  MOVWF  FA7
39FE:  BSF    FA6.1
3A00:  BTFSC  FA6.1
3A02:  BRA    3A00
3A04:  BCF    FA6.2
3A06:  MOVF   00,W
3A08:  IORWF  FF2,F
3A0A:  MOVLW  14
3A0C:  MOVLB  0
3A0E:  MOVWF  xEB
3A10:  CALL   06CA
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3A14:  MOVLW  02
3A16:  MOVWF  FA9
3A18:  MOVFF  3E,FA8
3A1C:  BCF    FA6.6
3A1E:  BCF    FA6.7
3A20:  BSF    FA6.2
3A22:  MOVF   FF2,W
3A24:  MOVWF  00
3A26:  BCF    FF2.7
3A28:  MOVLB  F
3A2A:  MOVLW  55
3A2C:  MOVWF  FA7
3A2E:  MOVLW  AA
3A30:  MOVWF  FA7
3A32:  BSF    FA6.1
3A34:  BTFSC  FA6.1
3A36:  BRA    3A34
3A38:  BCF    FA6.2
3A3A:  MOVF   00,W
3A3C:  IORWF  FF2,F
3A3E:  MOVLW  14
3A40:  MOVLB  0
3A42:  MOVWF  xEB
3A44:  CALL   06CA
3A48:  MOVLW  03
3A4A:  MOVWF  FA9
3A4C:  MOVFF  3F,FA8
3A50:  BCF    FA6.6
3A52:  BCF    FA6.7
3A54:  BSF    FA6.2
3A56:  MOVF   FF2,W
3A58:  MOVWF  00
3A5A:  BCF    FF2.7
3A5C:  MOVLB  F
3A5E:  MOVLW  55
3A60:  MOVWF  FA7
3A62:  MOVLW  AA
3A64:  MOVWF  FA7
3A66:  BSF    FA6.1
3A68:  BTFSC  FA6.1
3A6A:  BRA    3A68
3A6C:  BCF    FA6.2
3A6E:  MOVF   00,W
3A70:  IORWF  FF2,F
3A72:  MOVLW  14
3A74:  MOVLB  0
3A76:  MOVWF  xEB
3A78:  CALL   06CA
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3A7C:  MOVLW  02
3A7E:  MOVWF  xD4
3A80:  MOVLW  FA
3A82:  MOVWF  xEB
3A84:  CALL   06CA
3A88:  DECFSZ xD4,F
3A8A:  BRA    3A80
3A8C:  MOVLW  01
3A8E:  MOVWF  19
3A90:  CLRF   38
3A92:  MOVLW  02
3A94:  MOVWF  1D
3A96:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
3A98:  MOVF   1C,W
3A9A:  SUBLW  0B
3A9C:  BC    3ABC
3A9E:  MOVF   1C,W
3AA0:  SUBLW  0D
3AA2:  BNC   3ABC
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3AA4:  MOVLW  01
3AA6:  SUBWF  1C,W
3AA8:  MOVWF  xD4
3AAA:  MOVWF  xE6
3AAC:  MOVLW  04
3AAE:  MOVWF  xE7
3AB0:  CALL   082E
....................             lcd_putc(t[1]); 
3AB4:  MOVFF  3A,E5
3AB8:  CALL   0890
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Media Movil 
3ABC:  MOVF   19,W
3ABE:  SUBLW  05
3AC0:  BTFSS  FD8.2
3AC2:  BRA    3BD6
....................     
....................    lcd_gotoxy(1,1); 
3AC4:  MOVLW  01
3AC6:  MOVWF  xE6
3AC8:  MOVWF  xE7
3ACA:  CALL   082E
....................    printf(lcd_putc,"    Media   Movil    "); 
3ACE:  MOVLW  38
3AD0:  MOVWF  FF6
3AD2:  MOVLW  05
3AD4:  MOVWF  FF7
3AD6:  CALL   08EE
....................    lcd_gotoxy(1,2); 
3ADA:  MOVLW  01
3ADC:  MOVWF  xE6
3ADE:  MOVLW  02
3AE0:  MOVWF  xE7
3AE2:  CALL   082E
....................    printf(lcd_putc,"    Ingrese valor    "); 
3AE6:  MOVLW  4E
3AE8:  MOVWF  FF6
3AEA:  MOVLW  05
3AEC:  MOVWF  FF7
3AEE:  CALL   08EE
....................    lcd_gotoxy(1,3); 
3AF2:  MOVLW  01
3AF4:  MOVWF  xE6
3AF6:  MOVLW  03
3AF8:  MOVWF  xE7
3AFA:  CALL   082E
....................    printf(lcd_putc,"        %02u   ",MediaMovil);  
3AFE:  MOVLW  64
3B00:  MOVWF  FF6
3B02:  MOVLW  05
3B04:  MOVWF  FF7
3B06:  MOVLW  08
3B08:  MOVWF  xD8
3B0A:  CALL   0D48
3B0E:  MOVFF  28,D8
3B12:  MOVLW  01
3B14:  MOVWF  xD9
3B16:  CALL   1276
3B1A:  MOVLW  20
3B1C:  MOVWF  xE5
3B1E:  CALL   0890
3B22:  MOVLW  20
3B24:  MOVWF  xE5
3B26:  CALL   0890
3B2A:  MOVLW  20
3B2C:  MOVWF  xE5
3B2E:  CALL   0890
....................     
....................           
....................    if(MediaMovil>16) 
3B32:  MOVF   28,W
3B34:  SUBLW  10
3B36:  BC    3B3C
....................    { 
....................       MediaMovil=16; 
3B38:  MOVLW  10
3B3A:  MOVWF  28
....................    } 
....................     
....................    if(UP) 
3B3C:  BSF    F92.2
3B3E:  BTFSC  F80.2
3B40:  BRA    3B52
....................    { 
....................       if(MediaMovil<16) 
3B42:  MOVF   28,W
3B44:  SUBLW  0F
3B46:  BNC   3B52
....................       { 
....................          MediaMovil++;delay_ms(50); 
3B48:  INCF   28,F
3B4A:  MOVLW  32
3B4C:  MOVWF  xEB
3B4E:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3B52:  BSF    F92.3
3B54:  BTFSC  F80.3
3B56:  BRA    3B66
....................    { 
....................       if(MediaMovil>0) 
3B58:  MOVF   28,F
3B5A:  BZ    3B66
....................       { 
....................          MediaMovil--;delay_ms(50); 
3B5C:  DECF   28,F
3B5E:  MOVLW  32
3B60:  MOVWF  xEB
3B62:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
3B66:  BSF    F92.4
3B68:  BTFSC  F80.4
3B6A:  BRA    3BAC
....................    { 
....................       write_eeprom(5,MediaMovil); 
3B6C:  MOVLW  05
3B6E:  MOVWF  FA9
3B70:  MOVFF  28,FA8
3B74:  BCF    FA6.6
3B76:  BCF    FA6.7
3B78:  BSF    FA6.2
3B7A:  MOVF   FF2,W
3B7C:  MOVWF  00
3B7E:  BCF    FF2.7
3B80:  MOVLB  F
3B82:  MOVLW  55
3B84:  MOVWF  FA7
3B86:  MOVLW  AA
3B88:  MOVWF  FA7
3B8A:  BSF    FA6.1
3B8C:  BTFSC  FA6.1
3B8E:  BRA    3B8C
3B90:  BCF    FA6.2
3B92:  MOVF   00,W
3B94:  IORWF  FF2,F
....................       delay_ms(100); 
3B96:  MOVLW  64
3B98:  MOVLB  0
3B9A:  MOVWF  xEB
3B9C:  CALL   06CA
....................       printf(lcd_putc,"\f"); 
3BA0:  MOVLW  0C
3BA2:  MOVWF  xE5
3BA4:  CALL   0890
....................       Menu=100; 
3BA8:  MOVLW  64
3BAA:  MOVWF  19
....................    } 
....................     
....................    if(LEFT) 
3BAC:  BSF    F92.5
3BAE:  BTFSC  F80.5
3BB0:  BRA    3BD6
....................    { 
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3BB2:  MOVLW  01
3BB4:  MOVWF  19
3BB6:  CLRF   38
3BB8:  MOVLW  02
3BBA:  MOVWF  xD4
3BBC:  MOVLW  FA
3BBE:  MOVWF  xEB
3BC0:  CALL   06CA
3BC4:  DECFSZ xD4,F
3BC6:  BRA    3BBC
3BC8:  MOVLW  02
3BCA:  MOVWF  1D
3BCC:  MOVWF  1F
3BCE:  MOVLW  0C
3BD0:  MOVWF  xE5
3BD2:  CALL   0890
....................    }   
....................   } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Banda Muerta 
3BD6:  MOVF   19,W
3BD8:  SUBLW  06
3BDA:  BTFSS  FD8.2
3BDC:  BRA    3E94
....................     
....................    lcd_gotoxy(1,1); 
3BDE:  MOVLW  01
3BE0:  MOVWF  xE6
3BE2:  MOVWF  xE7
3BE4:  CALL   082E
....................    printf(lcd_putc,"    Banda Muerta     "); 
3BE8:  MOVLW  74
3BEA:  MOVWF  FF6
3BEC:  MOVLW  05
3BEE:  MOVWF  FF7
3BF0:  CALL   08EE
....................    lcd_gotoxy(1,2); 
3BF4:  MOVLW  01
3BF6:  MOVWF  xE6
3BF8:  MOVLW  02
3BFA:  MOVWF  xE7
3BFC:  CALL   082E
....................    printf(lcd_putc,"    Ingrese valor    "); 
3C00:  MOVLW  8A
3C02:  MOVWF  FF6
3C04:  MOVLW  05
3C06:  MOVWF  FF7
3C08:  CALL   08EE
....................    lcd_gotoxy(1,3); 
3C0C:  MOVLW  01
3C0E:  MOVWF  xE6
3C10:  MOVLW  03
3C12:  MOVWF  xE7
3C14:  CALL   082E
....................    printf(lcd_putc,"      +/-%2.1f   ",Banda);  
3C18:  MOVLW  A0
3C1A:  MOVWF  FF6
3C1C:  MOVLW  05
3C1E:  MOVWF  FF7
3C20:  MOVLW  09
3C22:  MOVWF  xD8
3C24:  CALL   0D48
3C28:  MOVLW  01
3C2A:  MOVWF  FE9
3C2C:  MOVFF  C7,DB
3C30:  MOVFF  C6,DA
3C34:  MOVFF  C5,D9
3C38:  MOVFF  C4,D8
3C3C:  MOVWF  xDC
3C3E:  CALL   10B8
3C42:  MOVLW  20
3C44:  MOVWF  xE5
3C46:  CALL   0890
3C4A:  MOVLW  20
3C4C:  MOVWF  xE5
3C4E:  CALL   0890
3C52:  MOVLW  20
3C54:  MOVWF  xE5
3C56:  CALL   0890
....................     
....................           
....................    if(Banda>10.0) 
3C5A:  CLRF   xDC
3C5C:  CLRF   xDB
3C5E:  MOVLW  20
3C60:  MOVWF  xDA
3C62:  MOVLW  82
3C64:  MOVWF  xD9
3C66:  MOVFF  C7,E0
3C6A:  MOVFF  C6,DF
3C6E:  MOVFF  C5,DE
3C72:  MOVFF  C4,DD
3C76:  CALL   0CD2
3C7A:  BNC   3C88
....................    { 
....................       Banda=10.0; 
3C7C:  CLRF   xC7
3C7E:  CLRF   xC6
3C80:  MOVLW  20
3C82:  MOVWF  xC5
3C84:  MOVLW  82
3C86:  MOVWF  xC4
....................    } 
....................     
....................    if(UP) 
3C88:  BSF    F92.2
3C8A:  BTFSC  F80.2
3C8C:  BRA    3CEE
....................    { 
....................       if(Banda<10.0) 
3C8E:  MOVFF  C7,DC
3C92:  MOVFF  C6,DB
3C96:  MOVFF  C5,DA
3C9A:  MOVFF  C4,D9
3C9E:  CLRF   xE0
3CA0:  CLRF   xDF
3CA2:  MOVLW  20
3CA4:  MOVWF  xDE
3CA6:  MOVLW  82
3CA8:  MOVWF  xDD
3CAA:  CALL   0CD2
3CAE:  BNC   3CEE
....................       { 
....................          Banda+=0.1;delay_ms(50); 
3CB0:  BCF    FD8.1
3CB2:  MOVFF  C7,E0
3CB6:  MOVFF  C6,DF
3CBA:  MOVFF  C5,DE
3CBE:  MOVFF  C4,DD
3CC2:  MOVLW  CD
3CC4:  MOVWF  xE4
3CC6:  MOVLW  CC
3CC8:  MOVWF  xE3
3CCA:  MOVLW  4C
3CCC:  MOVWF  xE2
3CCE:  MOVLW  7B
3CD0:  MOVWF  xE1
3CD2:  CALL   0A68
3CD6:  MOVFF  03,C7
3CDA:  MOVFF  02,C6
3CDE:  MOVFF  01,C5
3CE2:  MOVFF  00,C4
3CE6:  MOVLW  32
3CE8:  MOVWF  xEB
3CEA:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3CEE:  BSF    F92.3
3CF0:  BTFSC  F80.3
3CF2:  BRA    3D58
....................    { 
....................       if(Banda>0.1) 
3CF4:  MOVLW  CD
3CF6:  MOVWF  xDC
3CF8:  MOVLW  CC
3CFA:  MOVWF  xDB
3CFC:  MOVLW  4C
3CFE:  MOVWF  xDA
3D00:  MOVLW  7B
3D02:  MOVWF  xD9
3D04:  MOVFF  C7,E0
3D08:  MOVFF  C6,DF
3D0C:  MOVFF  C5,DE
3D10:  MOVFF  C4,DD
3D14:  CALL   0CD2
3D18:  BNC   3D58
....................       { 
....................          Banda-=0.1;delay_ms(50); 
3D1A:  BSF    FD8.1
3D1C:  MOVFF  C7,E0
3D20:  MOVFF  C6,DF
3D24:  MOVFF  C5,DE
3D28:  MOVFF  C4,DD
3D2C:  MOVLW  CD
3D2E:  MOVWF  xE4
3D30:  MOVLW  CC
3D32:  MOVWF  xE3
3D34:  MOVLW  4C
3D36:  MOVWF  xE2
3D38:  MOVLW  7B
3D3A:  MOVWF  xE1
3D3C:  CALL   0A68
3D40:  MOVFF  03,C7
3D44:  MOVFF  02,C6
3D48:  MOVFF  01,C5
3D4C:  MOVFF  00,C4
3D50:  MOVLW  32
3D52:  MOVWF  xEB
3D54:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
3D58:  BSF    F92.4
3D5A:  BTFSC  F80.4
3D5C:  BRA    3E6A
....................    { 
....................       BandaInt=(int8)Banda; 
3D5E:  MOVFF  C7,D7
3D62:  MOVFF  C6,D6
3D66:  MOVFF  C5,D5
3D6A:  MOVFF  C4,D4
3D6E:  CALL   123E
3D72:  MOVFF  01,2E
....................       tmp=Banda-BandaInt; 
3D76:  CLRF   xDF
3D78:  MOVFF  2E,DE
3D7C:  CALL   07AC
3D80:  BSF    FD8.1
3D82:  MOVFF  C7,E0
3D86:  MOVFF  C6,DF
3D8A:  MOVFF  C5,DE
3D8E:  MOVFF  C4,DD
3D92:  MOVFF  03,E4
3D96:  MOVFF  02,E3
3D9A:  MOVFF  01,E2
3D9E:  MOVFF  00,E1
3DA2:  CALL   0A68
3DA6:  MOVFF  03,CB
3DAA:  MOVFF  02,CA
3DAE:  MOVFF  01,C9
3DB2:  MOVFF  00,C8
....................       BandaDec=tmp*10; 
3DB6:  MOVFF  CB,E8
3DBA:  MOVFF  CA,E7
3DBE:  MOVFF  C9,E6
3DC2:  MOVFF  C8,E5
3DC6:  CLRF   xEC
3DC8:  CLRF   xEB
3DCA:  MOVLW  20
3DCC:  MOVWF  xEA
3DCE:  MOVLW  82
3DD0:  MOVWF  xE9
3DD2:  CALL   0F0C
3DD6:  MOVFF  03,D7
3DDA:  MOVFF  02,D6
3DDE:  MOVFF  01,D5
3DE2:  MOVFF  00,D4
3DE6:  CALL   123E
3DEA:  MOVFF  01,2F
....................       write_eeprom(6,BandaInt); 
3DEE:  MOVLW  06
3DF0:  MOVWF  FA9
3DF2:  MOVFF  2E,FA8
3DF6:  BCF    FA6.6
3DF8:  BCF    FA6.7
3DFA:  BSF    FA6.2
3DFC:  MOVF   FF2,W
3DFE:  MOVWF  00
3E00:  BCF    FF2.7
3E02:  MOVLB  F
3E04:  MOVLW  55
3E06:  MOVWF  FA7
3E08:  MOVLW  AA
3E0A:  MOVWF  FA7
3E0C:  BSF    FA6.1
3E0E:  BTFSC  FA6.1
3E10:  BRA    3E0E
3E12:  BCF    FA6.2
3E14:  MOVF   00,W
3E16:  IORWF  FF2,F
....................       delay_ms(20); 
3E18:  MOVLW  14
3E1A:  MOVLB  0
3E1C:  MOVWF  xEB
3E1E:  CALL   06CA
....................       write_eeprom(7,BandaDec); 
3E22:  MOVLW  07
3E24:  MOVWF  FA9
3E26:  MOVFF  2F,FA8
3E2A:  BCF    FA6.6
3E2C:  BCF    FA6.7
3E2E:  BSF    FA6.2
3E30:  MOVF   FF2,W
3E32:  MOVWF  00
3E34:  BCF    FF2.7
3E36:  MOVLB  F
3E38:  MOVLW  55
3E3A:  MOVWF  FA7
3E3C:  MOVLW  AA
3E3E:  MOVWF  FA7
3E40:  BSF    FA6.1
3E42:  BTFSC  FA6.1
3E44:  BRA    3E42
3E46:  BCF    FA6.2
3E48:  MOVF   00,W
3E4A:  IORWF  FF2,F
....................       delay_ms(500); 
3E4C:  MOVLW  02
3E4E:  MOVLB  0
3E50:  MOVWF  xD4
3E52:  MOVLW  FA
3E54:  MOVWF  xEB
3E56:  CALL   06CA
3E5A:  DECFSZ xD4,F
3E5C:  BRA    3E52
....................       printf(lcd_putc,"\f"); 
3E5E:  MOVLW  0C
3E60:  MOVWF  xE5
3E62:  CALL   0890
....................       Menu=100; 
3E66:  MOVLW  64
3E68:  MOVWF  19
....................    } 
....................     
....................    if(LEFT) 
3E6A:  BSF    F92.5
3E6C:  BTFSC  F80.5
3E6E:  BRA    3E94
....................    { 
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3E70:  MOVLW  01
3E72:  MOVWF  19
3E74:  CLRF   38
3E76:  MOVLW  02
3E78:  MOVWF  xD4
3E7A:  MOVLW  FA
3E7C:  MOVWF  xEB
3E7E:  CALL   06CA
3E82:  DECFSZ xD4,F
3E84:  BRA    3E7A
3E86:  MOVLW  02
3E88:  MOVWF  1D
3E8A:  MOVWF  1F
3E8C:  MOVLW  0C
3E8E:  MOVWF  xE5
3E90:  CALL   0890
....................    }   
....................   } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de Setpoint 
3E94:  MOVF   19,W
3E96:  SUBLW  07
3E98:  BTFSS  FD8.2
3E9A:  BRA    414C
....................     
....................    lcd_gotoxy(1,1); 
3E9C:  MOVLW  01
3E9E:  MOVWF  xE6
3EA0:  MOVWF  xE7
3EA2:  CALL   082E
....................    printf(lcd_putc,"    SetPoint  pH     "); 
3EA6:  MOVLW  B2
3EA8:  MOVWF  FF6
3EAA:  MOVLW  05
3EAC:  MOVWF  FF7
3EAE:  CALL   08EE
....................    lcd_gotoxy(1,2); 
3EB2:  MOVLW  01
3EB4:  MOVWF  xE6
3EB6:  MOVLW  02
3EB8:  MOVWF  xE7
3EBA:  CALL   082E
....................    printf(lcd_putc,"    Ingrese valor    "); 
3EBE:  MOVLW  C8
3EC0:  MOVWF  FF6
3EC2:  MOVLW  05
3EC4:  MOVWF  FF7
3EC6:  CALL   08EE
....................    lcd_gotoxy(1,3); 
3ECA:  MOVLW  01
3ECC:  MOVWF  xE6
3ECE:  MOVLW  03
3ED0:  MOVWF  xE7
3ED2:  CALL   082E
....................    printf(lcd_putc,"      %2.1f  pH ",sPpH);  
3ED6:  MOVLW  DE
3ED8:  MOVWF  FF6
3EDA:  MOVLW  05
3EDC:  MOVWF  FF7
3EDE:  MOVLW  06
3EE0:  MOVWF  xD8
3EE2:  CALL   0D48
3EE6:  MOVLW  01
3EE8:  MOVWF  FE9
3EEA:  MOVFF  BB,DB
3EEE:  MOVFF  BA,DA
3EF2:  MOVFF  B9,D9
3EF6:  MOVFF  B8,D8
3EFA:  MOVWF  xDC
3EFC:  CALL   10B8
3F00:  MOVLW  E9
3F02:  MOVWF  FF6
3F04:  MOVLW  05
3F06:  MOVWF  FF7
3F08:  MOVLW  05
3F0A:  MOVWF  xD8
3F0C:  CALL   0D48
....................     
....................           
....................    if(sPpH>14.0) 
3F10:  CLRF   xDC
3F12:  CLRF   xDB
3F14:  MOVLW  60
3F16:  MOVWF  xDA
3F18:  MOVLW  82
3F1A:  MOVWF  xD9
3F1C:  MOVFF  BB,E0
3F20:  MOVFF  BA,DF
3F24:  MOVFF  B9,DE
3F28:  MOVFF  B8,DD
3F2C:  CALL   0CD2
3F30:  BNC   3F3E
....................    { 
....................       sPpH=14.0; 
3F32:  CLRF   xBB
3F34:  CLRF   xBA
3F36:  MOVLW  60
3F38:  MOVWF  xB9
3F3A:  MOVLW  82
3F3C:  MOVWF  xB8
....................    } 
....................     
....................    if(UP) 
3F3E:  BSF    F92.2
3F40:  BTFSC  F80.2
3F42:  BRA    3FA6
....................    { 
....................       if(sPpH<13.9) 
3F44:  MOVFF  BB,DC
3F48:  MOVFF  BA,DB
3F4C:  MOVFF  B9,DA
3F50:  MOVFF  B8,D9
3F54:  MOVLW  66
3F56:  MOVWF  xE0
3F58:  MOVWF  xDF
3F5A:  MOVLW  5E
3F5C:  MOVWF  xDE
3F5E:  MOVLW  82
3F60:  MOVWF  xDD
3F62:  CALL   0CD2
3F66:  BNC   3FA6
....................       { 
....................          sPpH+=0.1;delay_ms(50); 
3F68:  BCF    FD8.1
3F6A:  MOVFF  BB,E0
3F6E:  MOVFF  BA,DF
3F72:  MOVFF  B9,DE
3F76:  MOVFF  B8,DD
3F7A:  MOVLW  CD
3F7C:  MOVWF  xE4
3F7E:  MOVLW  CC
3F80:  MOVWF  xE3
3F82:  MOVLW  4C
3F84:  MOVWF  xE2
3F86:  MOVLW  7B
3F88:  MOVWF  xE1
3F8A:  CALL   0A68
3F8E:  MOVFF  03,BB
3F92:  MOVFF  02,BA
3F96:  MOVFF  01,B9
3F9A:  MOVFF  00,B8
3F9E:  MOVLW  32
3FA0:  MOVWF  xEB
3FA2:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3FA6:  BSF    F92.3
3FA8:  BTFSC  F80.3
3FAA:  BRA    4010
....................    { 
....................       if(sPpH>0.1) 
3FAC:  MOVLW  CD
3FAE:  MOVWF  xDC
3FB0:  MOVLW  CC
3FB2:  MOVWF  xDB
3FB4:  MOVLW  4C
3FB6:  MOVWF  xDA
3FB8:  MOVLW  7B
3FBA:  MOVWF  xD9
3FBC:  MOVFF  BB,E0
3FC0:  MOVFF  BA,DF
3FC4:  MOVFF  B9,DE
3FC8:  MOVFF  B8,DD
3FCC:  CALL   0CD2
3FD0:  BNC   4010
....................       { 
....................          sPpH-=0.1;delay_ms(50); 
3FD2:  BSF    FD8.1
3FD4:  MOVFF  BB,E0
3FD8:  MOVFF  BA,DF
3FDC:  MOVFF  B9,DE
3FE0:  MOVFF  B8,DD
3FE4:  MOVLW  CD
3FE6:  MOVWF  xE4
3FE8:  MOVLW  CC
3FEA:  MOVWF  xE3
3FEC:  MOVLW  4C
3FEE:  MOVWF  xE2
3FF0:  MOVLW  7B
3FF2:  MOVWF  xE1
3FF4:  CALL   0A68
3FF8:  MOVFF  03,BB
3FFC:  MOVFF  02,BA
4000:  MOVFF  01,B9
4004:  MOVFF  00,B8
4008:  MOVLW  32
400A:  MOVWF  xEB
400C:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
4010:  BSF    F92.4
4012:  BTFSC  F80.4
4014:  BRA    4122
....................    { 
....................       spPhInt=(int8)sPpH; 
4016:  MOVFF  BB,D7
401A:  MOVFF  BA,D6
401E:  MOVFF  B9,D5
4022:  MOVFF  B8,D4
4026:  CALL   123E
402A:  MOVFF  01,30
....................       tmp=spPh-spPhInt; 
402E:  CLRF   xDF
4030:  MOVFF  30,DE
4034:  CALL   07AC
4038:  BSF    FD8.1
403A:  MOVFF  BB,E0
403E:  MOVFF  BA,DF
4042:  MOVFF  B9,DE
4046:  MOVFF  B8,DD
404A:  MOVFF  03,E4
404E:  MOVFF  02,E3
4052:  MOVFF  01,E2
4056:  MOVFF  00,E1
405A:  CALL   0A68
405E:  MOVFF  03,CB
4062:  MOVFF  02,CA
4066:  MOVFF  01,C9
406A:  MOVFF  00,C8
....................       spPhDec=tmp*10; 
406E:  MOVFF  CB,E8
4072:  MOVFF  CA,E7
4076:  MOVFF  C9,E6
407A:  MOVFF  C8,E5
407E:  CLRF   xEC
4080:  CLRF   xEB
4082:  MOVLW  20
4084:  MOVWF  xEA
4086:  MOVLW  82
4088:  MOVWF  xE9
408A:  CALL   0F0C
408E:  MOVFF  03,D7
4092:  MOVFF  02,D6
4096:  MOVFF  01,D5
409A:  MOVFF  00,D4
409E:  CALL   123E
40A2:  MOVFF  01,31
....................       write_eeprom(8,spPhInt); 
40A6:  MOVLW  08
40A8:  MOVWF  FA9
40AA:  MOVFF  30,FA8
40AE:  BCF    FA6.6
40B0:  BCF    FA6.7
40B2:  BSF    FA6.2
40B4:  MOVF   FF2,W
40B6:  MOVWF  00
40B8:  BCF    FF2.7
40BA:  MOVLB  F
40BC:  MOVLW  55
40BE:  MOVWF  FA7
40C0:  MOVLW  AA
40C2:  MOVWF  FA7
40C4:  BSF    FA6.1
40C6:  BTFSC  FA6.1
40C8:  BRA    40C6
40CA:  BCF    FA6.2
40CC:  MOVF   00,W
40CE:  IORWF  FF2,F
....................       delay_ms(20); 
40D0:  MOVLW  14
40D2:  MOVLB  0
40D4:  MOVWF  xEB
40D6:  CALL   06CA
....................       write_eeprom(9,spPhDec); 
40DA:  MOVLW  09
40DC:  MOVWF  FA9
40DE:  MOVFF  31,FA8
40E2:  BCF    FA6.6
40E4:  BCF    FA6.7
40E6:  BSF    FA6.2
40E8:  MOVF   FF2,W
40EA:  MOVWF  00
40EC:  BCF    FF2.7
40EE:  MOVLB  F
40F0:  MOVLW  55
40F2:  MOVWF  FA7
40F4:  MOVLW  AA
40F6:  MOVWF  FA7
40F8:  BSF    FA6.1
40FA:  BTFSC  FA6.1
40FC:  BRA    40FA
40FE:  BCF    FA6.2
4100:  MOVF   00,W
4102:  IORWF  FF2,F
....................       delay_ms(500); 
4104:  MOVLW  02
4106:  MOVLB  0
4108:  MOVWF  xD4
410A:  MOVLW  FA
410C:  MOVWF  xEB
410E:  CALL   06CA
4112:  DECFSZ xD4,F
4114:  BRA    410A
....................       printf(lcd_putc,"\f"); 
4116:  MOVLW  0C
4118:  MOVWF  xE5
411A:  CALL   0890
....................       Menu=100; 
411E:  MOVLW  64
4120:  MOVWF  19
....................    } 
....................     
....................    if(LEFT) 
4122:  BSF    F92.5
4124:  BTFSC  F80.5
4126:  BRA    414C
....................    { 
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4128:  MOVLW  01
412A:  MOVWF  19
412C:  CLRF   38
412E:  MOVLW  02
4130:  MOVWF  xD4
4132:  MOVLW  FA
4134:  MOVWF  xEB
4136:  CALL   06CA
413A:  DECFSZ xD4,F
413C:  BRA    4132
413E:  MOVLW  02
4140:  MOVWF  1D
4142:  MOVWF  1F
4144:  MOVLW  0C
4146:  MOVWF  xE5
4148:  CALL   0890
....................    }   
....................   } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8){ // Menu de Mantenimiento 
414C:  MOVF   19,W
414E:  SUBLW  08
4150:  BTFSS  FD8.2
4152:  BRA    43E2
....................     
....................    lcd_gotoxy(1,1); 
4154:  MOVLW  01
4156:  MOVWF  xE6
4158:  MOVWF  xE7
415A:  CALL   082E
....................    printf(lcd_putc,"MTO.  pH:%2.1f ",pVpH);    
415E:  MOVLW  F0
4160:  MOVWF  FF6
4162:  MOVLW  05
4164:  MOVWF  FF7
4166:  MOVLW  09
4168:  MOVWF  xD8
416A:  CALL   0D48
416E:  MOVLW  01
4170:  MOVWF  FE9
4172:  MOVFF  B7,DB
4176:  MOVFF  B6,DA
417A:  MOVFF  B5,D9
417E:  MOVFF  B4,D8
4182:  MOVWF  xDC
4184:  CALL   10B8
4188:  MOVLW  20
418A:  MOVWF  xE5
418C:  CALL   0890
....................    lcd_gotoxy(1,2); 
4190:  MOVLW  01
4192:  MOVWF  xE6
4194:  MOVLW  02
4196:  MOVWF  xE7
4198:  CALL   082E
....................    printf(lcd_putc,"b:%2.2f X=%2.0f X1=%2.0f" ,b,X0,X1); 
419C:  MOVLW  62
419E:  MOVWF  xE5
41A0:  CALL   0890
41A4:  MOVLW  3A
41A6:  MOVWF  xE5
41A8:  CALL   0890
41AC:  MOVLW  89
41AE:  MOVWF  FE9
41B0:  MOVFF  C3,DB
41B4:  MOVFF  C2,DA
41B8:  MOVFF  C1,D9
41BC:  MOVFF  C0,D8
41C0:  MOVLW  02
41C2:  MOVWF  xDC
41C4:  CALL   10B8
41C8:  MOVLW  20
41CA:  MOVWF  xE5
41CC:  CALL   0890
41D0:  MOVLW  58
41D2:  MOVWF  xE5
41D4:  CALL   0890
41D8:  MOVLW  3D
41DA:  MOVWF  xE5
41DC:  CALL   0890
41E0:  MOVLW  01
41E2:  MOVWF  FE9
41E4:  MOVFF  A3,DB
41E8:  MOVFF  A2,DA
41EC:  MOVFF  A1,D9
41F0:  MOVFF  A0,D8
41F4:  CLRF   xDC
41F6:  CALL   10B8
41FA:  MOVLW  0F
41FC:  MOVWF  FF6
41FE:  MOVLW  06
4200:  MOVWF  FF7
4202:  MOVLW  04
4204:  MOVWF  xD8
4206:  CALL   0D48
420A:  MOVLW  01
420C:  MOVWF  FE9
420E:  MOVFF  AB,DB
4212:  MOVFF  AA,DA
4216:  MOVFF  A9,D9
421A:  MOVFF  A8,D8
421E:  CLRF   xDC
4220:  CALL   10B8
....................    lcd_gotoxy(1,3); 
4224:  MOVLW  01
4226:  MOVWF  xE6
4228:  MOVLW  03
422A:  MOVWF  xE7
422C:  CALL   082E
....................    printf(lcd_putc,"Y0=%2.1f Y1=%2.1f %02u" ,Y0,Y1,negativo); 
4230:  MOVLW  59
4232:  MOVWF  xE5
4234:  CALL   0890
4238:  MOVLW  30
423A:  MOVWF  xE5
423C:  CALL   0890
4240:  MOVLW  3D
4242:  MOVWF  xE5
4244:  CALL   0890
4248:  MOVLW  01
424A:  MOVWF  FE9
424C:  MOVFF  A7,DB
4250:  MOVFF  A6,DA
4254:  MOVFF  A5,D9
4258:  MOVFF  A4,D8
425C:  MOVWF  xDC
425E:  CALL   10B8
4262:  MOVLW  22
4264:  MOVWF  FF6
4266:  MOVLW  06
4268:  MOVWF  FF7
426A:  MOVLW  04
426C:  MOVWF  xD8
426E:  CALL   0D48
4272:  MOVLW  01
4274:  MOVWF  FE9
4276:  MOVFF  AF,DB
427A:  MOVFF  AE,DA
427E:  MOVFF  AD,D9
4282:  MOVFF  AC,D8
4286:  MOVWF  xDC
4288:  CALL   10B8
428C:  MOVLW  20
428E:  MOVWF  xE5
4290:  CALL   0890
4294:  MOVFF  2A,D8
4298:  MOVLW  01
429A:  MOVWF  xD9
429C:  CALL   1276
....................    lcd_gotoxy(1,4); 
42A0:  MOVLW  01
42A2:  MOVWF  xE6
42A4:  MOVLW  04
42A6:  MOVWF  xE7
42A8:  CALL   082E
....................    printf(lcd_putc,"T. Pulso=%02u ADC:%2.0f ",tpulso,sensores(0)); 
42AC:  CLRF   xD9
42AE:  CALL   07E2
42B2:  MOVFF  00,D4
42B6:  MOVFF  01,D5
42BA:  MOVFF  02,D6
42BE:  MOVFF  03,D7
42C2:  MOVLW  32
42C4:  MOVWF  FF6
42C6:  MOVLW  06
42C8:  MOVWF  FF7
42CA:  MOVLW  09
42CC:  MOVWF  xD8
42CE:  CALL   0D48
42D2:  MOVFF  2D,D8
42D6:  MOVLW  01
42D8:  MOVWF  xD9
42DA:  CALL   1276
42DE:  MOVLW  3F
42E0:  MOVWF  FF6
42E2:  MOVLW  06
42E4:  MOVWF  FF7
42E6:  MOVLW  05
42E8:  MOVWF  xD8
42EA:  CALL   0D48
42EE:  MOVLW  01
42F0:  MOVWF  FE9
42F2:  MOVFF  D7,DB
42F6:  MOVFF  D6,DA
42FA:  MOVFF  D5,D9
42FE:  MOVFF  D4,D8
4302:  CLRF   xDC
4304:  CALL   10B8
4308:  MOVLW  20
430A:  MOVWF  xE5
430C:  CALL   0890
....................           
....................    if(tpulso>10.0) 
4310:  CLRF   xDF
4312:  MOVFF  2D,DE
4316:  CALL   07AC
431A:  CLRF   xDC
431C:  CLRF   xDB
431E:  MOVLW  20
4320:  MOVWF  xDA
4322:  MOVLW  82
4324:  MOVWF  xD9
4326:  MOVFF  03,E0
432A:  MOVFF  02,DF
432E:  MOVFF  01,DE
4332:  MOVFF  00,DD
4336:  CALL   0CD2
433A:  BNC   4340
....................    { 
....................       tpulso=10.0; 
433C:  MOVLW  0A
433E:  MOVWF  2D
....................    } 
....................     
....................    if(UP) 
4340:  BSF    F92.2
4342:  BTFSC  F80.2
4344:  BRA    4356
....................    { 
....................       if(tpulso<10) 
4346:  MOVF   2D,W
4348:  SUBLW  09
434A:  BNC   4356
....................       { 
....................          tpulso++;delay_ms(50); 
434C:  INCF   2D,F
434E:  MOVLW  32
4350:  MOVWF  xEB
4352:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(DOWN) 
4356:  BSF    F92.3
4358:  BTFSC  F80.3
435A:  BRA    436A
....................    { 
....................       if(tpulso>0) 
435C:  MOVF   2D,F
435E:  BZ    436A
....................       { 
....................          tpulso--;delay_ms(50); 
4360:  DECF   2D,F
4362:  MOVLW  32
4364:  MOVWF  xEB
4366:  CALL   06CA
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
436A:  BSF    F92.4
436C:  BTFSC  F80.4
436E:  BRA    43B8
....................    {       
....................       write_eeprom(70,tpulso); 
4370:  MOVLW  46
4372:  MOVWF  FA9
4374:  MOVFF  2D,FA8
4378:  BCF    FA6.6
437A:  BCF    FA6.7
437C:  BSF    FA6.2
437E:  MOVF   FF2,W
4380:  MOVWF  00
4382:  BCF    FF2.7
4384:  MOVLB  F
4386:  MOVLW  55
4388:  MOVWF  FA7
438A:  MOVLW  AA
438C:  MOVWF  FA7
438E:  BSF    FA6.1
4390:  BTFSC  FA6.1
4392:  BRA    4390
4394:  BCF    FA6.2
4396:  MOVF   00,W
4398:  IORWF  FF2,F
....................       delay_ms(500); 
439A:  MOVLW  02
439C:  MOVLB  0
439E:  MOVWF  xD4
43A0:  MOVLW  FA
43A2:  MOVWF  xEB
43A4:  CALL   06CA
43A8:  DECFSZ xD4,F
43AA:  BRA    43A0
....................       printf(lcd_putc,"\f"); 
43AC:  MOVLW  0C
43AE:  MOVWF  xE5
43B0:  CALL   0890
....................       Menu=100; 
43B4:  MOVLW  64
43B6:  MOVWF  19
....................    } 
....................     
....................    if(LEFT) 
43B8:  BSF    F92.5
43BA:  BTFSC  F80.5
43BC:  BRA    43E2
....................    { 
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
43BE:  MOVLW  01
43C0:  MOVWF  19
43C2:  CLRF   38
43C4:  MOVLW  02
43C6:  MOVWF  xD4
43C8:  MOVLW  FA
43CA:  MOVWF  xEB
43CC:  CALL   06CA
43D0:  DECFSZ xD4,F
43D2:  BRA    43C8
43D4:  MOVLW  02
43D6:  MOVWF  1D
43D8:  MOVWF  1F
43DA:  MOVLW  0C
43DC:  MOVWF  xE5
43DE:  CALL   0890
....................    }   
....................   } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
43E2:  MOVF   19,W
43E4:  SUBLW  64
43E6:  BTFSS  FD8.2
43E8:  BRA    4674
....................     
....................    if(visualiza==1){ 
43EA:  BTFSS  18.2
43EC:  BRA    45D8
....................       lcd_gotoxy(1,2); 
43EE:  MOVLW  01
43F0:  MOVWF  xE6
43F2:  MOVLW  02
43F4:  MOVWF  xE7
43F6:  CALL   082E
....................       printf(lcd_putc,"pH:%2.1f",pVpH); 
43FA:  MOVLW  70
43FC:  MOVWF  xE5
43FE:  CALL   0890
4402:  MOVLW  48
4404:  MOVWF  xE5
4406:  CALL   0890
440A:  MOVLW  3A
440C:  MOVWF  xE5
440E:  CALL   0890
4412:  MOVLW  01
4414:  MOVWF  FE9
4416:  MOVFF  B7,DB
441A:  MOVFF  B6,DA
441E:  MOVFF  B5,D9
4422:  MOVFF  B4,D8
4426:  MOVWF  xDC
4428:  CALL   10B8
....................        
....................       lcd_gotoxy(1,3); 
442C:  MOVLW  01
442E:  MOVWF  xE6
4430:  MOVLW  03
4432:  MOVWF  xE7
4434:  CALL   082E
....................       printf(lcd_putc,"Time: %03u:%02u (H:M)",horas,minutos); 
4438:  MOVLW  4C
443A:  MOVWF  FF6
443C:  MOVLW  06
443E:  MOVWF  FF7
4440:  MOVLW  06
4442:  MOVWF  xD8
4444:  CALL   0D48
4448:  MOVFF  24,D8
444C:  MOVLW  03
444E:  MOVWF  xD9
4450:  CALL   1276
4454:  MOVLW  3A
4456:  MOVWF  xE5
4458:  CALL   0890
445C:  MOVFF  23,D8
4460:  MOVLW  01
4462:  MOVWF  xD9
4464:  CALL   1276
4468:  MOVLW  5B
446A:  MOVWF  FF6
446C:  MOVLW  06
446E:  MOVWF  FF7
4470:  MOVLW  06
4472:  MOVWF  xD8
4474:  CALL   0D48
....................     
....................       if(estadoba==1){ 
4478:  BTFSS  17.1
447A:  BRA    449C
....................          lcd_gotoxy(1,4); 
447C:  MOVLW  01
447E:  MOVWF  xE6
4480:  MOVLW  04
4482:  MOVWF  xE7
4484:  CALL   082E
....................          printf(lcd_putc,"BOMBA:ON "); 
4488:  MOVLW  62
448A:  MOVWF  FF6
448C:  MOVLW  06
448E:  MOVWF  FF7
4490:  CALL   08EE
....................          Bomba_on; 
4494:  BSF    F8C.1
4496:  BCF    F95.1
....................          Grabar=0; 
4498:  BCF    18.0
....................       }else{ 
449A:  BRA    455A
....................          lcd_gotoxy(1,4); 
449C:  MOVLW  01
449E:  MOVWF  xE6
44A0:  MOVLW  04
44A2:  MOVWF  xE7
44A4:  CALL   082E
....................          printf(lcd_putc,"BOMBA:OFF"); 
44A8:  MOVLW  6C
44AA:  MOVWF  FF6
44AC:  MOVLW  06
44AE:  MOVWF  FF7
44B0:  CALL   08EE
....................          Bomba_off; 
44B4:  BCF    F8C.1
44B6:  BCF    F95.1
....................          if(Grabar==0){ 
44B8:  BTFSC  18.0
44BA:  BRA    455A
....................             write_eeprom(50,segundos);delay_ms(20); 
44BC:  MOVLW  32
44BE:  MOVWF  FA9
44C0:  MOVFF  22,FA8
44C4:  BCF    FA6.6
44C6:  BCF    FA6.7
44C8:  BSF    FA6.2
44CA:  MOVF   FF2,W
44CC:  MOVWF  00
44CE:  BCF    FF2.7
44D0:  MOVLB  F
44D2:  MOVLW  55
44D4:  MOVWF  FA7
44D6:  MOVLW  AA
44D8:  MOVWF  FA7
44DA:  BSF    FA6.1
44DC:  BTFSC  FA6.1
44DE:  BRA    44DC
44E0:  BCF    FA6.2
44E2:  MOVF   00,W
44E4:  IORWF  FF2,F
44E6:  MOVLW  14
44E8:  MOVLB  0
44EA:  MOVWF  xEB
44EC:  CALL   06CA
....................             write_eeprom(51,minutos);delay_ms(20); 
44F0:  MOVLW  33
44F2:  MOVWF  FA9
44F4:  MOVFF  23,FA8
44F8:  BCF    FA6.6
44FA:  BCF    FA6.7
44FC:  BSF    FA6.2
44FE:  MOVF   FF2,W
4500:  MOVWF  00
4502:  BCF    FF2.7
4504:  MOVLB  F
4506:  MOVLW  55
4508:  MOVWF  FA7
450A:  MOVLW  AA
450C:  MOVWF  FA7
450E:  BSF    FA6.1
4510:  BTFSC  FA6.1
4512:  BRA    4510
4514:  BCF    FA6.2
4516:  MOVF   00,W
4518:  IORWF  FF2,F
451A:  MOVLW  14
451C:  MOVLB  0
451E:  MOVWF  xEB
4520:  CALL   06CA
....................             write_eeprom(52,horas);delay_ms(20); 
4524:  MOVLW  34
4526:  MOVWF  FA9
4528:  MOVFF  24,FA8
452C:  BCF    FA6.6
452E:  BCF    FA6.7
4530:  BSF    FA6.2
4532:  MOVF   FF2,W
4534:  MOVWF  00
4536:  BCF    FF2.7
4538:  MOVLB  F
453A:  MOVLW  55
453C:  MOVWF  FA7
453E:  MOVLW  AA
4540:  MOVWF  FA7
4542:  BSF    FA6.1
4544:  BTFSC  FA6.1
4546:  BRA    4544
4548:  BCF    FA6.2
454A:  MOVF   00,W
454C:  IORWF  FF2,F
454E:  MOVLW  14
4550:  MOVLB  0
4552:  MOVWF  xEB
4554:  CALL   06CA
....................             Grabar=1; 
4558:  BSF    18.0
....................          } 
....................       } 
....................     
....................       if(estadobp==1){ 
455A:  BTFSS  17.0
455C:  BRA    457C
....................          lcd_gotoxy(12,4); 
455E:  MOVLW  0C
4560:  MOVWF  xE6
4562:  MOVLW  04
4564:  MOVWF  xE7
4566:  CALL   082E
....................          printf(lcd_putc,"BASE:ON "); 
456A:  MOVLW  76
456C:  MOVWF  FF6
456E:  MOVLW  06
4570:  MOVWF  FF7
4572:  CALL   08EE
....................          Peristaltica_on; 
4576:  BSF    F8B.2
4578:  BCF    F94.2
....................       }else{ 
457A:  BRA    4598
....................          lcd_gotoxy(12,4); 
457C:  MOVLW  0C
457E:  MOVWF  xE6
4580:  MOVLW  04
4582:  MOVWF  xE7
4584:  CALL   082E
....................          printf(lcd_putc,"BASE:OFF"); 
4588:  MOVLW  80
458A:  MOVWF  FF6
458C:  MOVLW  06
458E:  MOVWF  FF7
4590:  CALL   08EE
....................          Peristaltica_off; 
4594:  BCF    F8B.2
4596:  BCF    F94.2
....................       } 
....................     
....................       if(estadoagua==1){ 
4598:  BTFSS  17.2
459A:  BRA    45BA
....................          lcd_gotoxy(12,2); 
459C:  MOVLW  0C
459E:  MOVWF  xE6
45A0:  MOVLW  02
45A2:  MOVWF  xE7
45A4:  CALL   082E
....................          printf(lcd_putc,"AGUA:ON "); 
45A8:  MOVLW  8A
45AA:  MOVWF  FF6
45AC:  MOVLW  06
45AE:  MOVWF  FF7
45B0:  CALL   08EE
....................          Agua_on; 
45B4:  BSF    F8C.2
45B6:  BCF    F95.2
....................       }else{ 
45B8:  BRA    45D6
....................          lcd_gotoxy(12,2); 
45BA:  MOVLW  0C
45BC:  MOVWF  xE6
45BE:  MOVLW  02
45C0:  MOVWF  xE7
45C2:  CALL   082E
....................          printf(lcd_putc,"AGUA:OFF"); 
45C6:  MOVLW  94
45C8:  MOVWF  FF6
45CA:  MOVLW  06
45CC:  MOVWF  FF7
45CE:  CALL   08EE
....................          Agua_off; 
45D2:  BCF    F8C.2
45D4:  BCF    F95.2
....................       } 
....................       visualiza=0; 
45D6:  BCF    18.2
....................    } 
....................     
....................    if(RIGHT){ 
45D8:  BSF    F92.4
45DA:  BTFSC  F80.4
45DC:  BRA    45F0
....................       if(Flanco == 0){ 
45DE:  BTFSC  17.3
45E0:  BRA    45EE
....................          estadoagua=!estadoagua;Flanco = 1;delay_ms(30); 
45E2:  BTG    17.2
45E4:  BSF    17.3
45E6:  MOVLW  1E
45E8:  MOVWF  xEB
45EA:  CALL   06CA
....................       } 
....................    }else{ 
45EE:  BRA    45F2
....................       Flanco = 0; 
45F0:  BCF    17.3
....................    } 
....................     
....................    if(DOWN){ 
45F2:  BSF    F92.3
45F4:  BTFSC  F80.3
45F6:  BRA    460A
....................       if(Flanco1 == 0){ 
45F8:  BTFSC  17.4
45FA:  BRA    4608
....................          estadoba=!estadoba;Flanco1 = 1;delay_ms(30); 
45FC:  BTG    17.1
45FE:  BSF    17.4
4600:  MOVLW  1E
4602:  MOVWF  xEB
4604:  CALL   06CA
....................       } 
....................    }else{ 
4608:  BRA    460C
....................       Flanco1 = 0; 
460A:  BCF    17.4
....................    } 
....................     
....................    // Monitoreo Nivel de Agua//-------------------------------------- 
....................   if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
460C:  BSF    F96.0
460E:  BTFSC  F84.0
4610:  BRA    4630
....................       estadoba=0; 
4612:  BCF    17.1
....................       Bomba_off; 
4614:  BCF    F8C.1
4616:  BCF    F95.1
....................       lcd_gotoxy(1,1); 
4618:  MOVLW  01
461A:  MOVWF  xE6
461C:  MOVWF  xE7
461E:  CALL   082E
....................       printf(lcd_putc,"!NIVEL DE AGUA BAJO!"); 
4622:  MOVLW  9E
4624:  MOVWF  FF6
4626:  MOVLW  06
4628:  MOVWF  FF7
462A:  CALL   08EE
....................    }else{ 
462E:  BRA    4652
....................       lcd_gotoxy(1,1); 
4630:  MOVLW  01
4632:  MOVWF  xE6
4634:  MOVWF  xE7
4636:  CALL   082E
....................       printf(lcd_putc,"JP SCRUBBER         "); 
463A:  MOVLW  B4
463C:  MOVWF  FF6
463E:  MOVLW  06
4640:  MOVWF  FF7
4642:  CALL   08EE
....................       if(HIGH){ 
4646:  BSF    F96.1
4648:  BTFSS  F84.1
464A:  BRA    4652
....................          estadoagua=0; 
464C:  BCF    17.2
....................          Agua_off; 
464E:  BCF    F8C.2
4650:  BCF    F95.2
....................       } 
....................    } 
....................     
....................    if(UP){ 
4652:  BSF    F92.2
4654:  BTFSC  F80.2
4656:  BRA    4674
....................       printf(lcd_putc,"\f");delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2; 
4658:  MOVLW  0C
465A:  MOVWF  xE5
465C:  CALL   0890
4660:  MOVLW  1E
4662:  MOVWF  xEB
4664:  CALL   06CA
4668:  MOVLW  01
466A:  MOVWF  19
466C:  CLRF   38
466E:  MOVLW  02
4670:  MOVWF  1D
4672:  MOVWF  1F
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................  
....................    if(treset>=10) 
4674:  MOVF   2B,W
4676:  SUBLW  09
4678:  BC    4680
....................    { 
....................       lcd_init(); 
467A:  CALL   0756
....................       treset=0; 
467E:  CLRF   2B
....................    } 
....................     
....................    if(tcontrol>10) 
4680:  MOVF   2C,W
4682:  SUBLW  0A
4684:  BC    4688
....................    { 
....................       tcontrol=0; 
4686:  CLRF   2C
....................    } 
....................     
....................    if(Lectura==1) 
4688:  BTFSS  17.7
468A:  BRA    46AE
....................    { 
....................       pVpH=Leer_Sensor_ph(MediaMovil); 
468C:  MOVFF  28,D4
4690:  GOTO   12E2
4694:  MOVFF  03,B7
4698:  MOVFF  02,B6
469C:  MOVFF  01,B5
46A0:  MOVFF  00,B4
....................        
....................       if(Menu>0) 
46A4:  MOVF   19,F
46A6:  BZ    46AC
....................       { 
....................          Controla(); 
46A8:  GOTO   158A
....................       } 
....................       Lectura=0; 
46AC:  BCF    17.7
....................    } 
....................     
....................    } 
46AE:  GOTO   21F6
.................... } 
....................  
46B2:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

CCS PCH C Compiler, Version 4.104, 5967               01-mar.-21 14:19

               Filename: D:\Laboratorio\Scrubber\2021\Bioweb\Firmware\Scrubber.lst

               ROM used: 14354 bytes (44%)
                         Largest free fragment is 18410
               RAM used: 221 (11%) at main() level
                         248 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1B42
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0184
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR,NOBROWNOUT 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOBROWNOUT// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
050C:  CLRF   FEA
050E:  MOVLW  F0
0510:  MOVWF  FE9
0512:  MOVF   FEF,W
0514:  BZ    0532
0516:  MOVLW  0F
0518:  MOVWF  01
051A:  CLRF   00
051C:  DECFSZ 00,F
051E:  BRA    051C
0520:  DECFSZ 01,F
0522:  BRA    051A
0524:  MOVLW  8F
0526:  MOVWF  00
0528:  DECFSZ 00,F
052A:  BRA    0528
052C:  NOP   
052E:  DECFSZ FEF,F
0530:  BRA    0516
0532:  RETLW  00
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
054C:  SWAPF  xF1,W
054E:  ANDLW  F0
0550:  MOVWF  00
0552:  MOVLW  0F
0554:  ANDWF  F81,W
0556:  IORWF  00,W
0558:  MOVWF  F81
....................       delay_cycles(25); 
055A:  MOVLW  08
055C:  MOVWF  00
055E:  DECFSZ 00,F
0560:  BRA    055E
....................       lcd.enable = 1; 
0562:  BSF    F81.3
....................       delay_us(55); 
0564:  MOVLW  DB
0566:  MOVWF  00
0568:  DECFSZ 00,F
056A:  BRA    0568
056C:  BRA    056E
....................       lcd.enable = 0; 
056E:  BCF    F81.3
.................... } 
0570:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0572:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0574:  MOVLW  01
0576:  MOVWF  xF0
0578:  RCALL  050C
....................       lcd.rs = address; 
057A:  BTFSS  xEE.0
057C:  BCF    F81.1
057E:  BTFSC  xEE.0
0580:  BSF    F81.1
....................       delay_cycles(25); 
0582:  MOVLW  08
0584:  MOVWF  00
0586:  DECFSZ 00,F
0588:  BRA    0586
....................       lcd.rw = 0; 
058A:  BCF    F81.2
....................       delay_cycles(25); 
058C:  MOVLW  08
058E:  MOVWF  00
0590:  DECFSZ 00,F
0592:  BRA    0590
....................       lcd.enable = 0; 
0594:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0596:  SWAPF  xEF,W
0598:  MOVWF  xF0
059A:  MOVLW  0F
059C:  ANDWF  xF0,F
059E:  MOVFF  F0,F1
05A2:  RCALL  054C
....................       lcd_send_nibble(n & 0xf); 
05A4:  MOVF   xEF,W
05A6:  ANDLW  0F
05A8:  MOVWF  xF0
05AA:  MOVWF  xF1
05AC:  RCALL  054C
.................... } 
05AE:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
05B0:  MOVLW  00
05B2:  MOVWF  F93
....................     lcd.rs = 0; 
05B4:  BCF    F81.1
....................     lcd.rw = 0; 
05B6:  BCF    F81.2
....................     lcd.enable = 0; 
05B8:  BCF    F81.3
....................     delay_ms(15); 
05BA:  MOVLW  0F
05BC:  MOVWF  xF0
05BE:  RCALL  050C
....................     for(i=1;i<=3;++i) { 
05C0:  MOVLW  01
05C2:  MOVWF  xD9
05C4:  MOVF   xD9,W
05C6:  SUBLW  03
05C8:  BNC   05DA
....................        lcd_send_nibble(3); 
05CA:  MOVLW  03
05CC:  MOVWF  xF1
05CE:  RCALL  054C
....................        delay_ms(5); 
05D0:  MOVLW  05
05D2:  MOVWF  xF0
05D4:  RCALL  050C
....................     } 
05D6:  INCF   xD9,F
05D8:  BRA    05C4
....................     lcd_send_nibble(2); 
05DA:  MOVLW  02
05DC:  MOVWF  xF1
05DE:  RCALL  054C
....................     for(i=0;i<=3;++i) 
05E0:  CLRF   xD9
05E2:  MOVF   xD9,W
05E4:  SUBLW  03
05E6:  BNC   0604
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
05E8:  CLRF   03
05EA:  MOVF   xD9,W
05EC:  MOVFF  FF2,DA
05F0:  BCF    FF2.7
05F2:  RCALL  0096
05F4:  BTFSC  xDA.7
05F6:  BSF    FF2.7
05F8:  MOVWF  xDA
05FA:  CLRF   xEE
05FC:  MOVWF  xEF
05FE:  RCALL  0572
0600:  INCF   xD9,F
0602:  BRA    05E2
.................... } 
0604:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0606:  MOVLW  01
0608:  SUBWF  xEC,W
060A:  ADDLW  FC
060C:  BC    062C
060E:  ADDLW  04
0610:  GOTO   063C
....................      case 1 : address=0x80;break; 
0614:  MOVLW  80
0616:  MOVWF  xED
0618:  BRA    062C
....................      case 2 : address=0xc0;break; 
061A:  MOVLW  C0
061C:  MOVWF  xED
061E:  BRA    062C
....................      case 3 : address=0x94;break; 
0620:  MOVLW  94
0622:  MOVWF  xED
0624:  BRA    062C
....................      case 4 : address=0xd4;break; 
0626:  MOVLW  D4
0628:  MOVWF  xED
062A:  BRA    062C
....................    } 
....................    address+=x-1; 
062C:  MOVLW  01
062E:  SUBWF  xEB,W
0630:  ADDWF  xED,F
....................    lcd_send_byte(0,address); 
0632:  CLRF   xEE
0634:  MOVFF  ED,EF
0638:  RCALL  0572
.................... } 
063A:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0668:  MOVF   xEA,W
066A:  SUBLW  F1
066C:  BNZ   0672
....................    { 
....................       c=238; 
066E:  MOVLW  EE
0670:  MOVWF  xEA
....................    } 
....................    if(c=='Ñ') 
0672:  MOVF   xEA,W
0674:  SUBLW  D1
0676:  BNZ   067C
....................    { 
....................       c=255; 
0678:  MOVLW  FF
067A:  MOVWF  xEA
....................    } 
....................     
....................    switch (c) { 
067C:  MOVF   xEA,W
067E:  XORLW  0C
0680:  BZ    068C
0682:  XORLW  06
0684:  BZ    06A0
0686:  XORLW  02
0688:  BZ    06AE
068A:  BRA    06B8
....................      case '\f'   : lcd_send_byte(0,1); 
068C:  CLRF   xEE
068E:  MOVLW  01
0690:  MOVWF  xEF
0692:  RCALL  0572
....................                    lcdline=1; 
0694:  MOVLW  01
0696:  MOVWF  16
....................                    delay_ms(2); 
0698:  MOVLW  02
069A:  MOVWF  xF0
069C:  RCALL  050C
....................                                            break; 
069E:  BRA    06C4
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
06A0:  INCF   16,F
06A2:  MOVLW  01
06A4:  MOVWF  xEB
06A6:  MOVFF  16,EC
06AA:  RCALL  0606
06AC:  BRA    06C4
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
06AE:  CLRF   xEE
06B0:  MOVLW  10
06B2:  MOVWF  xEF
06B4:  RCALL  0572
06B6:  BRA    06C4
....................      default     : lcd_send_byte(1,c);     break; 
06B8:  MOVLW  01
06BA:  MOVWF  xEE
06BC:  MOVFF  EA,EF
06C0:  RCALL  0572
06C2:  BRA    06C4
....................    } 
.................... } 
06C4:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A2) 
.................... #define   DOWN          !input(PIN_A3) 
.................... #define   RIGHT         !input(PIN_A4) 
.................... #define   LEFT          !input(PIN_A5) 
....................  
.................... #define   HIGH           input(PIN_E1) 
.................... #define   LOW            input(PIN_E0) 
.................... #define   AUX            input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Bomba_on            output_bit(PIN_D1,1) 
.................... #define   Bomba_off           output_bit(PIN_D1,0) 
.................... #define   Agua_on             output_bit(PIN_D2,1) 
.................... #define   Agua_off            output_bit(PIN_D2,0) 
.................... #define   Alarma_on           output_bit(PIN_D3,1) 
.................... #define   Alarma_off          output_bit(PIN_D3,0) 
.................... #define   Desague_on          output_bit(PIN_D4,1) 
.................... #define   Desague_off         output_bit(PIN_D4,0) 
.................... #define   Peristaltica_on     output_bit(PIN_C2,1) 
.................... #define   Peristaltica_off    output_bit(PIN_C2,0) 
....................  
.................... short estadobp=0,estadoba=0,estadoagua=0,Flanco=0,Flanco1=0,Flanco2=0,Lectura=0,Grabar=0,SensadoNivelL=0,visualiza=0,renovar=0,adicionBase=0; 
.................... short estadode=0,activo=0,SensadoNivelH=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horas=0; 
.................... int8 r=0,q=0,MediaMovil=6,punto=1,negativo=10,treset=0,tcontrol=0,tpulso=3,tiempoRenovacion=10,cargaH=0,cargaL=0; 
.................... int8 bInt=0,bDec=0,Y0Int=0,Y0Dec=0,Y1Int=0,Y1Dec=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
....................  
.................... int16 tiempos,TiempoSensadoNivelL=0,TiempoSensadoNivelH=0,cargaInicial=100,tRenovacion=0,tPeristaltica=0,tup=0,tdown=0,tright=0,tleft=0; 
.................... float PromPH[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,PH=0.0,X0=0.0,Y0=0.0,X1=0.0,Y1=0.0,pHpoint=4.0,pVpH=0.0,sPpH=7.0,m=0.0,b=0.0,Banda=0.0,tmp=0.0,sPH=0.0,sPL=0.0; 
.................... #include <Funciones.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
15E4:  RLCF   xDE,W
15E6:  MOVWF  00
15E8:  RLCF   00,F
15EA:  MOVLW  FC
15EC:  ANDWF  00,F
15EE:  MOVFF  00,01
15F2:  MOVF   FC2,W
15F4:  ANDLW  C3
15F6:  IORWF  00,W
15F8:  MOVWF  FC2
15FA:  MOVLW  0A
15FC:  MOVWF  xF0
15FE:  CALL   050C
1602:  BSF    FC2.1
1604:  BTFSC  FC2.1
1606:  BRA    1604
1608:  MOVF   FC4,W
160A:  CLRF   xE4
160C:  MOVWF  xE3
160E:  CALL   06FE
1612:  MOVFF  03,E2
1616:  MOVFF  02,E1
161A:  MOVFF  01,E0
161E:  MOVFF  00,DF
1622:  MOVFF  DF,00
1626:  MOVFF  E0,01
162A:  MOVFF  E1,02
162E:  MOVFF  E2,03
.................... } 
1632:  RETLW  00
....................  
.................... void SalidasOff(void){ 
....................    Bomba_off; 
*
0534:  BCF    F8C.1
0536:  BCF    F95.1
....................    Agua_off; 
0538:  BCF    F8C.2
053A:  BCF    F95.2
....................    Peristaltica_off; 
053C:  BCF    F8B.2
053E:  BCF    F94.2
....................    Desague_off; 
0540:  BCF    F8C.4
0542:  BCF    F95.4
....................    Alarma_off; 
0544:  BCF    F8C.3
0546:  BCF    F95.3
.................... } 
0548:  GOTO   06F2 (RETURN)
....................  
.................... void ConfigInicial(void){ 
....................    delay_ms(1000); 
*
06C6:  MOVLW  04
06C8:  MOVWF  xD9
06CA:  MOVLW  FA
06CC:  MOVWF  xF0
06CE:  RCALL  050C
06D0:  DECFSZ xD9,F
06D2:  BRA    06CA
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
06D4:  MOVLW  85
06D6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
06D8:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
06DA:  MOVF   FC1,W
06DC:  ANDLW  C0
06DE:  IORLW  0D
06E0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
06E2:  BCF    FC0.0
06E4:  BSF    FC0.1
06E6:  BCF    FC0.2
06E8:  BCF    FC0.7
06EA:  BSF    FC2.0
....................    enable_interrupts(global); 
06EC:  MOVLW  C0
06EE:  IORWF  FF2,F
....................    SalidasOff(); 
06F0:  BRA    0534
....................    lcd_init(); 
06F2:  RCALL  05B0
....................    printf(lcd_putc,"\f"); 
06F4:  MOVLW  0C
06F6:  MOVWF  xEA
06F8:  RCALL  0668
.................... } 
06FA:  GOTO   1D18 (RETURN)
....................  
.................... void LeeEEPROM(void){ 
....................    MediaMovil=read_eeprom(5);delay_ms(20); 
*
0734:  MOVFF  FF2,D9
0738:  BCF    FF2.7
073A:  MOVLW  05
073C:  MOVWF  FA9
073E:  BCF    FA6.6
0740:  BCF    FA6.7
0742:  BSF    FA6.0
0744:  MOVF   FA8,W
0746:  BTFSC  xD9.7
0748:  BSF    FF2.7
074A:  MOVWF  26
074C:  MOVLW  14
074E:  MOVWF  xF0
0750:  RCALL  050C
....................    tiempoRenovacion=read_eeprom(6); 
0752:  MOVFF  FF2,D9
0756:  BCF    FF2.7
0758:  MOVLW  06
075A:  MOVWF  FA9
075C:  BCF    FA6.6
075E:  BCF    FA6.7
0760:  BSF    FA6.0
0762:  MOVF   FA8,W
0764:  BTFSC  xD9.7
0766:  BSF    FF2.7
0768:  MOVWF  2C
....................    delay_ms(20); 
076A:  MOVLW  14
076C:  MOVWF  xF0
076E:  RCALL  050C
....................    //BandaDec=read_eeprom(7); 
....................    delay_ms(20); 
0770:  MOVLW  14
0772:  MOVWF  xF0
0774:  RCALL  050C
....................    cargaL=read_eeprom(8); 
0776:  MOVFF  FF2,D9
077A:  BCF    FF2.7
077C:  MOVLW  08
077E:  MOVWF  FA9
0780:  BCF    FA6.6
0782:  BCF    FA6.7
0784:  BSF    FA6.0
0786:  MOVF   FA8,W
0788:  BTFSC  xD9.7
078A:  BSF    FF2.7
078C:  MOVWF  2E
....................    delay_ms(20); 
078E:  MOVLW  14
0790:  MOVWF  xF0
0792:  RCALL  050C
....................    cargaH=read_eeprom(9); 
0794:  MOVFF  FF2,D9
0798:  BCF    FF2.7
079A:  MOVLW  09
079C:  MOVWF  FA9
079E:  BCF    FA6.6
07A0:  BCF    FA6.7
07A2:  BSF    FA6.0
07A4:  MOVF   FA8,W
07A6:  BTFSC  xD9.7
07A8:  BSF    FF2.7
07AA:  MOVWF  2D
....................    delay_ms(20); 
07AC:  MOVLW  14
07AE:  MOVWF  xF0
07B0:  RCALL  050C
....................    cargaInicial=make16(cargaH,cargaL); 
07B2:  MOVFF  2D,40
07B6:  MOVFF  2E,3F
....................    bInt=read_eeprom(20); 
07BA:  MOVFF  FF2,D9
07BE:  BCF    FF2.7
07C0:  MOVLW  14
07C2:  MOVWF  FA9
07C4:  BCF    FA6.6
07C6:  BCF    FA6.7
07C8:  BSF    FA6.0
07CA:  MOVF   FA8,W
07CC:  BTFSC  xD9.7
07CE:  BSF    FF2.7
07D0:  MOVWF  2F
....................    delay_ms(20); 
07D2:  MOVLW  14
07D4:  MOVWF  xF0
07D6:  RCALL  050C
....................    bDec=read_eeprom(21); 
07D8:  MOVFF  FF2,D9
07DC:  BCF    FF2.7
07DE:  MOVLW  15
07E0:  MOVWF  FA9
07E2:  BCF    FA6.6
07E4:  BCF    FA6.7
07E6:  BSF    FA6.0
07E8:  MOVF   FA8,W
07EA:  BTFSC  xD9.7
07EC:  BSF    FF2.7
07EE:  MOVWF  30
....................    delay_ms(20); 
07F0:  MOVLW  14
07F2:  MOVWF  xF0
07F4:  RCALL  050C
....................    X0=read_eeprom(30); 
07F6:  MOVFF  FF2,D9
07FA:  BCF    FF2.7
07FC:  MOVLW  1E
07FE:  MOVWF  FA9
0800:  BCF    FA6.6
0802:  BCF    FA6.7
0804:  BSF    FA6.0
0806:  MOVF   FA8,W
0808:  BTFSC  xD9.7
080A:  BSF    FF2.7
080C:  CLRF   xE4
080E:  MOVWF  xE3
0810:  RCALL  06FE
0812:  MOVFF  03,A8
0816:  MOVFF  02,A7
081A:  MOVFF  01,A6
081E:  MOVFF  00,A5
....................    delay_ms(20); 
0822:  MOVLW  14
0824:  MOVWF  xF0
0826:  RCALL  050C
....................    X1=read_eeprom(31); 
0828:  MOVFF  FF2,D9
082C:  BCF    FF2.7
082E:  MOVLW  1F
0830:  MOVWF  FA9
0832:  BCF    FA6.6
0834:  BCF    FA6.7
0836:  BSF    FA6.0
0838:  MOVF   FA8,W
083A:  BTFSC  xD9.7
083C:  BSF    FF2.7
083E:  CLRF   xE4
0840:  MOVWF  xE3
0842:  RCALL  06FE
0844:  MOVFF  03,B0
0848:  MOVFF  02,AF
084C:  MOVFF  01,AE
0850:  MOVFF  00,AD
....................    delay_ms(20); 
0854:  MOVLW  14
0856:  MOVWF  xF0
0858:  RCALL  050C
....................    Y0Int=read_eeprom(32); 
085A:  MOVFF  FF2,D9
085E:  BCF    FF2.7
0860:  MOVLW  20
0862:  MOVWF  FA9
0864:  BCF    FA6.6
0866:  BCF    FA6.7
0868:  BSF    FA6.0
086A:  MOVF   FA8,W
086C:  BTFSC  xD9.7
086E:  BSF    FF2.7
0870:  MOVWF  31
....................    delay_ms(20); 
0872:  MOVLW  14
0874:  MOVWF  xF0
0876:  RCALL  050C
....................    Y0Dec=read_eeprom(33); 
0878:  MOVFF  FF2,D9
087C:  BCF    FF2.7
087E:  MOVLW  21
0880:  MOVWF  FA9
0882:  BCF    FA6.6
0884:  BCF    FA6.7
0886:  BSF    FA6.0
0888:  MOVF   FA8,W
088A:  BTFSC  xD9.7
088C:  BSF    FF2.7
088E:  MOVWF  32
....................    delay_ms(20); 
0890:  MOVLW  14
0892:  MOVWF  xF0
0894:  RCALL  050C
....................    Y1Int=read_eeprom(34); 
0896:  MOVFF  FF2,D9
089A:  BCF    FF2.7
089C:  MOVLW  22
089E:  MOVWF  FA9
08A0:  BCF    FA6.6
08A2:  BCF    FA6.7
08A4:  BSF    FA6.0
08A6:  MOVF   FA8,W
08A8:  BTFSC  xD9.7
08AA:  BSF    FF2.7
08AC:  MOVWF  33
....................    delay_ms(20); 
08AE:  MOVLW  14
08B0:  MOVWF  xF0
08B2:  RCALL  050C
....................    Y1Dec=read_eeprom(35); 
08B4:  MOVFF  FF2,D9
08B8:  BCF    FF2.7
08BA:  MOVLW  23
08BC:  MOVWF  FA9
08BE:  BCF    FA6.6
08C0:  BCF    FA6.7
08C2:  BSF    FA6.0
08C4:  MOVF   FA8,W
08C6:  BTFSC  xD9.7
08C8:  BSF    FF2.7
08CA:  MOVWF  34
....................    delay_ms(20); 
08CC:  MOVLW  14
08CE:  MOVWF  xF0
08D0:  RCALL  050C
....................    segundos=read_eeprom(50); 
08D2:  MOVFF  FF2,D9
08D6:  BCF    FF2.7
08D8:  MOVLW  32
08DA:  MOVWF  FA9
08DC:  BCF    FA6.6
08DE:  BCF    FA6.7
08E0:  BSF    FA6.0
08E2:  MOVF   FA8,W
08E4:  BTFSC  xD9.7
08E6:  BSF    FF2.7
08E8:  MOVWF  21
....................    delay_ms(20); 
08EA:  MOVLW  14
08EC:  MOVWF  xF0
08EE:  RCALL  050C
....................    minutos=read_eeprom(51); 
08F0:  MOVFF  FF2,D9
08F4:  BCF    FF2.7
08F6:  MOVLW  33
08F8:  MOVWF  FA9
08FA:  BCF    FA6.6
08FC:  BCF    FA6.7
08FE:  BSF    FA6.0
0900:  MOVF   FA8,W
0902:  BTFSC  xD9.7
0904:  BSF    FF2.7
0906:  MOVWF  22
....................    delay_ms(20); 
0908:  MOVLW  14
090A:  MOVWF  xF0
090C:  RCALL  050C
....................    horas=read_eeprom(52); 
090E:  MOVFF  FF2,D9
0912:  BCF    FF2.7
0914:  MOVLW  34
0916:  MOVWF  FA9
0918:  BCF    FA6.6
091A:  BCF    FA6.7
091C:  BSF    FA6.0
091E:  MOVF   FA8,W
0920:  BTFSC  xD9.7
0922:  BSF    FF2.7
0924:  MOVWF  23
....................    delay_ms(20); 
0926:  MOVLW  14
0928:  MOVWF  xF0
092A:  RCALL  050C
....................    negativo=read_eeprom(60); 
092C:  MOVFF  FF2,D9
0930:  BCF    FF2.7
0932:  MOVLW  3C
0934:  MOVWF  FA9
0936:  BCF    FA6.6
0938:  BCF    FA6.7
093A:  BSF    FA6.0
093C:  MOVF   FA8,W
093E:  BTFSC  xD9.7
0940:  BSF    FF2.7
0942:  MOVWF  28
....................    delay_ms(20); 
0944:  MOVLW  14
0946:  MOVWF  xF0
0948:  RCALL  050C
....................    tpulso=read_eeprom(70); 
094A:  MOVFF  FF2,D9
094E:  BCF    FF2.7
0950:  MOVLW  46
0952:  MOVWF  FA9
0954:  BCF    FA6.6
0956:  BCF    FA6.7
0958:  BSF    FA6.0
095A:  MOVF   FA8,W
095C:  BTFSC  xD9.7
095E:  BSF    FF2.7
0960:  MOVWF  2B
....................    delay_ms(20); 
0962:  MOVLW  14
0964:  MOVWF  xF0
0966:  RCALL  050C
.................... } 
0968:  GOTO   1D1C (RETURN)
....................  
.................... void LimitaValores(void){ 
....................    tmp=Y0Dec/10.0; 
*
0DA6:  CLRF   xE4
0DA8:  MOVFF  32,E3
0DAC:  RCALL  06FE
0DAE:  MOVFF  03,E5
0DB2:  MOVFF  02,E4
0DB6:  MOVFF  01,E3
0DBA:  MOVFF  00,E2
0DBE:  CLRF   xE9
0DC0:  CLRF   xE8
0DC2:  MOVLW  20
0DC4:  MOVWF  xE7
0DC6:  MOVLW  82
0DC8:  MOVWF  xE6
0DCA:  RCALL  096C
0DCC:  MOVFF  03,D0
0DD0:  MOVFF  02,CF
0DD4:  MOVFF  01,CE
0DD8:  MOVFF  00,CD
....................    Y0=Y0Int+tmp; 
0DDC:  CLRF   xE4
0DDE:  MOVFF  31,E3
0DE2:  RCALL  06FE
0DE4:  BCF    FD8.1
0DE6:  MOVFF  03,E5
0DEA:  MOVFF  02,E4
0DEE:  MOVFF  01,E3
0DF2:  MOVFF  00,E2
0DF6:  MOVFF  D0,E9
0DFA:  MOVFF  CF,E8
0DFE:  MOVFF  CE,E7
0E02:  MOVFF  CD,E6
0E06:  RCALL  0AC6
0E08:  MOVFF  03,AC
0E0C:  MOVFF  02,AB
0E10:  MOVFF  01,AA
0E14:  MOVFF  00,A9
....................     
....................    tmp=Y1Dec/10.0; 
0E18:  CLRF   xE4
0E1A:  MOVFF  34,E3
0E1E:  RCALL  06FE
0E20:  MOVFF  03,E5
0E24:  MOVFF  02,E4
0E28:  MOVFF  01,E3
0E2C:  MOVFF  00,E2
0E30:  CLRF   xE9
0E32:  CLRF   xE8
0E34:  MOVLW  20
0E36:  MOVWF  xE7
0E38:  MOVLW  82
0E3A:  MOVWF  xE6
0E3C:  RCALL  096C
0E3E:  MOVFF  03,D0
0E42:  MOVFF  02,CF
0E46:  MOVFF  01,CE
0E4A:  MOVFF  00,CD
....................    Y1=Y1Int+tmp; 
0E4E:  CLRF   xE4
0E50:  MOVFF  33,E3
0E54:  RCALL  06FE
0E56:  BCF    FD8.1
0E58:  MOVFF  03,E5
0E5C:  MOVFF  02,E4
0E60:  MOVFF  01,E3
0E64:  MOVFF  00,E2
0E68:  MOVFF  D0,E9
0E6C:  MOVFF  CF,E8
0E70:  MOVFF  CE,E7
0E74:  MOVFF  CD,E6
0E78:  RCALL  0AC6
0E7A:  MOVFF  03,B4
0E7E:  MOVFF  02,B3
0E82:  MOVFF  01,B2
0E86:  MOVFF  00,B1
....................     
....................    tmp=bDec/100.0; 
0E8A:  CLRF   xE4
0E8C:  MOVFF  30,E3
0E90:  RCALL  06FE
0E92:  MOVFF  03,E5
0E96:  MOVFF  02,E4
0E9A:  MOVFF  01,E3
0E9E:  MOVFF  00,E2
0EA2:  CLRF   xE9
0EA4:  CLRF   xE8
0EA6:  MOVLW  48
0EA8:  MOVWF  xE7
0EAA:  MOVLW  85
0EAC:  MOVWF  xE6
0EAE:  RCALL  096C
0EB0:  MOVFF  03,D0
0EB4:  MOVFF  02,CF
0EB8:  MOVFF  01,CE
0EBC:  MOVFF  00,CD
....................    b=bInt+tmp; 
0EC0:  CLRF   xE4
0EC2:  MOVFF  2F,E3
0EC6:  RCALL  06FE
0EC8:  BCF    FD8.1
0ECA:  MOVFF  03,E5
0ECE:  MOVFF  02,E4
0ED2:  MOVFF  01,E3
0ED6:  MOVFF  00,E2
0EDA:  MOVFF  D0,E9
0EDE:  MOVFF  CF,E8
0EE2:  MOVFF  CE,E7
0EE6:  MOVFF  CD,E6
0EEA:  RCALL  0AC6
0EEC:  MOVFF  03,C8
0EF0:  MOVFF  02,C7
0EF4:  MOVFF  01,C6
0EF8:  MOVFF  00,C5
....................     
....................    if(MediaMovil>10){ 
0EFC:  MOVF   26,W
0EFE:  SUBLW  0A
0F00:  BC    0F3A
....................       MediaMovil=10;write_eeprom(5,10);delay_ms(30); 
0F02:  MOVLW  0A
0F04:  MOVWF  26
0F06:  MOVLW  05
0F08:  MOVWF  FA9
0F0A:  MOVLW  0A
0F0C:  MOVWF  FA8
0F0E:  BCF    FA6.6
0F10:  BCF    FA6.7
0F12:  BSF    FA6.2
0F14:  MOVF   FF2,W
0F16:  MOVWF  00
0F18:  BCF    FF2.7
0F1A:  MOVLB  F
0F1C:  MOVLW  55
0F1E:  MOVWF  FA7
0F20:  MOVLW  AA
0F22:  MOVWF  FA7
0F24:  BSF    FA6.1
0F26:  BTFSC  FA6.1
0F28:  BRA    0F26
0F2A:  BCF    FA6.2
0F2C:  MOVF   00,W
0F2E:  IORWF  FF2,F
0F30:  MOVLW  1E
0F32:  MOVLB  0
0F34:  MOVWF  xF0
0F36:  CALL   050C
....................    } 
....................    if(tiempoRenovacion>100){ 
0F3A:  MOVF   2C,W
0F3C:  SUBLW  64
0F3E:  BC    0F78
....................       tiempoRenovacion=100;write_eeprom(6,100);delay_ms(30); 
0F40:  MOVLW  64
0F42:  MOVWF  2C
0F44:  MOVLW  06
0F46:  MOVWF  FA9
0F48:  MOVLW  64
0F4A:  MOVWF  FA8
0F4C:  BCF    FA6.6
0F4E:  BCF    FA6.7
0F50:  BSF    FA6.2
0F52:  MOVF   FF2,W
0F54:  MOVWF  00
0F56:  BCF    FF2.7
0F58:  MOVLB  F
0F5A:  MOVLW  55
0F5C:  MOVWF  FA7
0F5E:  MOVLW  AA
0F60:  MOVWF  FA7
0F62:  BSF    FA6.1
0F64:  BTFSC  FA6.1
0F66:  BRA    0F64
0F68:  BCF    FA6.2
0F6A:  MOVF   00,W
0F6C:  IORWF  FF2,F
0F6E:  MOVLW  1E
0F70:  MOVLB  0
0F72:  MOVWF  xF0
0F74:  CALL   050C
....................    } 
....................    if(cargaInicial>5000){ 
0F78:  MOVF   40,W
0F7A:  SUBLW  12
0F7C:  BC    0FF8
0F7E:  XORLW  FF
0F80:  BNZ   0F88
0F82:  MOVF   3F,W
0F84:  SUBLW  88
0F86:  BC    0FF8
....................       cargaInicial=500;write_eeprom(8,0xf4);delay_ms(30);write_eeprom(9,0x01);delay_ms(30); 
0F88:  MOVLW  01
0F8A:  MOVWF  40
0F8C:  MOVLW  F4
0F8E:  MOVWF  3F
0F90:  MOVLW  08
0F92:  MOVWF  FA9
0F94:  MOVLW  F4
0F96:  MOVWF  FA8
0F98:  BCF    FA6.6
0F9A:  BCF    FA6.7
0F9C:  BSF    FA6.2
0F9E:  MOVF   FF2,W
0FA0:  MOVWF  00
0FA2:  BCF    FF2.7
0FA4:  MOVLB  F
0FA6:  MOVLW  55
0FA8:  MOVWF  FA7
0FAA:  MOVLW  AA
0FAC:  MOVWF  FA7
0FAE:  BSF    FA6.1
0FB0:  BTFSC  FA6.1
0FB2:  BRA    0FB0
0FB4:  BCF    FA6.2
0FB6:  MOVF   00,W
0FB8:  IORWF  FF2,F
0FBA:  MOVLW  1E
0FBC:  MOVLB  0
0FBE:  MOVWF  xF0
0FC0:  CALL   050C
0FC4:  MOVLW  09
0FC6:  MOVWF  FA9
0FC8:  MOVLW  01
0FCA:  MOVWF  FA8
0FCC:  BCF    FA6.6
0FCE:  BCF    FA6.7
0FD0:  BSF    FA6.2
0FD2:  MOVF   FF2,W
0FD4:  MOVWF  00
0FD6:  BCF    FF2.7
0FD8:  MOVLB  F
0FDA:  MOVLW  55
0FDC:  MOVWF  FA7
0FDE:  MOVLW  AA
0FE0:  MOVWF  FA7
0FE2:  BSF    FA6.1
0FE4:  BTFSC  FA6.1
0FE6:  BRA    0FE4
0FE8:  BCF    FA6.2
0FEA:  MOVF   00,W
0FEC:  IORWF  FF2,F
0FEE:  MOVLW  1E
0FF0:  MOVLB  0
0FF2:  MOVWF  xF0
0FF4:  CALL   050C
....................    } 
....................    if(horas>150) 
0FF8:  MOVF   23,W
0FFA:  SUBLW  96
0FFC:  BC    1000
....................       horas=0; 
0FFE:  CLRF   23
....................    if(minutos>59) 
1000:  MOVF   22,W
1002:  SUBLW  3B
1004:  BC    1008
....................       minutos=0; 
1006:  CLRF   22
....................    if(segundos>59) 
1008:  MOVF   21,W
100A:  SUBLW  3B
100C:  BC    1010
....................       segundos=0; 
100E:  CLRF   21
....................    if(b>10.0){ 
1010:  CLRF   xE5
1012:  CLRF   xE4
1014:  MOVLW  20
1016:  MOVWF  xE3
1018:  MOVLW  82
101A:  MOVWF  xE2
101C:  MOVFF  C8,E9
1020:  MOVFF  C7,E8
1024:  MOVFF  C6,E7
1028:  MOVFF  C5,E6
102C:  RCALL  0D30
102E:  BNC   1040
....................       b=0.32; 
1030:  MOVLW  0A
1032:  MOVWF  xC8
1034:  MOVLW  D7
1036:  MOVWF  xC7
1038:  MOVLW  23
103A:  MOVWF  xC6
103C:  MOVLW  7D
103E:  MOVWF  xC5
....................    } 
....................    if(X0>250){ 
1040:  CLRF   xE5
1042:  CLRF   xE4
1044:  MOVLW  7A
1046:  MOVWF  xE3
1048:  MOVLW  86
104A:  MOVWF  xE2
104C:  MOVFF  A8,E9
1050:  MOVFF  A7,E8
1054:  MOVFF  A6,E7
1058:  MOVFF  A5,E6
105C:  RCALL  0D30
105E:  BNC   106C
....................       X0=60; 
1060:  CLRF   xA8
1062:  CLRF   xA7
1064:  MOVLW  70
1066:  MOVWF  xA6
1068:  MOVLW  84
106A:  MOVWF  xA5
....................    } 
....................    if(X1>250){ 
106C:  CLRF   xE5
106E:  CLRF   xE4
1070:  MOVLW  7A
1072:  MOVWF  xE3
1074:  MOVLW  86
1076:  MOVWF  xE2
1078:  MOVFF  B0,E9
107C:  MOVFF  AF,E8
1080:  MOVFF  AE,E7
1084:  MOVFF  AD,E6
1088:  RCALL  0D30
108A:  BNC   1098
....................       X1=103; 
108C:  CLRF   xB0
108E:  CLRF   xAF
1090:  MOVLW  4E
1092:  MOVWF  xAE
1094:  MOVLW  85
1096:  MOVWF  xAD
....................    } 
....................    if(Y0>10.0){ 
1098:  CLRF   xE5
109A:  CLRF   xE4
109C:  MOVLW  20
109E:  MOVWF  xE3
10A0:  MOVLW  82
10A2:  MOVWF  xE2
10A4:  MOVFF  AC,E9
10A8:  MOVFF  AB,E8
10AC:  MOVFF  AA,E7
10B0:  MOVFF  A9,E6
10B4:  RCALL  0D30
10B6:  BNC   10C2
....................       Y0=4.0; 
10B8:  CLRF   xAC
10BA:  CLRF   xAB
10BC:  CLRF   xAA
10BE:  MOVLW  81
10C0:  MOVWF  xA9
....................    } 
....................    if(Y1>14.0){ 
10C2:  CLRF   xE5
10C4:  CLRF   xE4
10C6:  MOVLW  60
10C8:  MOVWF  xE3
10CA:  MOVLW  82
10CC:  MOVWF  xE2
10CE:  MOVFF  B4,E9
10D2:  MOVFF  B3,E8
10D6:  MOVFF  B2,E7
10DA:  MOVFF  B1,E6
10DE:  RCALL  0D30
10E0:  BNC   10EE
....................       Y1=7.0; 
10E2:  CLRF   xB4
10E4:  CLRF   xB3
10E6:  MOVLW  60
10E8:  MOVWF  xB2
10EA:  MOVLW  81
10EC:  MOVWF  xB1
....................    } 
....................    if(negativo>20){ 
10EE:  MOVF   28,W
10F0:  SUBLW  14
10F2:  BC    10F8
....................       negativo=20; 
10F4:  MOVLW  14
10F6:  MOVWF  28
....................    } 
....................    //b=0.32 
....................    //x=60 
....................    //x1=103 
....................    //Y0=4.0 
....................    //Y1=7.0 
....................    //negativo=20; 
.................... } 
10F8:  GOTO   1D20 (RETURN)
....................  
.................... void EnciendeBomba(void){ 
....................    if(!input_state(PIN_D1)){ 
*
1762:  BTFSC  F83.1
1764:  BRA    177A
....................       delay_ms(100); 
1766:  MOVLW  64
1768:  MOVWF  xF0
176A:  CALL   050C
....................       lcd_init(); 
176E:  CALL   05B0
....................       delay_ms(100); 
1772:  MOVLW  64
1774:  MOVWF  xF0
1776:  CALL   050C
....................    } 
....................    Bomba_on; 
177A:  BSF    F8C.1
177C:  BCF    F95.1
....................    estadoba=1; 
177E:  BSF    17.1
....................    Grabar=0; 
1780:  BCF    17.7
.................... } 
1782:  RETLW  00
....................  
.................... void ApagaBomba(void){ 
....................    if(input_state(PIN_D1)){ 
1784:  BTFSS  F83.1
1786:  BRA    179C
....................       delay_ms(100); 
1788:  MOVLW  64
178A:  MOVWF  xF0
178C:  CALL   050C
....................       lcd_init(); 
1790:  CALL   05B0
....................       delay_ms(100); 
1794:  MOVLW  64
1796:  MOVWF  xF0
1798:  CALL   050C
....................    } 
....................    Bomba_off; 
179C:  BCF    F8C.1
179E:  BCF    F95.1
....................    estadoba=0; 
17A0:  BCF    17.1
....................    if(Grabar==0){ 
17A2:  BTFSC  17.7
17A4:  BRA    1844
....................       write_eeprom(50,segundos);delay_ms(20); 
17A6:  MOVLW  32
17A8:  MOVWF  FA9
17AA:  MOVFF  21,FA8
17AE:  BCF    FA6.6
17B0:  BCF    FA6.7
17B2:  BSF    FA6.2
17B4:  MOVF   FF2,W
17B6:  MOVWF  00
17B8:  BCF    FF2.7
17BA:  MOVLB  F
17BC:  MOVLW  55
17BE:  MOVWF  FA7
17C0:  MOVLW  AA
17C2:  MOVWF  FA7
17C4:  BSF    FA6.1
17C6:  BTFSC  FA6.1
17C8:  BRA    17C6
17CA:  BCF    FA6.2
17CC:  MOVF   00,W
17CE:  IORWF  FF2,F
17D0:  MOVLW  14
17D2:  MOVLB  0
17D4:  MOVWF  xF0
17D6:  CALL   050C
....................       write_eeprom(51,minutos);delay_ms(20); 
17DA:  MOVLW  33
17DC:  MOVWF  FA9
17DE:  MOVFF  22,FA8
17E2:  BCF    FA6.6
17E4:  BCF    FA6.7
17E6:  BSF    FA6.2
17E8:  MOVF   FF2,W
17EA:  MOVWF  00
17EC:  BCF    FF2.7
17EE:  MOVLB  F
17F0:  MOVLW  55
17F2:  MOVWF  FA7
17F4:  MOVLW  AA
17F6:  MOVWF  FA7
17F8:  BSF    FA6.1
17FA:  BTFSC  FA6.1
17FC:  BRA    17FA
17FE:  BCF    FA6.2
1800:  MOVF   00,W
1802:  IORWF  FF2,F
1804:  MOVLW  14
1806:  MOVLB  0
1808:  MOVWF  xF0
180A:  CALL   050C
....................       write_eeprom(52,horas);delay_ms(20); 
180E:  MOVLW  34
1810:  MOVWF  FA9
1812:  MOVFF  23,FA8
1816:  BCF    FA6.6
1818:  BCF    FA6.7
181A:  BSF    FA6.2
181C:  MOVF   FF2,W
181E:  MOVWF  00
1820:  BCF    FF2.7
1822:  MOVLB  F
1824:  MOVLW  55
1826:  MOVWF  FA7
1828:  MOVLW  AA
182A:  MOVWF  FA7
182C:  BSF    FA6.1
182E:  BTFSC  FA6.1
1830:  BRA    182E
1832:  BCF    FA6.2
1834:  MOVF   00,W
1836:  IORWF  FF2,F
1838:  MOVLW  14
183A:  MOVLB  0
183C:  MOVWF  xF0
183E:  CALL   050C
....................       Grabar=1; 
1842:  BSF    17.7
....................    } 
.................... } 
1844:  RETLW  00
....................  
.................... void MensajeGuardado(void){ 
....................    printf(lcd_putc,"\f"); 
*
1634:  MOVLW  0C
1636:  MOVWF  xEA
1638:  CALL   0668
....................    lcd_gotoxy(1,2); 
163C:  MOVLW  01
163E:  MOVWF  xEB
1640:  MOVLW  02
1642:  MOVWF  xEC
1644:  CALL   0606
....................    printf(lcd_putc," !Valor Almacenado  "); 
1648:  MOVLW  B4
164A:  MOVWF  FF6
164C:  MOVLW  00
164E:  MOVWF  FF7
1650:  RCALL  10FC
....................    lcd_gotoxy(1,4); 
1652:  MOVLW  01
1654:  MOVWF  xEB
1656:  MOVLW  04
1658:  MOVWF  xEC
165A:  CALL   0606
....................    printf(lcd_putc,"                    "); 
165E:  MOVLW  CA
1660:  MOVWF  FF6
1662:  MOVLW  00
1664:  MOVWF  FF7
1666:  RCALL  10FC
....................    lcd_gotoxy(1,3); 
1668:  MOVLW  01
166A:  MOVWF  xEB
166C:  MOVLW  03
166E:  MOVWF  xEC
1670:  CALL   0606
....................    printf(lcd_putc,"    Correctamente!  "); 
1674:  MOVLW  E0
1676:  MOVWF  FF6
1678:  MOVLW  00
167A:  MOVWF  FF7
167C:  RCALL  10FC
....................    lcd_gotoxy(1,1); 
167E:  MOVLW  01
1680:  MOVWF  xEB
1682:  MOVWF  xEC
1684:  CALL   0606
....................    printf(lcd_putc,"                    "); 
1688:  MOVLW  F6
168A:  MOVWF  FF6
168C:  MOVLW  00
168E:  MOVWF  FF7
1690:  RCALL  10FC
....................    delay_ms(2000); 
1692:  MOVLW  08
1694:  MOVWF  xD9
1696:  MOVLW  FA
1698:  MOVWF  xF0
169A:  CALL   050C
169E:  DECFSZ xD9,F
16A0:  BRA    1696
....................    printf(lcd_putc,"\f"); 
16A2:  MOVLW  0C
16A4:  MOVWF  xEA
16A6:  CALL   0668
.................... } 
16AA:  RETLW  00
....................  
.................... void Refresco(void){ 
....................    delay_ms(100); 
....................    lcd_init(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... float Leer_Sensor_pH(int8 media){ 
*
1846:  CLRF   xDD
1848:  CLRF   xDC
184A:  CLRF   xDB
184C:  CLRF   xDA
....................    float promediopH=0.0; 
....................    V1 = sensores(0);   //Lectura de ADC de 10 bit 
184E:  CLRF   xDE
1850:  RCALL  15E4
1852:  MOVFF  03,A0
1856:  MOVFF  02,9F
185A:  MOVFF  01,9E
185E:  MOVFF  00,9D
....................    if(X1-X0>0){ 
1862:  BSF    FD8.1
1864:  MOVFF  B0,E5
1868:  MOVFF  AF,E4
186C:  MOVFF  AE,E3
1870:  MOVFF  AD,E2
1874:  MOVFF  A8,E9
1878:  MOVFF  A7,E8
187C:  MOVFF  A6,E7
1880:  MOVFF  A5,E6
1884:  CALL   0AC6
1888:  MOVFF  00,DE
188C:  MOVFF  01,DF
1890:  MOVFF  02,E0
1894:  MOVFF  03,E1
1898:  CLRF   xE5
189A:  CLRF   xE4
189C:  CLRF   xE3
189E:  CLRF   xE2
18A0:  MOVFF  03,E9
18A4:  MOVFF  02,E8
18A8:  MOVFF  01,E7
18AC:  MOVFF  00,E6
18B0:  CALL   0D30
18B4:  BNC   1946
....................       m=(Y1-Y0)/(X1-X0); //Y1=pH ingresado, Y0=pH ingresado, X0=ADC de Y0, X1=ADC de Y1 
18B6:  BSF    FD8.1
18B8:  MOVFF  B4,E5
18BC:  MOVFF  B3,E4
18C0:  MOVFF  B2,E3
18C4:  MOVFF  B1,E2
18C8:  MOVFF  AC,E9
18CC:  MOVFF  AB,E8
18D0:  MOVFF  AA,E7
18D4:  MOVFF  A9,E6
18D8:  CALL   0AC6
18DC:  MOVFF  00,DE
18E0:  MOVFF  01,DF
18E4:  MOVFF  02,E0
18E8:  MOVFF  03,E1
18EC:  BSF    FD8.1
18EE:  MOVFF  B0,E5
18F2:  MOVFF  AF,E4
18F6:  MOVFF  AE,E3
18FA:  MOVFF  AD,E2
18FE:  MOVFF  A8,E9
1902:  MOVFF  A7,E8
1906:  MOVFF  A6,E7
190A:  MOVFF  A5,E6
190E:  CALL   0AC6
1912:  MOVFF  E1,E5
1916:  MOVFF  E0,E4
191A:  MOVFF  DF,E3
191E:  MOVFF  DE,E2
1922:  MOVFF  03,E9
1926:  MOVFF  02,E8
192A:  MOVFF  01,E7
192E:  MOVFF  00,E6
1932:  CALL   096C
1936:  MOVFF  03,C4
193A:  MOVFF  02,C3
193E:  MOVFF  01,C2
1942:  MOVFF  00,C1
....................    } 
....................    if(negativo==10) 
1946:  MOVF   28,W
1948:  SUBLW  0A
194A:  BNZ   19B4
....................    { 
....................       PH=(m*V1)+b;// PH=mx+b 
194C:  MOVFF  C4,ED
1950:  MOVFF  C3,EC
1954:  MOVFF  C2,EB
1958:  MOVFF  C1,EA
195C:  MOVFF  A0,F1
1960:  MOVFF  9F,F0
1964:  MOVFF  9E,EF
1968:  MOVFF  9D,EE
196C:  RCALL  11E6
196E:  MOVFF  00,DE
1972:  MOVFF  01,DF
1976:  MOVFF  02,E0
197A:  MOVFF  03,E1
197E:  BCF    FD8.1
1980:  MOVFF  03,E5
1984:  MOVFF  02,E4
1988:  MOVFF  01,E3
198C:  MOVFF  00,E2
1990:  MOVFF  C8,E9
1994:  MOVFF  C7,E8
1998:  MOVFF  C6,E7
199C:  MOVFF  C5,E6
19A0:  CALL   0AC6
19A4:  MOVFF  03,A4
19A8:  MOVFF  02,A3
19AC:  MOVFF  01,A2
19B0:  MOVFF  00,A1
....................    } 
....................    if(negativo==20) 
19B4:  MOVF   28,W
19B6:  SUBLW  14
19B8:  BNZ   1A22
....................    { 
....................       PH=(m*V1)-b;// PH=mx+b 
19BA:  MOVFF  C4,ED
19BE:  MOVFF  C3,EC
19C2:  MOVFF  C2,EB
19C6:  MOVFF  C1,EA
19CA:  MOVFF  A0,F1
19CE:  MOVFF  9F,F0
19D2:  MOVFF  9E,EF
19D6:  MOVFF  9D,EE
19DA:  RCALL  11E6
19DC:  MOVFF  00,DE
19E0:  MOVFF  01,DF
19E4:  MOVFF  02,E0
19E8:  MOVFF  03,E1
19EC:  BSF    FD8.1
19EE:  MOVFF  03,E5
19F2:  MOVFF  02,E4
19F6:  MOVFF  01,E3
19FA:  MOVFF  00,E2
19FE:  MOVFF  C8,E9
1A02:  MOVFF  C7,E8
1A06:  MOVFF  C6,E7
1A0A:  MOVFF  C5,E6
1A0E:  CALL   0AC6
1A12:  MOVFF  03,A4
1A16:  MOVFF  02,A3
1A1A:  MOVFF  01,A2
1A1E:  MOVFF  00,A1
....................    }   
....................     
....................    if(PH<0.0) 
1A22:  MOVFF  A4,E5
1A26:  MOVFF  A3,E4
1A2A:  MOVFF  A2,E3
1A2E:  MOVFF  A1,E2
1A32:  CLRF   xE9
1A34:  CLRF   xE8
1A36:  CLRF   xE7
1A38:  CLRF   xE6
1A3A:  CALL   0D30
1A3E:  BNC   1A48
....................    { 
....................       PH=0.0; 
1A40:  CLRF   xA4
1A42:  CLRF   xA3
1A44:  CLRF   xA2
1A46:  CLRF   xA1
....................    } 
....................  
....................    if(r>media-1) 
1A48:  MOVLW  01
1A4A:  SUBWF  xD9,W
1A4C:  SUBWF  24,W
1A4E:  BZ    1A54
1A50:  BNC   1A54
....................    {r=0;} 
1A52:  CLRF   24
....................    PromPH[r]=PH;r++; 
1A54:  MOVF   24,W
1A56:  MULLW  04
1A58:  MOVF   FF3,W
1A5A:  CLRF   03
1A5C:  ADDLW  4D
1A5E:  MOVWF  FE9
1A60:  MOVLW  00
1A62:  ADDWFC 03,W
1A64:  MOVWF  FEA
1A66:  MOVFF  A1,FEF
1A6A:  MOVFF  A2,FEC
1A6E:  MOVFF  A3,FEC
1A72:  MOVFF  A4,FEC
1A76:  INCF   24,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1A78:  CLRF   25
1A7A:  MOVLW  01
1A7C:  SUBWF  xD9,W
1A7E:  SUBWF  25,W
1A80:  BZ    1A84
1A82:  BC    1AF0
....................    { 
....................       promediopH+=PromPH[q]; 
1A84:  MOVF   25,W
1A86:  MULLW  04
1A88:  MOVF   FF3,W
1A8A:  CLRF   03
1A8C:  ADDLW  4D
1A8E:  MOVWF  FE9
1A90:  MOVLW  00
1A92:  ADDWFC 03,W
1A94:  MOVWF  FEA
1A96:  MOVFF  FEF,00
1A9A:  MOVFF  FEC,01
1A9E:  MOVFF  FEC,02
1AA2:  MOVFF  FEC,03
1AA6:  MOVFF  FEA,DF
1AAA:  MOVFF  FE9,DE
1AAE:  BCF    FD8.1
1AB0:  MOVFF  DD,E5
1AB4:  MOVFF  DC,E4
1AB8:  MOVFF  DB,E3
1ABC:  MOVFF  DA,E2
1AC0:  MOVFF  03,E9
1AC4:  MOVFF  02,E8
1AC8:  MOVFF  01,E7
1ACC:  MOVFF  00,E6
1AD0:  CALL   0AC6
1AD4:  MOVFF  DF,FEA
1AD8:  MOVFF  DE,FE9
1ADC:  MOVFF  03,DD
1AE0:  MOVFF  02,DC
1AE4:  MOVFF  01,DB
1AE8:  MOVFF  00,DA
....................    }  
1AEC:  INCF   25,F
1AEE:  BRA    1A7A
....................    promediopH=promediopH/media;    
1AF0:  CLRF   xE4
1AF2:  MOVFF  D9,E3
1AF6:  CALL   06FE
1AFA:  MOVFF  DD,E5
1AFE:  MOVFF  DC,E4
1B02:  MOVFF  DB,E3
1B06:  MOVFF  DA,E2
1B0A:  MOVFF  03,E9
1B0E:  MOVFF  02,E8
1B12:  MOVFF  01,E7
1B16:  MOVFF  00,E6
1B1A:  CALL   096C
1B1E:  MOVFF  03,DD
1B22:  MOVFF  02,DC
1B26:  MOVFF  01,DB
1B2A:  MOVFF  00,DA
....................     
....................    return promediopH; 
1B2E:  MOVFF  DA,00
1B32:  MOVFF  DB,01
1B36:  MOVFF  DC,02
1B3A:  MOVFF  DD,03
.................... } 
1B3E:  GOTO   37FE (RETURN)
....................  
.................... void Controla(void){ 
....................    sPH=sPpH+Banda; 
....................    sPL=sPpH-Banda; 
....................    if(pVpH>sPL && pVpH<sPH) 
....................    { 
....................       Peristaltica_off; 
....................       estadobp=0; 
....................    } 
....................    else 
....................    { 
....................       if(pVpH<sPL) 
....................       { 
....................          if(tcontrol<tpulso) 
....................          { 
....................             Peristaltica_on; 
....................             estadobp=1; 
....................          } 
....................          else 
....................          { 
....................             Peristaltica_off; 
....................             estadobp=0; 
....................          } 
....................       } 
....................       else 
....................       { 
....................          Peristaltica_off; 
....................          estadobp=0; 
....................       } 
....................    } 
.................... } 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
111E:  DECFSZ xDA,W
1120:  BRA    1138
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. un Punto      ");} 
1122:  MOVLW  02
1124:  MOVWF  xEB
1126:  MOVFF  DB,EC
112A:  CALL   0606
112E:  MOVLW  0C
1130:  MOVWF  FF6
1132:  MOVLW  01
1134:  MOVWF  FF7
1136:  RCALL  10FC
....................    if(x==2) 
1138:  MOVF   xDA,W
113A:  SUBLW  02
113C:  BNZ   1154
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. dos Puntos    ");} 
113E:  MOVLW  02
1140:  MOVWF  xEB
1142:  MOVFF  DB,EC
1146:  CALL   0606
114A:  MOVLW  20
114C:  MOVWF  FF6
114E:  MOVLW  01
1150:  MOVWF  FF7
1152:  RCALL  10FC
....................    if(x==3) 
1154:  MOVF   xDA,W
1156:  SUBLW  03
1158:  BNZ   1170
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
115A:  MOVLW  02
115C:  MOVWF  xEB
115E:  MOVFF  DB,EC
1162:  CALL   0606
1166:  MOVLW  34
1168:  MOVWF  FF6
116A:  MOVLW  01
116C:  MOVWF  FF7
116E:  RCALL  10FC
....................    if(x==4) 
1170:  MOVF   xDA,W
1172:  SUBLW  04
1174:  BNZ   118C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Renovación  ");} 
1176:  MOVLW  02
1178:  MOVWF  xEB
117A:  MOVFF  DB,EC
117E:  CALL   0606
1182:  MOVLW  48
1184:  MOVWF  FF6
1186:  MOVLW  01
1188:  MOVWF  FF7
118A:  RCALL  10FC
....................    if(x==5) 
118C:  MOVF   xDA,W
118E:  SUBLW  05
1190:  BNZ   11A8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Carga Inicial      ");} 
1192:  MOVLW  02
1194:  MOVWF  xEB
1196:  MOVFF  DB,EC
119A:  CALL   0606
119E:  MOVLW  5C
11A0:  MOVWF  FF6
11A2:  MOVLW  01
11A4:  MOVWF  FF7
11A6:  RCALL  10FC
....................    if(x==6) 
11A8:  MOVF   xDA,W
11AA:  SUBLW  06
11AC:  BNZ   11C4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
11AE:  MOVLW  02
11B0:  MOVWF  xEB
11B2:  MOVFF  DB,EC
11B6:  CALL   0606
11BA:  MOVLW  70
11BC:  MOVWF  FF6
11BE:  MOVLW  01
11C0:  MOVWF  FF7
11C2:  RCALL  10FC
.................... } 
11C4:  RETLW  00
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
0184:  MOVLW  15
0186:  MOVWF  FCF
0188:  MOVLW  A0
018A:  MOVWF  FCE
....................    tiempos++; 
018C:  INCF   39,F
018E:  BTFSC  FD8.2
0190:  INCF   3A,F
....................     
....................       if(UP) 
0192:  BSF    F92.2
0194:  BTFSC  F80.2
0196:  BRA    01A0
....................          tup++; 
0198:  INCF   45,F
019A:  BTFSC  FD8.2
019C:  INCF   46,F
....................       else 
019E:  BRA    01A4
....................          tup=0; 
01A0:  CLRF   46
01A2:  CLRF   45
....................           
....................       if(DOWN) 
01A4:  BSF    F92.3
01A6:  BTFSC  F80.3
01A8:  BRA    01B2
....................          tdown++; 
01AA:  INCF   47,F
01AC:  BTFSC  FD8.2
01AE:  INCF   48,F
....................       else 
01B0:  BRA    01B6
....................          tdown=0; 
01B2:  CLRF   48
01B4:  CLRF   47
....................           
....................       if(RIGHT) 
01B6:  BSF    F92.4
01B8:  BTFSC  F80.4
01BA:  BRA    01C4
....................          tright++; 
01BC:  INCF   49,F
01BE:  BTFSC  FD8.2
01C0:  INCF   4A,F
....................       else 
01C2:  BRA    01C8
....................          tright=0; 
01C4:  CLRF   4A
01C6:  CLRF   49
....................        
....................       if(LEFT) 
01C8:  BSF    F92.5
01CA:  BTFSC  F80.5
01CC:  BRA    01D6
....................          tleft++; 
01CE:  INCF   4B,F
01D0:  BTFSC  FD8.2
01D2:  INCF   4C,F
....................       else 
01D4:  BRA    01DA
....................          tleft=0; 
01D6:  CLRF   4C
01D8:  CLRF   4B
....................           
....................    if(tiempos>=200){   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
01DA:  MOVF   3A,F
01DC:  BNZ   01E4
01DE:  MOVF   39,W
01E0:  SUBLW  C7
01E2:  BC    0232
....................       tiempos=0;Lectura=1;treset++;tcontrol++;visualiza=1; 
01E4:  CLRF   3A
01E6:  CLRF   39
01E8:  BSF    17.6
01EA:  INCF   29,F
01EC:  INCF   2A,F
01EE:  BSF    18.1
....................       if(SensadoNivelL){ 
01F0:  BTFSS  18.0
01F2:  BRA    01FA
....................          TiempoSensadoNivelL++; 
01F4:  INCF   3B,F
01F6:  BTFSC  FD8.2
01F8:  INCF   3C,F
....................       } 
....................       if(SensadoNivelH){ 
01FA:  BTFSS  18.6
01FC:  BRA    0204
....................          TiempoSensadoNivelH++; 
01FE:  INCF   3D,F
0200:  BTFSC  FD8.2
0202:  INCF   3E,F
....................       } 
....................       if(renovar) 
0204:  BTFSS  18.2
0206:  BRA    020E
....................          tRenovacion++; 
0208:  INCF   41,F
020A:  BTFSC  FD8.2
020C:  INCF   42,F
....................       if(adicionBase) 
020E:  BTFSS  18.3
0210:  BRA    0218
....................          tPeristaltica++; 
0212:  INCF   43,F
0214:  BTFSC  FD8.2
0216:  INCF   44,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadoba==1){ 
0218:  BTFSS  17.1
021A:  BRA    0232
....................          segundos++; 
021C:  INCF   21,F
....................          if(segundos==60){ 
021E:  MOVF   21,W
0220:  SUBLW  3C
0222:  BNZ   0228
....................             segundos=0;minutos++; 
0224:  CLRF   21
0226:  INCF   22,F
....................          } 
....................          if(minutos==60){ 
0228:  MOVF   22,W
022A:  SUBLW  3C
022C:  BNZ   0232
....................             minutos=0;horas++; 
022E:  CLRF   22
0230:  INCF   23,F
....................          } 
....................       }      
....................    } 
.................... } 
....................  
0232:  BCF    F9E.0
0234:  GOTO   0054
.................... void main () 
.................... { 
*
1B42:  CLRF   FF8
1B44:  BCF    FD0.7
1B46:  BSF    07.7
1B48:  CLRF   FEA
1B4A:  CLRF   FE9
1B4C:  BCF    17.0
1B4E:  BCF    17.1
1B50:  BCF    17.2
1B52:  BCF    17.3
1B54:  BCF    17.4
1B56:  BCF    17.5
1B58:  BCF    17.6
1B5A:  BCF    17.7
1B5C:  BCF    18.0
1B5E:  BCF    18.1
1B60:  BCF    18.2
1B62:  BCF    18.3
1B64:  BCF    18.4
1B66:  BCF    18.5
1B68:  BCF    18.6
1B6A:  CLRF   19
1B6C:  MOVLW  07
1B6E:  MOVWF  1A
1B70:  MOVLW  02
1B72:  MOVWF  1B
1B74:  MOVWF  1C
1B76:  MOVLW  03
1B78:  MOVWF  1D
1B7A:  MOVLW  02
1B7C:  MOVWF  1E
1B7E:  MOVWF  1F
1B80:  MOVLW  04
1B82:  MOVWF  20
1B84:  CLRF   21
1B86:  CLRF   22
1B88:  CLRF   23
1B8A:  CLRF   24
1B8C:  CLRF   25
1B8E:  MOVLW  06
1B90:  MOVWF  26
1B92:  MOVLW  01
1B94:  MOVWF  27
1B96:  MOVLW  0A
1B98:  MOVWF  28
1B9A:  CLRF   29
1B9C:  CLRF   2A
1B9E:  MOVLW  03
1BA0:  MOVWF  2B
1BA2:  MOVLW  0A
1BA4:  MOVWF  2C
1BA6:  CLRF   2D
1BA8:  CLRF   2E
1BAA:  CLRF   2F
1BAC:  CLRF   30
1BAE:  CLRF   31
1BB0:  CLRF   32
1BB2:  CLRF   33
1BB4:  CLRF   34
1BB6:  CLRF   35
1BB8:  CLRF   3C
1BBA:  CLRF   3B
1BBC:  CLRF   3E
1BBE:  CLRF   3D
1BC0:  CLRF   40
1BC2:  MOVLW  64
1BC4:  MOVWF  3F
1BC6:  CLRF   42
1BC8:  CLRF   41
1BCA:  CLRF   44
1BCC:  CLRF   43
1BCE:  CLRF   46
1BD0:  CLRF   45
1BD2:  CLRF   48
1BD4:  CLRF   47
1BD6:  CLRF   4A
1BD8:  CLRF   49
1BDA:  CLRF   4C
1BDC:  CLRF   4B
1BDE:  CLRF   xA0
1BE0:  CLRF   x9F
1BE2:  CLRF   x9E
1BE4:  CLRF   x9D
1BE6:  CLRF   xA4
1BE8:  CLRF   xA3
1BEA:  CLRF   xA2
1BEC:  CLRF   xA1
1BEE:  CLRF   xA8
1BF0:  CLRF   xA7
1BF2:  CLRF   xA6
1BF4:  CLRF   xA5
1BF6:  CLRF   xAC
1BF8:  CLRF   xAB
1BFA:  CLRF   xAA
1BFC:  CLRF   xA9
1BFE:  CLRF   xB0
1C00:  CLRF   xAF
1C02:  CLRF   xAE
1C04:  CLRF   xAD
1C06:  CLRF   xB4
1C08:  CLRF   xB3
1C0A:  CLRF   xB2
1C0C:  CLRF   xB1
1C0E:  CLRF   xB8
1C10:  CLRF   xB7
1C12:  CLRF   xB6
1C14:  MOVLW  81
1C16:  MOVWF  xB5
1C18:  CLRF   xBC
1C1A:  CLRF   xBB
1C1C:  CLRF   xBA
1C1E:  CLRF   xB9
1C20:  CLRF   xC0
1C22:  CLRF   xBF
1C24:  MOVLW  60
1C26:  MOVWF  xBE
1C28:  MOVLW  81
1C2A:  MOVWF  xBD
1C2C:  CLRF   xC4
1C2E:  CLRF   xC3
1C30:  CLRF   xC2
1C32:  CLRF   xC1
1C34:  CLRF   xC8
1C36:  CLRF   xC7
1C38:  CLRF   xC6
1C3A:  CLRF   xC5
1C3C:  CLRF   xCC
1C3E:  CLRF   xCB
1C40:  CLRF   xCA
1C42:  CLRF   xC9
1C44:  CLRF   xD0
1C46:  CLRF   xCF
1C48:  CLRF   xCE
1C4A:  CLRF   xCD
1C4C:  CLRF   xD4
1C4E:  CLRF   xD3
1C50:  CLRF   xD2
1C52:  CLRF   xD1
1C54:  CLRF   xD8
1C56:  CLRF   xD7
1C58:  CLRF   xD6
1C5A:  CLRF   xD5
1C5C:  MOVF   FC1,W
1C5E:  ANDLW  C0
1C60:  IORLW  0F
1C62:  MOVWF  FC1
1C64:  MOVLW  07
1C66:  MOVWF  FB4
1C68:  MOVLW  3E
1C6A:  MOVWF  36
1C6C:  MOVLW  20
1C6E:  MOVWF  37
1C70:  MOVLW  5E
1C72:  MOVWF  38
1C74:  CLRF   4D
1C76:  CLRF   4E
1C78:  CLRF   4F
1C7A:  CLRF   50
1C7C:  CLRF   51
1C7E:  CLRF   52
1C80:  CLRF   53
1C82:  CLRF   54
1C84:  CLRF   55
1C86:  CLRF   56
1C88:  CLRF   57
1C8A:  CLRF   58
1C8C:  CLRF   59
1C8E:  CLRF   5A
1C90:  CLRF   5B
1C92:  CLRF   5C
1C94:  CLRF   5D
1C96:  CLRF   5E
1C98:  CLRF   5F
1C9A:  CLRF   x60
1C9C:  CLRF   x61
1C9E:  CLRF   x62
1CA0:  CLRF   x63
1CA2:  CLRF   x64
1CA4:  CLRF   x65
1CA6:  CLRF   x66
1CA8:  CLRF   x67
1CAA:  CLRF   x68
1CAC:  CLRF   x69
1CAE:  CLRF   x6A
1CB0:  CLRF   x6B
1CB2:  CLRF   x6C
1CB4:  CLRF   x6D
1CB6:  CLRF   x6E
1CB8:  CLRF   x6F
1CBA:  CLRF   x70
1CBC:  CLRF   x71
1CBE:  CLRF   x72
1CC0:  CLRF   x73
1CC2:  CLRF   x74
1CC4:  CLRF   x75
1CC6:  CLRF   x76
1CC8:  CLRF   x77
1CCA:  CLRF   x78
1CCC:  CLRF   x79
1CCE:  CLRF   x7A
1CD0:  CLRF   x7B
1CD2:  CLRF   x7C
1CD4:  CLRF   x7D
1CD6:  CLRF   x7E
1CD8:  CLRF   x7F
1CDA:  CLRF   x80
1CDC:  CLRF   x81
1CDE:  CLRF   x82
1CE0:  CLRF   x83
1CE2:  CLRF   x84
1CE4:  CLRF   x85
1CE6:  CLRF   x86
1CE8:  CLRF   x87
1CEA:  CLRF   x88
1CEC:  CLRF   x89
1CEE:  CLRF   x8A
1CF0:  CLRF   x8B
1CF2:  CLRF   x8C
1CF4:  CLRF   x8D
1CF6:  CLRF   x8E
1CF8:  CLRF   x8F
1CFA:  CLRF   x90
1CFC:  CLRF   x91
1CFE:  CLRF   x92
1D00:  CLRF   x93
1D02:  CLRF   x94
1D04:  CLRF   x95
1D06:  CLRF   x96
1D08:  CLRF   x97
1D0A:  CLRF   x98
1D0C:  CLRF   x99
1D0E:  CLRF   x9A
1D10:  CLRF   x9B
1D12:  CLRF   x9C
....................    ConfigInicial(); 
1D14:  GOTO   06C6
....................    LeeEEPROM(); 
1D18:  GOTO   0734
....................    LimitaValores(); 
1D1C:  GOTO   0DA6
....................    lcd_gotoxy(1,1); 
1D20:  MOVLW  01
1D22:  MOVWF  xEB
1D24:  MOVWF  xEC
1D26:  CALL   0606
....................    printf(lcd_putc,"     SCRUBBER       "); 
1D2A:  MOVLW  38
1D2C:  MOVWF  FF6
1D2E:  MOVLW  02
1D30:  MOVWF  FF7
1D32:  CALL   10FC
....................    lcd_gotoxy(1,2); 
1D36:  MOVLW  01
1D38:  MOVWF  xEB
1D3A:  MOVLW  02
1D3C:  MOVWF  xEC
1D3E:  CALL   0606
....................    printf(lcd_putc,"      HUMEDO        "); 
1D42:  MOVLW  4E
1D44:  MOVWF  FF6
1D46:  MOVLW  02
1D48:  MOVWF  FF7
1D4A:  CALL   10FC
....................    lcd_gotoxy(1,3); 
1D4E:  MOVLW  01
1D50:  MOVWF  xEB
1D52:  MOVLW  03
1D54:  MOVWF  xEC
1D56:  CALL   0606
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1D5A:  MOVLW  64
1D5C:  MOVWF  FF6
1D5E:  MOVLW  02
1D60:  MOVWF  FF7
1D62:  CALL   10FC
....................    lcd_gotoxy(1,4); 
1D66:  MOVLW  01
1D68:  MOVWF  xEB
1D6A:  MOVLW  04
1D6C:  MOVWF  xEC
1D6E:  CALL   0606
....................    printf(lcd_putc,"  REF:OPSCR120-01   "); 
1D72:  MOVLW  7A
1D74:  MOVWF  FF6
1D76:  MOVLW  02
1D78:  MOVWF  FF7
1D7A:  CALL   10FC
....................    delay_ms(1500); 
1D7E:  MOVLW  06
1D80:  MOVWF  xD9
1D82:  MOVLW  FA
1D84:  MOVWF  xF0
1D86:  CALL   050C
1D8A:  DECFSZ xD9,F
1D8C:  BRA    1D82
....................    printf(lcd_putc,"\f"); 
1D8E:  MOVLW  0C
1D90:  MOVWF  xEA
1D92:  CALL   0668
....................     
....................    if(UP){ 
1D96:  BSF    F92.2
1D98:  BTFSC  F80.2
1D9A:  BRA    1E4A
....................       delay_ms(1000); 
1D9C:  MOVLW  04
1D9E:  MOVWF  xD9
1DA0:  MOVLW  FA
1DA2:  MOVWF  xF0
1DA4:  CALL   050C
1DA8:  DECFSZ xD9,F
1DAA:  BRA    1DA0
....................       if(UP){ 
1DAC:  BSF    F92.2
1DAE:  BTFSC  F80.2
1DB0:  BRA    1E4A
....................          write_eeprom(50,0); 
1DB2:  MOVLW  32
1DB4:  MOVWF  FA9
1DB6:  CLRF   FA8
1DB8:  BCF    FA6.6
1DBA:  BCF    FA6.7
1DBC:  BSF    FA6.2
1DBE:  MOVF   FF2,W
1DC0:  MOVWF  00
1DC2:  BCF    FF2.7
1DC4:  MOVLB  F
1DC6:  MOVLW  55
1DC8:  MOVWF  FA7
1DCA:  MOVLW  AA
1DCC:  MOVWF  FA7
1DCE:  BSF    FA6.1
1DD0:  BTFSC  FA6.1
1DD2:  BRA    1DD0
1DD4:  BCF    FA6.2
1DD6:  MOVF   00,W
1DD8:  IORWF  FF2,F
....................          delay_ms(10); 
1DDA:  MOVLW  0A
1DDC:  MOVLB  0
1DDE:  MOVWF  xF0
1DE0:  CALL   050C
....................          write_eeprom(51,0); 
1DE4:  MOVLW  33
1DE6:  MOVWF  FA9
1DE8:  CLRF   FA8
1DEA:  BCF    FA6.6
1DEC:  BCF    FA6.7
1DEE:  BSF    FA6.2
1DF0:  MOVF   FF2,W
1DF2:  MOVWF  00
1DF4:  BCF    FF2.7
1DF6:  MOVLB  F
1DF8:  MOVLW  55
1DFA:  MOVWF  FA7
1DFC:  MOVLW  AA
1DFE:  MOVWF  FA7
1E00:  BSF    FA6.1
1E02:  BTFSC  FA6.1
1E04:  BRA    1E02
1E06:  BCF    FA6.2
1E08:  MOVF   00,W
1E0A:  IORWF  FF2,F
....................          delay_ms(10); 
1E0C:  MOVLW  0A
1E0E:  MOVLB  0
1E10:  MOVWF  xF0
1E12:  CALL   050C
....................          write_eeprom(52,0); 
1E16:  MOVLW  34
1E18:  MOVWF  FA9
1E1A:  CLRF   FA8
1E1C:  BCF    FA6.6
1E1E:  BCF    FA6.7
1E20:  BSF    FA6.2
1E22:  MOVF   FF2,W
1E24:  MOVWF  00
1E26:  BCF    FF2.7
1E28:  MOVLB  F
1E2A:  MOVLW  55
1E2C:  MOVWF  FA7
1E2E:  MOVLW  AA
1E30:  MOVWF  FA7
1E32:  BSF    FA6.1
1E34:  BTFSC  FA6.1
1E36:  BRA    1E34
1E38:  BCF    FA6.2
1E3A:  MOVF   00,W
1E3C:  IORWF  FF2,F
....................          delay_ms(10); 
1E3E:  MOVLW  0A
1E40:  MOVLB  0
1E42:  MOVWF  xF0
1E44:  CALL   050C
....................          reset_cpu(); 
1E48:  RESET
....................       } 
....................    } 
....................    
....................    Menu=100; 
1E4A:  MOVLW  64
1E4C:  MOVWF  19
....................    while(true){ 
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1E4E:  DECFSZ 19,W
1E50:  BRA    2044
....................    lcd_gotoxy(1,1); 
1E52:  MOVLW  01
1E54:  MOVWF  xEB
1E56:  MOVWF  xEC
1E58:  CALL   0606
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1E5C:  MOVLW  90
1E5E:  MOVWF  FF6
1E60:  MOVLW  02
1E62:  MOVWF  FF7
1E64:  CALL   10FC
....................       if(paso<0) 
1E68:  BTFSC  35.7
1E6A:  BRA    1E6E
1E6C:  BRA    1E70
....................          paso=0; 
1E6E:  CLRF   35
....................          
....................       if(tup>30){//Si oprime hacia arriba 
1E70:  MOVF   46,F
1E72:  BNZ   1E7A
1E74:  MOVF   45,W
1E76:  SUBLW  1E
1E78:  BC    1E94
....................          if(Flanco == 0){ 
1E7A:  BTFSC  17.3
1E7C:  BRA    1E92
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
1E7E:  DECF   1E,F
1E80:  DECF   1C,F
1E82:  MOVLW  01
1E84:  ADDWF  1C,W
1E86:  MOVWF  1D
1E88:  BSF    17.3
1E8A:  MOVLW  1E
1E8C:  MOVWF  xF0
1E8E:  CALL   050C
....................          } 
....................       }else{ 
1E92:  BRA    1E96
....................          Flanco = 0; 
1E94:  BCF    17.3
....................       } 
....................              
....................       if(tdown>30){//Si oprime hacia abajo 
1E96:  MOVF   48,F
1E98:  BNZ   1EA0
1E9A:  MOVF   47,W
1E9C:  SUBLW  1E
1E9E:  BC    1EBA
....................          if(Flanco2 == 0){ 
1EA0:  BTFSC  17.5
1EA2:  BRA    1EB8
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
1EA4:  INCF   1E,F
1EA6:  INCF   1C,F
1EA8:  MOVLW  01
1EAA:  SUBWF  1C,W
1EAC:  MOVWF  1D
1EAE:  BSF    17.5
1EB0:  MOVLW  1E
1EB2:  MOVWF  xF0
1EB4:  CALL   050C
....................          } 
....................       }else{ 
1EB8:  BRA    1EBC
....................          Flanco2 = 0; 
1EBA:  BCF    17.5
....................       } 
....................     
....................         if(Flecha2>nMenuH) 
1EBC:  MOVF   1E,W
1EBE:  SUBWF  20,W
1EC0:  BC    1ED2
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1EC2:  INCF   35,F
1EC4:  MOVFF  1E,20
1EC8:  MOVLW  02
1ECA:  SUBWF  20,W
1ECC:  MOVWF  1F
1ECE:  MOVLW  04
1ED0:  MOVWF  1C
....................          
....................         if(Flecha2<nMenuL) 
1ED2:  MOVF   1F,W
1ED4:  SUBWF  1E,W
1ED6:  BC    1EE8
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1ED8:  DECF   35,F
1EDA:  MOVFF  1E,1F
1EDE:  MOVLW  02
1EE0:  ADDWF  1F,W
1EE2:  MOVWF  20
1EE4:  MOVLW  02
1EE6:  MOVWF  1C
....................          
....................         if(Flecha2>n_opcionH) 
1EE8:  MOVF   1E,W
1EEA:  SUBWF  1A,W
1EEC:  BC    1F00
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1EEE:  MOVFF  1B,1E
1EF2:  MOVLW  02
1EF4:  MOVWF  1C
1EF6:  CLRF   35
1EF8:  MOVFF  1E,1F
1EFC:  ADDWF  1F,W
1EFE:  MOVWF  20
....................          
....................         if(Flecha2<n_opcionL) 
1F00:  MOVF   1B,W
1F02:  SUBWF  1E,W
1F04:  BC    1F1C
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
1F06:  MOVFF  1A,1E
1F0A:  MOVLW  04
1F0C:  MOVWF  1C
1F0E:  SUBWF  1A,W
1F10:  MOVWF  35
1F12:  MOVFF  1E,20
1F16:  MOVLW  02
1F18:  SUBWF  20,W
1F1A:  MOVWF  1F
....................          
....................         mensajes(1+paso,2); 
1F1C:  MOVLW  01
1F1E:  ADDWF  35,W
1F20:  MOVWF  xD9
1F22:  MOVWF  xDA
1F24:  MOVLW  02
1F26:  MOVWF  xDB
1F28:  CALL   111E
....................         mensajes(2+paso,3); 
1F2C:  MOVLW  02
1F2E:  ADDWF  35,W
1F30:  MOVWF  xD9
1F32:  MOVWF  xDA
1F34:  MOVLW  03
1F36:  MOVWF  xDB
1F38:  CALL   111E
....................         mensajes(3+paso,4); 
1F3C:  MOVLW  03
1F3E:  ADDWF  35,W
1F40:  MOVWF  xD9
1F42:  MOVWF  xDA
1F44:  MOVLW  04
1F46:  MOVWF  xDB
1F48:  CALL   111E
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1F4C:  MOVLW  01
1F4E:  MOVWF  xEB
1F50:  MOVFF  1C,EC
1F54:  CALL   0606
....................         lcd_putc(t[0]); 
1F58:  MOVFF  36,EA
1F5C:  CALL   0668
....................  
....................         if(Flecha==2) 
1F60:  MOVF   1C,W
1F62:  SUBLW  02
1F64:  BNZ   1F8E
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1F66:  MOVLW  01
1F68:  MOVWF  xEB
1F6A:  MOVLW  04
1F6C:  MOVWF  xEC
1F6E:  CALL   0606
....................             lcd_putc(t[1]); 
1F72:  MOVFF  37,EA
1F76:  CALL   0668
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1F7A:  MOVLW  01
1F7C:  MOVWF  xEB
1F7E:  MOVLW  03
1F80:  MOVWF  xEC
1F82:  CALL   0606
....................             lcd_putc(t[1]); 
1F86:  MOVFF  37,EA
1F8A:  CALL   0668
....................           } 
....................          
....................         if(Flecha==4) 
1F8E:  MOVF   1C,W
1F90:  SUBLW  04
1F92:  BNZ   1FBC
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1F94:  MOVLW  01
1F96:  MOVWF  xEB
1F98:  MOVLW  02
1F9A:  MOVWF  xEC
1F9C:  CALL   0606
....................             lcd_putc(t[1]); 
1FA0:  MOVFF  37,EA
1FA4:  CALL   0668
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1FA8:  MOVLW  01
1FAA:  MOVWF  xEB
1FAC:  MOVLW  03
1FAE:  MOVWF  xEC
1FB0:  CALL   0606
....................             lcd_putc(t[1]); 
1FB4:  MOVFF  37,EA
1FB8:  CALL   0668
....................           } 
....................          
....................         if(Flecha==3){ 
1FBC:  MOVF   1C,W
1FBE:  SUBLW  03
1FC0:  BNZ   1FEA
....................             lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1FC2:  MOVLW  01
1FC4:  MOVWF  xEB
1FC6:  MOVLW  04
1FC8:  MOVWF  xEC
1FCA:  CALL   0606
....................             lcd_putc(t[1]); 
1FCE:  MOVFF  37,EA
1FD2:  CALL   0668
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1FD6:  MOVLW  01
1FD8:  MOVWF  xEB
1FDA:  MOVLW  02
1FDC:  MOVWF  xEC
1FDE:  CALL   0606
....................             lcd_putc(t[1]); 
1FE2:  MOVFF  37,EA
1FE6:  CALL   0668
....................         } 
....................  
....................        if(tright>30){// Si oprime derecha 
1FEA:  MOVF   4A,F
1FEC:  BNZ   1FF4
1FEE:  MOVF   49,W
1FF0:  SUBLW  1E
1FF2:  BC    201C
....................          if(Flanco1 == 0){ 
1FF4:  BTFSC  17.4
1FF6:  BRA    201A
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
1FF8:  BSF    17.4
1FFA:  MOVFF  1E,19
1FFE:  MOVLW  03
2000:  MOVWF  1C
2002:  MOVLW  02
2004:  MOVWF  xD9
2006:  MOVLW  96
2008:  MOVWF  xF0
200A:  CALL   050C
200E:  DECFSZ xD9,F
2010:  BRA    2006
2012:  MOVLW  0C
2014:  MOVWF  xEA
2016:  CALL   0668
....................          } 
....................        }else{ 
201A:  BRA    201E
....................          Flanco1 = 0; 
201C:  BCF    17.4
....................        } 
....................              
....................        if(tleft>30){ 
201E:  MOVF   4C,F
2020:  BNZ   2028
2022:  MOVF   4B,W
2024:  SUBLW  1E
2026:  BC    2044
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
2028:  MOVLW  64
202A:  MOVWF  19
202C:  MOVLW  0C
202E:  MOVWF  xEA
2030:  CALL   0668
2034:  MOVLW  02
2036:  MOVWF  xD9
2038:  MOVLW  FA
203A:  MOVWF  xF0
203C:  CALL   050C
2040:  DECFSZ xD9,F
2042:  BRA    2038
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de Calibracion en un punto 
2044:  MOVF   19,W
2046:  SUBLW  02
2048:  BTFSS  FD8.2
204A:  BRA    2466
....................     
....................    lcd_gotoxy(1,1); 
204C:  MOVLW  01
204E:  MOVWF  xEB
2050:  MOVWF  xEC
2052:  CALL   0606
....................    printf(lcd_putc,"Calibracion un Punto"); 
2056:  MOVLW  A6
2058:  MOVWF  FF6
205A:  MOVLW  02
205C:  MOVWF  FF7
205E:  CALL   10FC
....................    lcd_gotoxy(1,2); 
2062:  MOVLW  01
2064:  MOVWF  xEB
2066:  MOVLW  02
2068:  MOVWF  xEC
206A:  CALL   0606
....................    printf(lcd_putc," Ingrese valor  pH  "); 
206E:  MOVLW  BC
2070:  MOVWF  FF6
2072:  MOVLW  02
2074:  MOVWF  FF7
2076:  CALL   10FC
....................    lcd_gotoxy(1,3); 
207A:  MOVLW  01
207C:  MOVWF  xEB
207E:  MOVLW  03
2080:  MOVWF  xEC
2082:  CALL   0606
....................    printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
2086:  MOVLW  D2
2088:  MOVWF  FF6
208A:  MOVLW  02
208C:  MOVWF  FF7
208E:  MOVLW  05
2090:  MOVWF  xDD
2092:  CALL   11C6
2096:  MOVLW  01
2098:  MOVWF  FE9
209A:  MOVFF  B8,E0
209E:  MOVFF  B7,DF
20A2:  MOVFF  B6,DE
20A6:  MOVFF  B5,DD
20AA:  MOVWF  xE1
20AC:  CALL   1392
20B0:  MOVLW  DC
20B2:  MOVWF  FF6
20B4:  MOVLW  02
20B6:  MOVWF  FF7
20B8:  MOVLW  05
20BA:  MOVWF  xDD
20BC:  CALL   11C6
....................     
....................           
....................    if(pHpoint<0.5) 
20C0:  MOVFF  B8,E5
20C4:  MOVFF  B7,E4
20C8:  MOVFF  B6,E3
20CC:  MOVFF  B5,E2
20D0:  CLRF   xE9
20D2:  CLRF   xE8
20D4:  CLRF   xE7
20D6:  MOVLW  7E
20D8:  MOVWF  xE6
20DA:  CALL   0D30
20DE:  BNC   20EA
....................       pHpoint=0.5; 
20E0:  CLRF   xB8
20E2:  CLRF   xB7
20E4:  CLRF   xB6
20E6:  MOVLW  7E
20E8:  MOVWF  xB5
....................     
....................    if(pHpoint>14.0) 
20EA:  CLRF   xE5
20EC:  CLRF   xE4
20EE:  MOVLW  60
20F0:  MOVWF  xE3
20F2:  MOVLW  82
20F4:  MOVWF  xE2
20F6:  MOVFF  B8,E9
20FA:  MOVFF  B7,E8
20FE:  MOVFF  B6,E7
2102:  MOVFF  B5,E6
2106:  CALL   0D30
210A:  BNC   2118
....................       pHpoint=14.0; 
210C:  CLRF   xB8
210E:  CLRF   xB7
2110:  MOVLW  60
2112:  MOVWF  xB6
2114:  MOVLW  82
2116:  MOVWF  xB5
....................        
....................    if(tup>30){ 
2118:  MOVF   46,F
211A:  BNZ   2122
211C:  MOVF   45,W
211E:  SUBLW  1E
2120:  BC    2182
....................       if(pHpoint<14.0){ 
2122:  MOVFF  B8,E5
2126:  MOVFF  B7,E4
212A:  MOVFF  B6,E3
212E:  MOVFF  B5,E2
2132:  CLRF   xE9
2134:  CLRF   xE8
2136:  MOVLW  60
2138:  MOVWF  xE7
213A:  MOVLW  82
213C:  MOVWF  xE6
213E:  CALL   0D30
2142:  BNC   2182
....................          pHpoint+=0.1;delay_ms(50); 
2144:  BCF    FD8.1
2146:  MOVFF  B8,E5
214A:  MOVFF  B7,E4
214E:  MOVFF  B6,E3
2152:  MOVFF  B5,E2
2156:  MOVLW  CD
2158:  MOVWF  xE9
215A:  MOVLW  CC
215C:  MOVWF  xE8
215E:  MOVLW  4C
2160:  MOVWF  xE7
2162:  MOVLW  7B
2164:  MOVWF  xE6
2166:  CALL   0AC6
216A:  MOVFF  03,B8
216E:  MOVFF  02,B7
2172:  MOVFF  01,B6
2176:  MOVFF  00,B5
217A:  MOVLW  32
217C:  MOVWF  xF0
217E:  CALL   050C
....................       } 
....................    } 
....................     
....................    if(tdown>30){ 
2182:  MOVF   48,F
2184:  BNZ   218C
2186:  MOVF   47,W
2188:  SUBLW  1E
218A:  BC    21EA
....................       if(pHpoint>0.5){ 
218C:  CLRF   xE5
218E:  CLRF   xE4
2190:  CLRF   xE3
2192:  MOVLW  7E
2194:  MOVWF  xE2
2196:  MOVFF  B8,E9
219A:  MOVFF  B7,E8
219E:  MOVFF  B6,E7
21A2:  MOVFF  B5,E6
21A6:  CALL   0D30
21AA:  BNC   21EA
....................          pHpoint-=0.1;delay_ms(50); 
21AC:  BSF    FD8.1
21AE:  MOVFF  B8,E5
21B2:  MOVFF  B7,E4
21B6:  MOVFF  B6,E3
21BA:  MOVFF  B5,E2
21BE:  MOVLW  CD
21C0:  MOVWF  xE9
21C2:  MOVLW  CC
21C4:  MOVWF  xE8
21C6:  MOVLW  4C
21C8:  MOVWF  xE7
21CA:  MOVLW  7B
21CC:  MOVWF  xE6
21CE:  CALL   0AC6
21D2:  MOVFF  03,B8
21D6:  MOVFF  02,B7
21DA:  MOVFF  01,B6
21DE:  MOVFF  00,B5
21E2:  MOVLW  32
21E4:  MOVWF  xF0
21E6:  CALL   050C
....................       } 
....................    } 
....................     
....................    if(tright>30){ 
21EA:  MOVF   4A,F
21EC:  BNZ   21F6
21EE:  MOVF   49,W
21F0:  SUBLW  1E
21F2:  BTFSC  FD8.0
21F4:  BRA    2438
....................       b=pHpoint-pVpH; 
21F6:  BSF    FD8.1
21F8:  MOVFF  B8,E5
21FC:  MOVFF  B7,E4
2200:  MOVFF  B6,E3
2204:  MOVFF  B5,E2
2208:  MOVFF  BC,E9
220C:  MOVFF  BB,E8
2210:  MOVFF  BA,E7
2214:  MOVFF  B9,E6
2218:  CALL   0AC6
221C:  MOVFF  03,C8
2220:  MOVFF  02,C7
2224:  MOVFF  01,C6
2228:  MOVFF  00,C5
....................       if(b>=0){ 
222C:  CLRF   xE5
222E:  CLRF   xE4
2230:  CLRF   xE3
2232:  CLRF   xE2
2234:  MOVFF  C8,E9
2238:  MOVFF  C7,E8
223C:  MOVFF  C6,E7
2240:  MOVFF  C5,E6
2244:  CALL   0D30
2248:  BC    224C
224A:  BNZ   227C
....................          negativo=10;write_eeprom(60,negativo); 
224C:  MOVLW  0A
224E:  MOVWF  28
2250:  MOVLW  3C
2252:  MOVWF  FA9
2254:  MOVFF  28,FA8
2258:  BCF    FA6.6
225A:  BCF    FA6.7
225C:  BSF    FA6.2
225E:  MOVF   FF2,W
2260:  MOVWF  00
2262:  BCF    FF2.7
2264:  MOVLB  F
2266:  MOVLW  55
2268:  MOVWF  FA7
226A:  MOVLW  AA
226C:  MOVWF  FA7
226E:  BSF    FA6.1
2270:  BTFSC  FA6.1
2272:  BRA    2270
2274:  BCF    FA6.2
2276:  MOVF   00,W
2278:  IORWF  FF2,F
227A:  MOVLB  0
....................       } 
....................       if(b<0){ 
227C:  MOVFF  C8,E5
2280:  MOVFF  C7,E4
2284:  MOVFF  C6,E3
2288:  MOVFF  C5,E2
228C:  CLRF   xE9
228E:  CLRF   xE8
2290:  CLRF   xE7
2292:  CLRF   xE6
2294:  CALL   0D30
2298:  BNC   22CA
....................          negativo=20;write_eeprom(60,negativo); 
229A:  MOVLW  14
229C:  MOVWF  28
229E:  MOVLW  3C
22A0:  MOVWF  FA9
22A2:  MOVFF  28,FA8
22A6:  BCF    FA6.6
22A8:  BCF    FA6.7
22AA:  BSF    FA6.2
22AC:  MOVF   FF2,W
22AE:  MOVWF  00
22B0:  BCF    FF2.7
22B2:  MOVLB  F
22B4:  MOVLW  55
22B6:  MOVWF  FA7
22B8:  MOVLW  AA
22BA:  MOVWF  FA7
22BC:  BSF    FA6.1
22BE:  BTFSC  FA6.1
22C0:  BRA    22BE
22C2:  BCF    FA6.2
22C4:  MOVF   00,W
22C6:  IORWF  FF2,F
22C8:  MOVLB  0
....................       } 
....................       b=abs(b); 
22CA:  MOVFF  C5,00
22CE:  MOVFF  C6,01
22D2:  MOVFF  C7,02
22D6:  MOVFF  C8,03
22DA:  BCF    01.7
22DC:  MOVFF  C8,C8
22E0:  MOVFF  C7,C7
22E4:  MOVFF  01,C6
22E8:  MOVFF  C5,C5
....................       bInt=(int8)b; 
22EC:  MOVFF  C8,DC
22F0:  MOVFF  C7,DB
22F4:  MOVFF  C6,DA
22F8:  MOVFF  C5,D9
22FC:  CALL   1518
2300:  MOVFF  01,2F
....................       tmp=b-bInt; 
2304:  CLRF   xE4
2306:  MOVFF  2F,E3
230A:  CALL   06FE
230E:  BSF    FD8.1
2310:  MOVFF  C8,E5
2314:  MOVFF  C7,E4
2318:  MOVFF  C6,E3
231C:  MOVFF  C5,E2
2320:  MOVFF  03,E9
2324:  MOVFF  02,E8
2328:  MOVFF  01,E7
232C:  MOVFF  00,E6
2330:  CALL   0AC6
2334:  MOVFF  03,D0
2338:  MOVFF  02,CF
233C:  MOVFF  01,CE
2340:  MOVFF  00,CD
....................       bDec=tmp*100; 
2344:  MOVFF  D0,ED
2348:  MOVFF  CF,EC
234C:  MOVFF  CE,EB
2350:  MOVFF  CD,EA
2354:  CLRF   xF1
2356:  CLRF   xF0
2358:  MOVLW  48
235A:  MOVWF  xEF
235C:  MOVLW  85
235E:  MOVWF  xEE
2360:  CALL   11E6
2364:  MOVFF  03,DC
2368:  MOVFF  02,DB
236C:  MOVFF  01,DA
2370:  MOVFF  00,D9
2374:  CALL   1518
2378:  MOVFF  01,30
....................       write_eeprom(20,bInt); 
237C:  MOVLW  14
237E:  MOVWF  FA9
2380:  MOVFF  2F,FA8
2384:  BCF    FA6.6
2386:  BCF    FA6.7
2388:  BSF    FA6.2
238A:  MOVF   FF2,W
238C:  MOVWF  00
238E:  BCF    FF2.7
2390:  MOVLB  F
2392:  MOVLW  55
2394:  MOVWF  FA7
2396:  MOVLW  AA
2398:  MOVWF  FA7
239A:  BSF    FA6.1
239C:  BTFSC  FA6.1
239E:  BRA    239C
23A0:  BCF    FA6.2
23A2:  MOVF   00,W
23A4:  IORWF  FF2,F
....................       delay_ms(20); 
23A6:  MOVLW  14
23A8:  MOVLB  0
23AA:  MOVWF  xF0
23AC:  CALL   050C
....................       write_eeprom(21,bDec); 
23B0:  MOVLW  15
23B2:  MOVWF  FA9
23B4:  MOVFF  30,FA8
23B8:  BCF    FA6.6
23BA:  BCF    FA6.7
23BC:  BSF    FA6.2
23BE:  MOVF   FF2,W
23C0:  MOVWF  00
23C2:  BCF    FF2.7
23C4:  MOVLB  F
23C6:  MOVLW  55
23C8:  MOVWF  FA7
23CA:  MOVLW  AA
23CC:  MOVWF  FA7
23CE:  BSF    FA6.1
23D0:  BTFSC  FA6.1
23D2:  BRA    23D0
23D4:  BCF    FA6.2
23D6:  MOVF   00,W
23D8:  IORWF  FF2,F
....................       delay_ms(200); 
23DA:  MOVLW  C8
23DC:  MOVLB  0
23DE:  MOVWF  xF0
23E0:  CALL   050C
....................       printf(lcd_putc,"\f"); 
23E4:  MOVLW  0C
23E6:  MOVWF  xEA
23E8:  CALL   0668
....................       lcd_gotoxy(1,2); 
23EC:  MOVLW  01
23EE:  MOVWF  xEB
23F0:  MOVLW  02
23F2:  MOVWF  xEC
23F4:  CALL   0606
....................       printf(lcd_putc,"   Calibracion   "); 
23F8:  MOVLW  E2
23FA:  MOVWF  FF6
23FC:  MOVLW  02
23FE:  MOVWF  FF7
2400:  CALL   10FC
....................       lcd_gotoxy(1,3); 
2404:  MOVLW  01
2406:  MOVWF  xEB
2408:  MOVLW  03
240A:  MOVWF  xEC
240C:  CALL   0606
....................       printf(lcd_putc,"     Exitosa     "); 
2410:  MOVLW  F4
2412:  MOVWF  FF6
2414:  MOVLW  02
2416:  MOVWF  FF7
2418:  CALL   10FC
....................       delay_ms(500); 
241C:  MOVLW  02
241E:  MOVWF  xD9
2420:  MOVLW  FA
2422:  MOVWF  xF0
2424:  CALL   050C
2428:  DECFSZ xD9,F
242A:  BRA    2420
....................       printf(lcd_putc,"\f"); 
242C:  MOVLW  0C
242E:  MOVWF  xEA
2430:  CALL   0668
....................       Menu=100; 
2434:  MOVLW  64
2436:  MOVWF  19
....................    } 
....................     
....................    if(tleft>30){ 
2438:  MOVF   4C,F
243A:  BNZ   2442
243C:  MOVF   4B,W
243E:  SUBLW  1E
2440:  BC    2466
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2442:  MOVLW  01
2444:  MOVWF  19
2446:  CLRF   35
2448:  MOVLW  04
244A:  MOVWF  xD9
244C:  MOVLW  FA
244E:  MOVWF  xF0
2450:  CALL   050C
2454:  DECFSZ xD9,F
2456:  BRA    244C
2458:  MOVLW  02
245A:  MOVWF  1C
245C:  MOVWF  1E
245E:  MOVLW  0C
2460:  MOVWF  xEA
2462:  CALL   0668
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de calibracion en dos puntos 
2466:  MOVF   19,W
2468:  SUBLW  03
246A:  BTFSS  FD8.2
246C:  GOTO   2D36
....................     
....................       lcd_gotoxy(1,1); 
2470:  MOVLW  01
2472:  MOVWF  xEB
2474:  MOVWF  xEC
2476:  CALL   0606
....................       printf(lcd_putc,"Calibracion dos Punt"); 
247A:  MOVLW  06
247C:  MOVWF  FF6
247E:  MOVLW  03
2480:  MOVWF  FF7
2482:  CALL   10FC
....................       lcd_gotoxy(1,2); 
2486:  MOVLW  01
2488:  MOVWF  xEB
248A:  MOVLW  02
248C:  MOVWF  xEC
248E:  CALL   0606
....................       printf(lcd_putc,"Ingrese valor  pH %u",punto); 
2492:  MOVLW  1C
2494:  MOVWF  FF6
2496:  MOVLW  03
2498:  MOVWF  FF7
249A:  MOVLW  12
249C:  MOVWF  xDD
249E:  CALL   11C6
24A2:  MOVFF  27,DD
24A6:  MOVLW  1B
24A8:  MOVWF  xDE
24AA:  CALL   1578
....................       lcd_gotoxy(1,3); 
24AE:  MOVLW  01
24B0:  MOVWF  xEB
24B2:  MOVLW  03
24B4:  MOVWF  xEC
24B6:  CALL   0606
....................       printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
24BA:  MOVLW  32
24BC:  MOVWF  FF6
24BE:  MOVLW  03
24C0:  MOVWF  FF7
24C2:  MOVLW  05
24C4:  MOVWF  xDD
24C6:  CALL   11C6
24CA:  MOVLW  01
24CC:  MOVWF  FE9
24CE:  MOVFF  B8,E0
24D2:  MOVFF  B7,DF
24D6:  MOVFF  B6,DE
24DA:  MOVFF  B5,DD
24DE:  MOVWF  xE1
24E0:  CALL   1392
24E4:  MOVLW  3C
24E6:  MOVWF  FF6
24E8:  MOVLW  03
24EA:  MOVWF  FF7
24EC:  MOVLW  05
24EE:  MOVWF  xDD
24F0:  CALL   11C6
....................       //lcd_gotoxy(1,4); 
....................       //printf(lcd_putc,"     %2.1f  ",sensores(0));  
....................              
....................       if(pHpoint<0.5) 
24F4:  MOVFF  B8,E5
24F8:  MOVFF  B7,E4
24FC:  MOVFF  B6,E3
2500:  MOVFF  B5,E2
2504:  CLRF   xE9
2506:  CLRF   xE8
2508:  CLRF   xE7
250A:  MOVLW  7E
250C:  MOVWF  xE6
250E:  CALL   0D30
2512:  BNC   251E
....................          pHpoint=0.5; 
2514:  CLRF   xB8
2516:  CLRF   xB7
2518:  CLRF   xB6
251A:  MOVLW  7E
251C:  MOVWF  xB5
....................        
....................       if(pHpoint>14.0)       
251E:  CLRF   xE5
2520:  CLRF   xE4
2522:  MOVLW  60
2524:  MOVWF  xE3
2526:  MOVLW  82
2528:  MOVWF  xE2
252A:  MOVFF  B8,E9
252E:  MOVFF  B7,E8
2532:  MOVFF  B6,E7
2536:  MOVFF  B5,E6
253A:  CALL   0D30
253E:  BNC   254C
....................          pHpoint=14.0; 
2540:  CLRF   xB8
2542:  CLRF   xB7
2544:  MOVLW  60
2546:  MOVWF  xB6
2548:  MOVLW  82
254A:  MOVWF  xB5
....................        
....................       if(tup>30){ 
254C:  MOVF   46,F
254E:  BNZ   2556
2550:  MOVF   45,W
2552:  SUBLW  1E
2554:  BC    25B6
....................          if(pHpoint<14.0){ 
2556:  MOVFF  B8,E5
255A:  MOVFF  B7,E4
255E:  MOVFF  B6,E3
2562:  MOVFF  B5,E2
2566:  CLRF   xE9
2568:  CLRF   xE8
256A:  MOVLW  60
256C:  MOVWF  xE7
256E:  MOVLW  82
2570:  MOVWF  xE6
2572:  CALL   0D30
2576:  BNC   25B6
....................             pHpoint+=0.1;delay_ms(50); 
2578:  BCF    FD8.1
257A:  MOVFF  B8,E5
257E:  MOVFF  B7,E4
2582:  MOVFF  B6,E3
2586:  MOVFF  B5,E2
258A:  MOVLW  CD
258C:  MOVWF  xE9
258E:  MOVLW  CC
2590:  MOVWF  xE8
2592:  MOVLW  4C
2594:  MOVWF  xE7
2596:  MOVLW  7B
2598:  MOVWF  xE6
259A:  CALL   0AC6
259E:  MOVFF  03,B8
25A2:  MOVFF  02,B7
25A6:  MOVFF  01,B6
25AA:  MOVFF  00,B5
25AE:  MOVLW  32
25B0:  MOVWF  xF0
25B2:  CALL   050C
....................          } 
....................       } 
....................        
....................       if(tdown>30){ 
25B6:  MOVF   48,F
25B8:  BNZ   25C0
25BA:  MOVF   47,W
25BC:  SUBLW  1E
25BE:  BC    261E
....................          if(pHpoint>0.5){ 
25C0:  CLRF   xE5
25C2:  CLRF   xE4
25C4:  CLRF   xE3
25C6:  MOVLW  7E
25C8:  MOVWF  xE2
25CA:  MOVFF  B8,E9
25CE:  MOVFF  B7,E8
25D2:  MOVFF  B6,E7
25D6:  MOVFF  B5,E6
25DA:  CALL   0D30
25DE:  BNC   261E
....................             pHpoint-=0.1;delay_ms(50); 
25E0:  BSF    FD8.1
25E2:  MOVFF  B8,E5
25E6:  MOVFF  B7,E4
25EA:  MOVFF  B6,E3
25EE:  MOVFF  B5,E2
25F2:  MOVLW  CD
25F4:  MOVWF  xE9
25F6:  MOVLW  CC
25F8:  MOVWF  xE8
25FA:  MOVLW  4C
25FC:  MOVWF  xE7
25FE:  MOVLW  7B
2600:  MOVWF  xE6
2602:  CALL   0AC6
2606:  MOVFF  03,B8
260A:  MOVFF  02,B7
260E:  MOVFF  01,B6
2612:  MOVFF  00,B5
2616:  MOVLW  32
2618:  MOVWF  xF0
261A:  CALL   050C
....................          } 
....................       } 
....................        
....................       if(tright>30){ 
261E:  MOVF   4A,F
2620:  BNZ   262A
2622:  MOVF   49,W
2624:  SUBLW  1E
2626:  BTFSC  FD8.0
2628:  BRA    2C34
....................          if(punto==1){ 
262A:  DECFSZ 27,W
262C:  BRA    267C
....................             X0=sensores(0); 
262E:  CLRF   xDE
2630:  CALL   15E4
2634:  MOVFF  03,A8
2638:  MOVFF  02,A7
263C:  MOVFF  01,A6
2640:  MOVFF  00,A5
....................             Y0=pHpoint; 
2644:  MOVFF  B8,AC
2648:  MOVFF  B7,AB
264C:  MOVFF  B6,AA
2650:  MOVFF  B5,A9
....................             punto++; 
2654:  INCF   27,F
....................             Alarma_on; 
2656:  BSF    F8C.3
2658:  BCF    F95.3
....................             delay_ms(1000); 
265A:  MOVLW  04
265C:  MOVWF  xD9
265E:  MOVLW  FA
2660:  MOVWF  xF0
2662:  CALL   050C
2666:  DECFSZ xD9,F
2668:  BRA    265E
....................             Alarma_off; 
266A:  BCF    F8C.3
266C:  BCF    F95.3
....................             pHpoint=7.0; 
266E:  CLRF   xB8
2670:  CLRF   xB7
2672:  MOVLW  60
2674:  MOVWF  xB6
2676:  MOVLW  81
2678:  MOVWF  xB5
....................          }else{ 
267A:  BRA    2C34
....................             if(punto==2){ 
267C:  MOVF   27,W
267E:  SUBLW  02
2680:  BTFSS  FD8.2
2682:  BRA    2C34
....................                X1=sensores(0); 
2684:  CLRF   xDE
2686:  CALL   15E4
268A:  MOVFF  03,B0
268E:  MOVFF  02,AF
2692:  MOVFF  01,AE
2696:  MOVFF  00,AD
....................                Y1=pHpoint; 
269A:  MOVFF  B8,B4
269E:  MOVFF  B7,B3
26A2:  MOVFF  B6,B2
26A6:  MOVFF  B5,B1
....................                 
....................                Y0Int=(int8)Y0; 
26AA:  MOVFF  AC,DC
26AE:  MOVFF  AB,DB
26B2:  MOVFF  AA,DA
26B6:  MOVFF  A9,D9
26BA:  CALL   1518
26BE:  MOVFF  01,31
....................                tmp=Y0-Y0Int; 
26C2:  CLRF   xE4
26C4:  MOVFF  31,E3
26C8:  CALL   06FE
26CC:  BSF    FD8.1
26CE:  MOVFF  AC,E5
26D2:  MOVFF  AB,E4
26D6:  MOVFF  AA,E3
26DA:  MOVFF  A9,E2
26DE:  MOVFF  03,E9
26E2:  MOVFF  02,E8
26E6:  MOVFF  01,E7
26EA:  MOVFF  00,E6
26EE:  CALL   0AC6
26F2:  MOVFF  03,D0
26F6:  MOVFF  02,CF
26FA:  MOVFF  01,CE
26FE:  MOVFF  00,CD
....................                Y0Dec=tmp*10; 
2702:  MOVFF  D0,ED
2706:  MOVFF  CF,EC
270A:  MOVFF  CE,EB
270E:  MOVFF  CD,EA
2712:  CLRF   xF1
2714:  CLRF   xF0
2716:  MOVLW  20
2718:  MOVWF  xEF
271A:  MOVLW  82
271C:  MOVWF  xEE
271E:  CALL   11E6
2722:  MOVFF  03,DC
2726:  MOVFF  02,DB
272A:  MOVFF  01,DA
272E:  MOVFF  00,D9
2732:  CALL   1518
2736:  MOVFF  01,32
....................                 
....................                Y1Int=(int8)Y1; 
273A:  MOVFF  B4,DC
273E:  MOVFF  B3,DB
2742:  MOVFF  B2,DA
2746:  MOVFF  B1,D9
274A:  CALL   1518
274E:  MOVFF  01,33
....................                tmp=Y1-Y1Int; 
2752:  CLRF   xE4
2754:  MOVFF  33,E3
2758:  CALL   06FE
275C:  BSF    FD8.1
275E:  MOVFF  B4,E5
2762:  MOVFF  B3,E4
2766:  MOVFF  B2,E3
276A:  MOVFF  B1,E2
276E:  MOVFF  03,E9
2772:  MOVFF  02,E8
2776:  MOVFF  01,E7
277A:  MOVFF  00,E6
277E:  CALL   0AC6
2782:  MOVFF  03,D0
2786:  MOVFF  02,CF
278A:  MOVFF  01,CE
278E:  MOVFF  00,CD
....................                Y1Dec=tmp*10; 
2792:  MOVFF  D0,ED
2796:  MOVFF  CF,EC
279A:  MOVFF  CE,EB
279E:  MOVFF  CD,EA
27A2:  CLRF   xF1
27A4:  CLRF   xF0
27A6:  MOVLW  20
27A8:  MOVWF  xEF
27AA:  MOVLW  82
27AC:  MOVWF  xEE
27AE:  CALL   11E6
27B2:  MOVFF  03,DC
27B6:  MOVFF  02,DB
27BA:  MOVFF  01,DA
27BE:  MOVFF  00,D9
27C2:  CALL   1518
27C6:  MOVFF  01,34
....................                 
....................                write_eeprom(30,(int8)X0); 
27CA:  MOVFF  A8,DC
27CE:  MOVFF  A7,DB
27D2:  MOVFF  A6,DA
27D6:  MOVFF  A5,D9
27DA:  CALL   1518
27DE:  MOVFF  01,D9
27E2:  MOVLW  1E
27E4:  MOVWF  FA9
27E6:  MOVFF  D9,FA8
27EA:  BCF    FA6.6
27EC:  BCF    FA6.7
27EE:  BSF    FA6.2
27F0:  MOVF   FF2,W
27F2:  MOVWF  00
27F4:  BCF    FF2.7
27F6:  MOVLB  F
27F8:  MOVLW  55
27FA:  MOVWF  FA7
27FC:  MOVLW  AA
27FE:  MOVWF  FA7
2800:  BSF    FA6.1
2802:  BTFSC  FA6.1
2804:  BRA    2802
2806:  BCF    FA6.2
2808:  MOVF   00,W
280A:  IORWF  FF2,F
....................                delay_ms(20); 
280C:  MOVLW  14
280E:  MOVLB  0
2810:  MOVWF  xF0
2812:  CALL   050C
....................                write_eeprom(31,(int8)X1); 
2816:  MOVFF  B0,DC
281A:  MOVFF  AF,DB
281E:  MOVFF  AE,DA
2822:  MOVFF  AD,D9
2826:  CALL   1518
282A:  MOVFF  01,D9
282E:  MOVLW  1F
2830:  MOVWF  FA9
2832:  MOVFF  D9,FA8
2836:  BCF    FA6.6
2838:  BCF    FA6.7
283A:  BSF    FA6.2
283C:  MOVF   FF2,W
283E:  MOVWF  00
2840:  BCF    FF2.7
2842:  MOVLB  F
2844:  MOVLW  55
2846:  MOVWF  FA7
2848:  MOVLW  AA
284A:  MOVWF  FA7
284C:  BSF    FA6.1
284E:  BTFSC  FA6.1
2850:  BRA    284E
2852:  BCF    FA6.2
2854:  MOVF   00,W
2856:  IORWF  FF2,F
....................                delay_ms(20); 
2858:  MOVLW  14
285A:  MOVLB  0
285C:  MOVWF  xF0
285E:  CALL   050C
....................                write_eeprom(32,Y0Int); 
2862:  MOVLW  20
2864:  MOVWF  FA9
2866:  MOVFF  31,FA8
286A:  BCF    FA6.6
286C:  BCF    FA6.7
286E:  BSF    FA6.2
2870:  MOVF   FF2,W
2872:  MOVWF  00
2874:  BCF    FF2.7
2876:  MOVLB  F
2878:  MOVLW  55
287A:  MOVWF  FA7
287C:  MOVLW  AA
287E:  MOVWF  FA7
2880:  BSF    FA6.1
2882:  BTFSC  FA6.1
2884:  BRA    2882
2886:  BCF    FA6.2
2888:  MOVF   00,W
288A:  IORWF  FF2,F
....................                delay_ms(20); 
288C:  MOVLW  14
288E:  MOVLB  0
2890:  MOVWF  xF0
2892:  CALL   050C
....................                write_eeprom(33,Y0Dec); 
2896:  MOVLW  21
2898:  MOVWF  FA9
289A:  MOVFF  32,FA8
289E:  BCF    FA6.6
28A0:  BCF    FA6.7
28A2:  BSF    FA6.2
28A4:  MOVF   FF2,W
28A6:  MOVWF  00
28A8:  BCF    FF2.7
28AA:  MOVLB  F
28AC:  MOVLW  55
28AE:  MOVWF  FA7
28B0:  MOVLW  AA
28B2:  MOVWF  FA7
28B4:  BSF    FA6.1
28B6:  BTFSC  FA6.1
28B8:  BRA    28B6
28BA:  BCF    FA6.2
28BC:  MOVF   00,W
28BE:  IORWF  FF2,F
....................                delay_ms(20); 
28C0:  MOVLW  14
28C2:  MOVLB  0
28C4:  MOVWF  xF0
28C6:  CALL   050C
....................                write_eeprom(34,Y1Int); 
28CA:  MOVLW  22
28CC:  MOVWF  FA9
28CE:  MOVFF  33,FA8
28D2:  BCF    FA6.6
28D4:  BCF    FA6.7
28D6:  BSF    FA6.2
28D8:  MOVF   FF2,W
28DA:  MOVWF  00
28DC:  BCF    FF2.7
28DE:  MOVLB  F
28E0:  MOVLW  55
28E2:  MOVWF  FA7
28E4:  MOVLW  AA
28E6:  MOVWF  FA7
28E8:  BSF    FA6.1
28EA:  BTFSC  FA6.1
28EC:  BRA    28EA
28EE:  BCF    FA6.2
28F0:  MOVF   00,W
28F2:  IORWF  FF2,F
....................                delay_ms(20); 
28F4:  MOVLW  14
28F6:  MOVLB  0
28F8:  MOVWF  xF0
28FA:  CALL   050C
....................                write_eeprom(35,Y1Dec); 
28FE:  MOVLW  23
2900:  MOVWF  FA9
2902:  MOVFF  34,FA8
2906:  BCF    FA6.6
2908:  BCF    FA6.7
290A:  BSF    FA6.2
290C:  MOVF   FF2,W
290E:  MOVWF  00
2910:  BCF    FF2.7
2912:  MOVLB  F
2914:  MOVLW  55
2916:  MOVWF  FA7
2918:  MOVLW  AA
291A:  MOVWF  FA7
291C:  BSF    FA6.1
291E:  BTFSC  FA6.1
2920:  BRA    291E
2922:  BCF    FA6.2
2924:  MOVF   00,W
2926:  IORWF  FF2,F
....................                delay_ms(20); 
2928:  MOVLW  14
292A:  MOVLB  0
292C:  MOVWF  xF0
292E:  CALL   050C
....................                 
....................                b=Y1-(X1*(Y1-Y0)/(X1-X0)); 
2932:  BSF    FD8.1
2934:  MOVFF  B4,E5
2938:  MOVFF  B3,E4
293C:  MOVFF  B2,E3
2940:  MOVFF  B1,E2
2944:  MOVFF  AC,E9
2948:  MOVFF  AB,E8
294C:  MOVFF  AA,E7
2950:  MOVFF  A9,E6
2954:  CALL   0AC6
2958:  MOVFF  B0,ED
295C:  MOVFF  AF,EC
2960:  MOVFF  AE,EB
2964:  MOVFF  AD,EA
2968:  MOVFF  03,F1
296C:  MOVFF  02,F0
2970:  MOVFF  01,EF
2974:  MOVFF  00,EE
2978:  CALL   11E6
297C:  MOVFF  00,D9
2980:  MOVFF  01,DA
2984:  MOVFF  02,DB
2988:  MOVFF  03,DC
298C:  BSF    FD8.1
298E:  MOVFF  B0,E5
2992:  MOVFF  AF,E4
2996:  MOVFF  AE,E3
299A:  MOVFF  AD,E2
299E:  MOVFF  A8,E9
29A2:  MOVFF  A7,E8
29A6:  MOVFF  A6,E7
29AA:  MOVFF  A5,E6
29AE:  CALL   0AC6
29B2:  MOVFF  DC,E5
29B6:  MOVFF  DB,E4
29BA:  MOVFF  DA,E3
29BE:  MOVFF  D9,E2
29C2:  MOVFF  03,E9
29C6:  MOVFF  02,E8
29CA:  MOVFF  01,E7
29CE:  MOVFF  00,E6
29D2:  CALL   096C
29D6:  BSF    FD8.1
29D8:  MOVFF  B4,E5
29DC:  MOVFF  B3,E4
29E0:  MOVFF  B2,E3
29E4:  MOVFF  B1,E2
29E8:  MOVFF  03,E9
29EC:  MOVFF  02,E8
29F0:  MOVFF  01,E7
29F4:  MOVFF  00,E6
29F8:  CALL   0AC6
29FC:  MOVFF  03,C8
2A00:  MOVFF  02,C7
2A04:  MOVFF  01,C6
2A08:  MOVFF  00,C5
....................                if(b>=0){ 
2A0C:  CLRF   xE5
2A0E:  CLRF   xE4
2A10:  CLRF   xE3
2A12:  CLRF   xE2
2A14:  MOVFF  C8,E9
2A18:  MOVFF  C7,E8
2A1C:  MOVFF  C6,E7
2A20:  MOVFF  C5,E6
2A24:  CALL   0D30
2A28:  BC    2A2C
2A2A:  BNZ   2A64
....................                   negativo=10;write_eeprom(60,negativo);delay_ms(20); 
2A2C:  MOVLW  0A
2A2E:  MOVWF  28
2A30:  MOVLW  3C
2A32:  MOVWF  FA9
2A34:  MOVFF  28,FA8
2A38:  BCF    FA6.6
2A3A:  BCF    FA6.7
2A3C:  BSF    FA6.2
2A3E:  MOVF   FF2,W
2A40:  MOVWF  00
2A42:  BCF    FF2.7
2A44:  MOVLB  F
2A46:  MOVLW  55
2A48:  MOVWF  FA7
2A4A:  MOVLW  AA
2A4C:  MOVWF  FA7
2A4E:  BSF    FA6.1
2A50:  BTFSC  FA6.1
2A52:  BRA    2A50
2A54:  BCF    FA6.2
2A56:  MOVF   00,W
2A58:  IORWF  FF2,F
2A5A:  MOVLW  14
2A5C:  MOVLB  0
2A5E:  MOVWF  xF0
2A60:  CALL   050C
....................                } 
....................                if(b<0){ 
2A64:  MOVFF  C8,E5
2A68:  MOVFF  C7,E4
2A6C:  MOVFF  C6,E3
2A70:  MOVFF  C5,E2
2A74:  CLRF   xE9
2A76:  CLRF   xE8
2A78:  CLRF   xE7
2A7A:  CLRF   xE6
2A7C:  CALL   0D30
2A80:  BNC   2ABA
....................                   negativo=20;write_eeprom(60,negativo);delay_ms(20); 
2A82:  MOVLW  14
2A84:  MOVWF  28
2A86:  MOVLW  3C
2A88:  MOVWF  FA9
2A8A:  MOVFF  28,FA8
2A8E:  BCF    FA6.6
2A90:  BCF    FA6.7
2A92:  BSF    FA6.2
2A94:  MOVF   FF2,W
2A96:  MOVWF  00
2A98:  BCF    FF2.7
2A9A:  MOVLB  F
2A9C:  MOVLW  55
2A9E:  MOVWF  FA7
2AA0:  MOVLW  AA
2AA2:  MOVWF  FA7
2AA4:  BSF    FA6.1
2AA6:  BTFSC  FA6.1
2AA8:  BRA    2AA6
2AAA:  BCF    FA6.2
2AAC:  MOVF   00,W
2AAE:  IORWF  FF2,F
2AB0:  MOVLW  14
2AB2:  MOVLB  0
2AB4:  MOVWF  xF0
2AB6:  CALL   050C
....................                } 
....................                b=abs(b); 
2ABA:  MOVFF  C5,00
2ABE:  MOVFF  C6,01
2AC2:  MOVFF  C7,02
2AC6:  MOVFF  C8,03
2ACA:  BCF    01.7
2ACC:  MOVFF  C8,C8
2AD0:  MOVFF  C7,C7
2AD4:  MOVFF  01,C6
2AD8:  MOVFF  C5,C5
....................                bInt=(int8)b; 
2ADC:  MOVFF  C8,DC
2AE0:  MOVFF  C7,DB
2AE4:  MOVFF  C6,DA
2AE8:  MOVFF  C5,D9
2AEC:  CALL   1518
2AF0:  MOVFF  01,2F
....................                tmp=b-bInt; 
2AF4:  CLRF   xE4
2AF6:  MOVFF  2F,E3
2AFA:  CALL   06FE
2AFE:  BSF    FD8.1
2B00:  MOVFF  C8,E5
2B04:  MOVFF  C7,E4
2B08:  MOVFF  C6,E3
2B0C:  MOVFF  C5,E2
2B10:  MOVFF  03,E9
2B14:  MOVFF  02,E8
2B18:  MOVFF  01,E7
2B1C:  MOVFF  00,E6
2B20:  CALL   0AC6
2B24:  MOVFF  03,D0
2B28:  MOVFF  02,CF
2B2C:  MOVFF  01,CE
2B30:  MOVFF  00,CD
....................                bDec=tmp*100; 
2B34:  MOVFF  D0,ED
2B38:  MOVFF  CF,EC
2B3C:  MOVFF  CE,EB
2B40:  MOVFF  CD,EA
2B44:  CLRF   xF1
2B46:  CLRF   xF0
2B48:  MOVLW  48
2B4A:  MOVWF  xEF
2B4C:  MOVLW  85
2B4E:  MOVWF  xEE
2B50:  CALL   11E6
2B54:  MOVFF  03,DC
2B58:  MOVFF  02,DB
2B5C:  MOVFF  01,DA
2B60:  MOVFF  00,D9
2B64:  CALL   1518
2B68:  MOVFF  01,30
....................                Alarma_on; 
2B6C:  BSF    F8C.3
2B6E:  BCF    F95.3
....................                write_eeprom(20,bInt); 
2B70:  MOVLW  14
2B72:  MOVWF  FA9
2B74:  MOVFF  2F,FA8
2B78:  BCF    FA6.6
2B7A:  BCF    FA6.7
2B7C:  BSF    FA6.2
2B7E:  MOVF   FF2,W
2B80:  MOVWF  00
2B82:  BCF    FF2.7
2B84:  MOVLB  F
2B86:  MOVLW  55
2B88:  MOVWF  FA7
2B8A:  MOVLW  AA
2B8C:  MOVWF  FA7
2B8E:  BSF    FA6.1
2B90:  BTFSC  FA6.1
2B92:  BRA    2B90
2B94:  BCF    FA6.2
2B96:  MOVF   00,W
2B98:  IORWF  FF2,F
....................                delay_ms(20); 
2B9A:  MOVLW  14
2B9C:  MOVLB  0
2B9E:  MOVWF  xF0
2BA0:  CALL   050C
....................                write_eeprom(21,bDec); 
2BA4:  MOVLW  15
2BA6:  MOVWF  FA9
2BA8:  MOVFF  30,FA8
2BAC:  BCF    FA6.6
2BAE:  BCF    FA6.7
2BB0:  BSF    FA6.2
2BB2:  MOVF   FF2,W
2BB4:  MOVWF  00
2BB6:  BCF    FF2.7
2BB8:  MOVLB  F
2BBA:  MOVLW  55
2BBC:  MOVWF  FA7
2BBE:  MOVLW  AA
2BC0:  MOVWF  FA7
2BC2:  BSF    FA6.1
2BC4:  BTFSC  FA6.1
2BC6:  BRA    2BC4
2BC8:  BCF    FA6.2
2BCA:  MOVF   00,W
2BCC:  IORWF  FF2,F
....................                delay_ms(200); 
2BCE:  MOVLW  C8
2BD0:  MOVLB  0
2BD2:  MOVWF  xF0
2BD4:  CALL   050C
....................                printf(lcd_putc,"\f"); 
2BD8:  MOVLW  0C
2BDA:  MOVWF  xEA
2BDC:  CALL   0668
....................                lcd_gotoxy(1,2); 
2BE0:  MOVLW  01
2BE2:  MOVWF  xEB
2BE4:  MOVLW  02
2BE6:  MOVWF  xEC
2BE8:  CALL   0606
....................                printf(lcd_putc,"   Calibracion   "); 
2BEC:  MOVLW  42
2BEE:  MOVWF  FF6
2BF0:  MOVLW  03
2BF2:  MOVWF  FF7
2BF4:  CALL   10FC
....................                lcd_gotoxy(1,3); 
2BF8:  MOVLW  01
2BFA:  MOVWF  xEB
2BFC:  MOVLW  03
2BFE:  MOVWF  xEC
2C00:  CALL   0606
....................                printf(lcd_putc,"     Exitosa     "); 
2C04:  MOVLW  54
2C06:  MOVWF  FF6
2C08:  MOVLW  03
2C0A:  MOVWF  FF7
2C0C:  CALL   10FC
....................                delay_ms(500); 
2C10:  MOVLW  02
2C12:  MOVWF  xD9
2C14:  MOVLW  FA
2C16:  MOVWF  xF0
2C18:  CALL   050C
2C1C:  DECFSZ xD9,F
2C1E:  BRA    2C14
....................                printf(lcd_putc,"\f");  
2C20:  MOVLW  0C
2C22:  MOVWF  xEA
2C24:  CALL   0668
....................                punto=1; 
2C28:  MOVLW  01
2C2A:  MOVWF  27
....................                Menu=100; 
2C2C:  MOVLW  64
2C2E:  MOVWF  19
....................                Alarma_off; 
2C30:  BCF    F8C.3
2C32:  BCF    F95.3
....................             } 
....................          } 
....................       } 
....................        
....................       if(tleft>30){ 
2C34:  MOVF   4C,F
2C36:  BNZ   2C3E
2C38:  MOVF   4B,W
2C3A:  SUBLW  1E
2C3C:  BC    2D36
....................          Menu=1;paso=0;delay_ms(200);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");punto=1; 
2C3E:  MOVLW  01
2C40:  MOVWF  19
2C42:  CLRF   35
2C44:  MOVLW  C8
2C46:  MOVWF  xF0
2C48:  CALL   050C
2C4C:  MOVLW  02
2C4E:  MOVWF  1C
2C50:  MOVWF  1E
2C52:  MOVLW  0C
2C54:  MOVWF  xEA
2C56:  CALL   0668
2C5A:  MOVLW  01
2C5C:  MOVWF  27
....................          X0=read_eeprom(30); 
2C5E:  MOVFF  FF2,D9
2C62:  BCF    FF2.7
2C64:  MOVLW  1E
2C66:  MOVWF  FA9
2C68:  BCF    FA6.6
2C6A:  BCF    FA6.7
2C6C:  BSF    FA6.0
2C6E:  MOVF   FA8,W
2C70:  BTFSC  xD9.7
2C72:  BSF    FF2.7
2C74:  CLRF   xE4
2C76:  MOVWF  xE3
2C78:  CALL   06FE
2C7C:  MOVFF  03,A8
2C80:  MOVFF  02,A7
2C84:  MOVFF  01,A6
2C88:  MOVFF  00,A5
....................          Y0Int=read_eeprom(32);Y0Dec=read_eeprom(33); 
2C8C:  MOVFF  FF2,D9
2C90:  BCF    FF2.7
2C92:  MOVLW  20
2C94:  MOVWF  FA9
2C96:  BCF    FA6.6
2C98:  BCF    FA6.7
2C9A:  BSF    FA6.0
2C9C:  MOVF   FA8,W
2C9E:  BTFSC  xD9.7
2CA0:  BSF    FF2.7
2CA2:  MOVWF  31
2CA4:  MOVFF  FF2,D9
2CA8:  BCF    FF2.7
2CAA:  MOVLW  21
2CAC:  MOVWF  FA9
2CAE:  BCF    FA6.6
2CB0:  BCF    FA6.7
2CB2:  BSF    FA6.0
2CB4:  MOVF   FA8,W
2CB6:  BTFSC  xD9.7
2CB8:  BSF    FF2.7
2CBA:  MOVWF  32
....................          tmp=Y0Dec/10.0; 
2CBC:  CLRF   xE4
2CBE:  MOVFF  32,E3
2CC2:  CALL   06FE
2CC6:  MOVFF  03,E5
2CCA:  MOVFF  02,E4
2CCE:  MOVFF  01,E3
2CD2:  MOVFF  00,E2
2CD6:  CLRF   xE9
2CD8:  CLRF   xE8
2CDA:  MOVLW  20
2CDC:  MOVWF  xE7
2CDE:  MOVLW  82
2CE0:  MOVWF  xE6
2CE2:  CALL   096C
2CE6:  MOVFF  03,D0
2CEA:  MOVFF  02,CF
2CEE:  MOVFF  01,CE
2CF2:  MOVFF  00,CD
....................          Y0=Y0Int+tmp; 
2CF6:  CLRF   xE4
2CF8:  MOVFF  31,E3
2CFC:  CALL   06FE
2D00:  BCF    FD8.1
2D02:  MOVFF  03,E5
2D06:  MOVFF  02,E4
2D0A:  MOVFF  01,E3
2D0E:  MOVFF  00,E2
2D12:  MOVFF  D0,E9
2D16:  MOVFF  CF,E8
2D1A:  MOVFF  CE,E7
2D1E:  MOVFF  CD,E6
2D22:  CALL   0AC6
2D26:  MOVFF  03,AC
2D2A:  MOVFF  02,AB
2D2E:  MOVFF  01,AA
2D32:  MOVFF  00,A9
....................       }   
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de Media Movil 
2D36:  MOVF   19,W
2D38:  SUBLW  04
2D3A:  BTFSS  FD8.2
2D3C:  BRA    2E58
....................     
....................    lcd_gotoxy(1,1); 
2D3E:  MOVLW  01
2D40:  MOVWF  xEB
2D42:  MOVWF  xEC
2D44:  CALL   0606
....................    printf(lcd_putc,"    Media   Movil   "); 
2D48:  MOVLW  66
2D4A:  MOVWF  FF6
2D4C:  MOVLW  03
2D4E:  MOVWF  FF7
2D50:  CALL   10FC
....................    lcd_gotoxy(1,2); 
2D54:  MOVLW  01
2D56:  MOVWF  xEB
2D58:  MOVLW  02
2D5A:  MOVWF  xEC
2D5C:  CALL   0606
....................    printf(lcd_putc,"    Ingrese valor   "); 
2D60:  MOVLW  7C
2D62:  MOVWF  FF6
2D64:  MOVLW  03
2D66:  MOVWF  FF7
2D68:  CALL   10FC
....................    lcd_gotoxy(1,3); 
2D6C:  MOVLW  01
2D6E:  MOVWF  xEB
2D70:  MOVLW  03
2D72:  MOVWF  xEC
2D74:  CALL   0606
....................    printf(lcd_putc,"        %02u   ",MediaMovil);  
2D78:  MOVLW  92
2D7A:  MOVWF  FF6
2D7C:  MOVLW  03
2D7E:  MOVWF  FF7
2D80:  MOVLW  08
2D82:  MOVWF  xDD
2D84:  CALL   11C6
2D88:  MOVFF  26,DD
2D8C:  MOVLW  01
2D8E:  MOVWF  xDE
2D90:  CALL   1578
2D94:  MOVLW  20
2D96:  MOVWF  xEA
2D98:  CALL   0668
2D9C:  MOVLW  20
2D9E:  MOVWF  xEA
2DA0:  CALL   0668
2DA4:  MOVLW  20
2DA6:  MOVWF  xEA
2DA8:  CALL   0668
....................     
....................           
....................    if(MediaMovil>16){ 
2DAC:  MOVF   26,W
2DAE:  SUBLW  10
2DB0:  BC    2DB6
....................       MediaMovil=16; 
2DB2:  MOVLW  10
2DB4:  MOVWF  26
....................    } 
....................     
....................    if(tup>30){ 
2DB6:  MOVF   46,F
2DB8:  BNZ   2DC0
2DBA:  MOVF   45,W
2DBC:  SUBLW  1E
2DBE:  BC    2DD0
....................       if(MediaMovil<16){ 
2DC0:  MOVF   26,W
2DC2:  SUBLW  0F
2DC4:  BNC   2DD0
....................          MediaMovil++;delay_ms(50); 
2DC6:  INCF   26,F
2DC8:  MOVLW  32
2DCA:  MOVWF  xF0
2DCC:  CALL   050C
....................       } 
....................    } 
....................     
....................    if(tdown>30){ 
2DD0:  MOVF   48,F
2DD2:  BNZ   2DDA
2DD4:  MOVF   47,W
2DD6:  SUBLW  1E
2DD8:  BC    2DE8
....................       if(MediaMovil>0){ 
2DDA:  MOVF   26,F
2DDC:  BZ    2DE8
....................          MediaMovil--;delay_ms(50); 
2DDE:  DECF   26,F
2DE0:  MOVLW  32
2DE2:  MOVWF  xF0
2DE4:  CALL   050C
....................       } 
....................    } 
....................     
....................    if(tright>30 && tleft>30){ 
2DE8:  MOVF   4A,F
2DEA:  BNZ   2DF2
2DEC:  MOVF   49,W
2DEE:  SUBLW  1E
2DF0:  BC    2E58
2DF2:  MOVF   4C,F
2DF4:  BNZ   2DFC
2DF6:  MOVF   4B,W
2DF8:  SUBLW  1E
2DFA:  BC    2E58
....................       write_eeprom(5,MediaMovil); 
2DFC:  MOVLW  05
2DFE:  MOVWF  FA9
2E00:  MOVFF  26,FA8
2E04:  BCF    FA6.6
2E06:  BCF    FA6.7
2E08:  BSF    FA6.2
2E0A:  MOVF   FF2,W
2E0C:  MOVWF  00
2E0E:  BCF    FF2.7
2E10:  MOVLB  F
2E12:  MOVLW  55
2E14:  MOVWF  FA7
2E16:  MOVLW  AA
2E18:  MOVWF  FA7
2E1A:  BSF    FA6.1
2E1C:  BTFSC  FA6.1
2E1E:  BRA    2E1C
2E20:  BCF    FA6.2
2E22:  MOVF   00,W
2E24:  IORWF  FF2,F
....................       delay_ms(100); 
2E26:  MOVLW  64
2E28:  MOVLB  0
2E2A:  MOVWF  xF0
2E2C:  CALL   050C
....................       MensajeGuardado(); 
2E30:  CALL   1634
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E34:  MOVLW  01
2E36:  MOVWF  19
2E38:  CLRF   35
2E3A:  MOVLW  02
2E3C:  MOVWF  xD9
2E3E:  MOVLW  FA
2E40:  MOVWF  xF0
2E42:  CALL   050C
2E46:  DECFSZ xD9,F
2E48:  BRA    2E3E
2E4A:  MOVLW  02
2E4C:  MOVWF  1C
2E4E:  MOVWF  1E
2E50:  MOVLW  0C
2E52:  MOVWF  xEA
2E54:  CALL   0668
....................    } 
....................   } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Tiempo de Renovación de Agua 
2E58:  MOVF   19,W
2E5A:  SUBLW  05
2E5C:  BTFSS  FD8.2
2E5E:  BRA    2F78
....................     
....................    lcd_gotoxy(1,1); 
2E60:  MOVLW  01
2E62:  MOVWF  xEB
2E64:  MOVWF  xEC
2E66:  CALL   0606
....................    printf(lcd_putc,"Renovacion   Liquido"); 
2E6A:  MOVLW  A2
2E6C:  MOVWF  FF6
2E6E:  MOVLW  03
2E70:  MOVWF  FF7
2E72:  CALL   10FC
....................    lcd_gotoxy(1,2); 
2E76:  MOVLW  01
2E78:  MOVWF  xEB
2E7A:  MOVLW  02
2E7C:  MOVWF  xEC
2E7E:  CALL   0606
....................    printf(lcd_putc,"    Ingrese valor   "); 
2E82:  MOVLW  B8
2E84:  MOVWF  FF6
2E86:  MOVLW  03
2E88:  MOVWF  FF7
2E8A:  CALL   10FC
....................    lcd_gotoxy(1,3); 
2E8E:  MOVLW  01
2E90:  MOVWF  xEB
2E92:  MOVLW  03
2E94:  MOVWF  xEC
2E96:  CALL   0606
....................    printf(lcd_putc,"   Tiempo:%03u horas ",tiempoRenovacion);  
2E9A:  MOVLW  CE
2E9C:  MOVWF  FF6
2E9E:  MOVLW  03
2EA0:  MOVWF  FF7
2EA2:  MOVLW  0A
2EA4:  MOVWF  xDD
2EA6:  CALL   11C6
2EAA:  MOVFF  2C,DD
2EAE:  MOVLW  03
2EB0:  MOVWF  xDE
2EB2:  CALL   1578
2EB6:  MOVLW  DC
2EB8:  MOVWF  FF6
2EBA:  MOVLW  03
2EBC:  MOVWF  FF7
2EBE:  MOVLW  07
2EC0:  MOVWF  xDD
2EC2:  CALL   11C6
....................     
....................           
....................    if(tiempoRenovacion>100) 
2EC6:  MOVF   2C,W
2EC8:  SUBLW  64
2ECA:  BC    2ED0
....................       tiempoRenovacion=100; 
2ECC:  MOVLW  64
2ECE:  MOVWF  2C
....................    if(tiempoRenovacion<1) 
2ED0:  MOVF   2C,F
2ED2:  BNZ   2ED8
....................       tiempoRenovacion=1; 
2ED4:  MOVLW  01
2ED6:  MOVWF  2C
....................     
....................    if(tup>30){       
2ED8:  MOVF   46,F
2EDA:  BNZ   2EE2
2EDC:  MOVF   45,W
2EDE:  SUBLW  1E
2EE0:  BC    2EEC
....................       tiempoRenovacion++;delay_ms(50); 
2EE2:  INCF   2C,F
2EE4:  MOVLW  32
2EE6:  MOVWF  xF0
2EE8:  CALL   050C
....................    } 
....................     
....................    if(tdown>30){       
2EEC:  MOVF   48,F
2EEE:  BNZ   2EF6
2EF0:  MOVF   47,W
2EF2:  SUBLW  1E
2EF4:  BC    2F00
....................       tiempoRenovacion--;delay_ms(50); 
2EF6:  DECF   2C,F
2EF8:  MOVLW  32
2EFA:  MOVWF  xF0
2EFC:  CALL   050C
....................    } 
....................     
....................    if(tright>30 && tleft>30){ 
2F00:  MOVF   4A,F
2F02:  BNZ   2F0A
2F04:  MOVF   49,W
2F06:  SUBLW  1E
2F08:  BC    2F78
2F0A:  MOVF   4C,F
2F0C:  BNZ   2F14
2F0E:  MOVF   4B,W
2F10:  SUBLW  1E
2F12:  BC    2F78
....................       write_eeprom(6,tiempoRenovacion); 
2F14:  MOVLW  06
2F16:  MOVWF  FA9
2F18:  MOVFF  2C,FA8
2F1C:  BCF    FA6.6
2F1E:  BCF    FA6.7
2F20:  BSF    FA6.2
2F22:  MOVF   FF2,W
2F24:  MOVWF  00
2F26:  BCF    FF2.7
2F28:  MOVLB  F
2F2A:  MOVLW  55
2F2C:  MOVWF  FA7
2F2E:  MOVLW  AA
2F30:  MOVWF  FA7
2F32:  BSF    FA6.1
2F34:  BTFSC  FA6.1
2F36:  BRA    2F34
2F38:  BCF    FA6.2
2F3A:  MOVF   00,W
2F3C:  IORWF  FF2,F
....................       delay_ms(500); 
2F3E:  MOVLW  02
2F40:  MOVLB  0
2F42:  MOVWF  xD9
2F44:  MOVLW  FA
2F46:  MOVWF  xF0
2F48:  CALL   050C
2F4C:  DECFSZ xD9,F
2F4E:  BRA    2F44
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2F50:  MOVLW  01
2F52:  MOVWF  19
2F54:  CLRF   35
2F56:  MOVLW  02
2F58:  MOVWF  xD9
2F5A:  MOVLW  FA
2F5C:  MOVWF  xF0
2F5E:  CALL   050C
2F62:  DECFSZ xD9,F
2F64:  BRA    2F5A
2F66:  MOVLW  02
2F68:  MOVWF  1C
2F6A:  MOVWF  1E
2F6C:  MOVLW  0C
2F6E:  MOVWF  xEA
2F70:  CALL   0668
....................       MensajeGuardado(); 
2F74:  CALL   1634
....................    } 
....................   } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Carga Inicial de Base 
2F78:  MOVF   19,W
2F7A:  SUBLW  06
2F7C:  BTFSS  FD8.2
2F7E:  BRA    30FA
....................     
....................    lcd_gotoxy(1,1); 
2F80:  MOVLW  01
2F82:  MOVWF  xEB
2F84:  MOVWF  xEC
2F86:  CALL   0606
....................    printf(lcd_putc," Carga Inicial Base "); 
2F8A:  MOVLW  E4
2F8C:  MOVWF  FF6
2F8E:  MOVLW  03
2F90:  MOVWF  FF7
2F92:  CALL   10FC
....................    lcd_gotoxy(1,2); 
2F96:  MOVLW  01
2F98:  MOVWF  xEB
2F9A:  MOVLW  02
2F9C:  MOVWF  xEC
2F9E:  CALL   0606
....................    printf(lcd_putc,"Ingrese valor en ml "); 
2FA2:  MOVLW  FA
2FA4:  MOVWF  FF6
2FA6:  MOVLW  03
2FA8:  MOVWF  FF7
2FAA:  CALL   10FC
....................    lcd_gotoxy(1,3); 
2FAE:  MOVLW  01
2FB0:  MOVWF  xEB
2FB2:  MOVLW  03
2FB4:  MOVWF  xEC
2FB6:  CALL   0606
....................    printf(lcd_putc,"   Base:%04Lu ml  ",cargaInicial);  
2FBA:  MOVLW  10
2FBC:  MOVWF  FF6
2FBE:  MOVLW  04
2FC0:  MOVWF  FF7
2FC2:  MOVLW  08
2FC4:  MOVWF  xDD
2FC6:  CALL   11C6
2FCA:  MOVLW  09
2FCC:  MOVWF  FE9
2FCE:  MOVFF  40,DA
2FD2:  MOVFF  3F,D9
2FD6:  GOTO   16AC
2FDA:  MOVLW  1D
2FDC:  MOVWF  FF6
2FDE:  MOVLW  04
2FE0:  MOVWF  FF7
2FE2:  MOVLW  05
2FE4:  MOVWF  xDD
2FE6:  CALL   11C6
....................     
....................           
....................    if(cargaInicial>5000) 
2FEA:  MOVF   40,W
2FEC:  SUBLW  12
2FEE:  BC    3002
2FF0:  XORLW  FF
2FF2:  BNZ   2FFA
2FF4:  MOVF   3F,W
2FF6:  SUBLW  88
2FF8:  BC    3002
....................       cargaInicial=5000; 
2FFA:  MOVLW  13
2FFC:  MOVWF  40
2FFE:  MOVLW  88
3000:  MOVWF  3F
....................     
....................    if(cargaInicial<100) 
3002:  MOVF   40,F
3004:  BNZ   3012
3006:  MOVF   3F,W
3008:  SUBLW  63
300A:  BNC   3012
....................       cargaInicial=100; 
300C:  CLRF   40
300E:  MOVLW  64
3010:  MOVWF  3F
....................     
....................    if(tup>30){ 
3012:  MOVF   46,F
3014:  BNZ   301C
3016:  MOVF   45,W
3018:  SUBLW  1E
301A:  BC    302C
....................       cargaInicial+=10;delay_ms(50); 
301C:  MOVLW  0A
301E:  ADDWF  3F,F
3020:  MOVLW  00
3022:  ADDWFC 40,F
3024:  MOVLW  32
3026:  MOVWF  xF0
3028:  CALL   050C
....................    } 
....................     
....................    if(tdown>30){ 
302C:  MOVF   48,F
302E:  BNZ   3036
3030:  MOVF   47,W
3032:  SUBLW  1E
3034:  BC    3046
....................       cargaInicial-=10;delay_ms(50); 
3036:  MOVLW  0A
3038:  SUBWF  3F,F
303A:  MOVLW  00
303C:  SUBWFB 40,F
303E:  MOVLW  32
3040:  MOVWF  xF0
3042:  CALL   050C
....................    } 
....................     
....................    if(tright>30 && tleft>30){ 
3046:  MOVF   4A,F
3048:  BNZ   3050
304A:  MOVF   49,W
304C:  SUBLW  1E
304E:  BC    30FA
3050:  MOVF   4C,F
3052:  BNZ   305A
3054:  MOVF   4B,W
3056:  SUBLW  1E
3058:  BC    30FA
....................       write_eeprom(8,make8(cargaInicial,0)); 
305A:  MOVFF  3F,D9
305E:  MOVLW  08
3060:  MOVWF  FA9
3062:  MOVFF  D9,FA8
3066:  BCF    FA6.6
3068:  BCF    FA6.7
306A:  BSF    FA6.2
306C:  MOVF   FF2,W
306E:  MOVWF  00
3070:  BCF    FF2.7
3072:  MOVLB  F
3074:  MOVLW  55
3076:  MOVWF  FA7
3078:  MOVLW  AA
307A:  MOVWF  FA7
307C:  BSF    FA6.1
307E:  BTFSC  FA6.1
3080:  BRA    307E
3082:  BCF    FA6.2
3084:  MOVF   00,W
3086:  IORWF  FF2,F
....................       delay_ms(100); 
3088:  MOVLW  64
308A:  MOVLB  0
308C:  MOVWF  xF0
308E:  CALL   050C
....................       write_eeprom(9,make8(cargaInicial,1)); 
3092:  MOVFF  40,D9
3096:  MOVLW  09
3098:  MOVWF  FA9
309A:  MOVFF  D9,FA8
309E:  BCF    FA6.6
30A0:  BCF    FA6.7
30A2:  BSF    FA6.2
30A4:  MOVF   FF2,W
30A6:  MOVWF  00
30A8:  BCF    FF2.7
30AA:  MOVLB  F
30AC:  MOVLW  55
30AE:  MOVWF  FA7
30B0:  MOVLW  AA
30B2:  MOVWF  FA7
30B4:  BSF    FA6.1
30B6:  BTFSC  FA6.1
30B8:  BRA    30B6
30BA:  BCF    FA6.2
30BC:  MOVF   00,W
30BE:  IORWF  FF2,F
....................       delay_ms(500); 
30C0:  MOVLW  02
30C2:  MOVLB  0
30C4:  MOVWF  xD9
30C6:  MOVLW  FA
30C8:  MOVWF  xF0
30CA:  CALL   050C
30CE:  DECFSZ xD9,F
30D0:  BRA    30C6
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
30D2:  MOVLW  01
30D4:  MOVWF  19
30D6:  CLRF   35
30D8:  MOVLW  02
30DA:  MOVWF  xD9
30DC:  MOVLW  FA
30DE:  MOVWF  xF0
30E0:  CALL   050C
30E4:  DECFSZ xD9,F
30E6:  BRA    30DC
30E8:  MOVLW  02
30EA:  MOVWF  1C
30EC:  MOVWF  1E
30EE:  MOVLW  0C
30F0:  MOVWF  xEA
30F2:  CALL   0668
....................       MensajeGuardado(); 
30F6:  CALL   1634
....................    } 
....................   } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de Mantenimiento 
30FA:  MOVF   19,W
30FC:  SUBLW  07
30FE:  BTFSS  FD8.2
3100:  BRA    3312
....................     
....................    lcd_gotoxy(1,1); 
3102:  MOVLW  01
3104:  MOVWF  xEB
3106:  MOVWF  xEC
3108:  CALL   0606
....................    printf(lcd_putc,"MTO.  pH:%2.1f ",pVpH);    
310C:  MOVLW  24
310E:  MOVWF  FF6
3110:  MOVLW  04
3112:  MOVWF  FF7
3114:  MOVLW  09
3116:  MOVWF  xDD
3118:  CALL   11C6
311C:  MOVLW  01
311E:  MOVWF  FE9
3120:  MOVFF  BC,E0
3124:  MOVFF  BB,DF
3128:  MOVFF  BA,DE
312C:  MOVFF  B9,DD
3130:  MOVWF  xE1
3132:  CALL   1392
3136:  MOVLW  20
3138:  MOVWF  xEA
313A:  CALL   0668
....................    lcd_gotoxy(1,2); 
313E:  MOVLW  01
3140:  MOVWF  xEB
3142:  MOVLW  02
3144:  MOVWF  xEC
3146:  CALL   0606
....................    printf(lcd_putc,"b:%2.2f X=%2.0f X1=%2.0f" ,b,X0,X1); 
314A:  MOVLW  62
314C:  MOVWF  xEA
314E:  CALL   0668
3152:  MOVLW  3A
3154:  MOVWF  xEA
3156:  CALL   0668
315A:  MOVLW  89
315C:  MOVWF  FE9
315E:  MOVFF  C8,E0
3162:  MOVFF  C7,DF
3166:  MOVFF  C6,DE
316A:  MOVFF  C5,DD
316E:  MOVLW  02
3170:  MOVWF  xE1
3172:  CALL   1392
3176:  MOVLW  20
3178:  MOVWF  xEA
317A:  CALL   0668
317E:  MOVLW  58
3180:  MOVWF  xEA
3182:  CALL   0668
3186:  MOVLW  3D
3188:  MOVWF  xEA
318A:  CALL   0668
318E:  MOVLW  01
3190:  MOVWF  FE9
3192:  MOVFF  A8,E0
3196:  MOVFF  A7,DF
319A:  MOVFF  A6,DE
319E:  MOVFF  A5,DD
31A2:  CLRF   xE1
31A4:  CALL   1392
31A8:  MOVLW  43
31AA:  MOVWF  FF6
31AC:  MOVLW  04
31AE:  MOVWF  FF7
31B0:  MOVLW  04
31B2:  MOVWF  xDD
31B4:  CALL   11C6
31B8:  MOVLW  01
31BA:  MOVWF  FE9
31BC:  MOVFF  B0,E0
31C0:  MOVFF  AF,DF
31C4:  MOVFF  AE,DE
31C8:  MOVFF  AD,DD
31CC:  CLRF   xE1
31CE:  CALL   1392
....................    lcd_gotoxy(1,3); 
31D2:  MOVLW  01
31D4:  MOVWF  xEB
31D6:  MOVLW  03
31D8:  MOVWF  xEC
31DA:  CALL   0606
....................    printf(lcd_putc,"Y0=%2.1f Y1=%2.1f %02u" ,Y0,Y1,negativo); 
31DE:  MOVLW  59
31E0:  MOVWF  xEA
31E2:  CALL   0668
31E6:  MOVLW  30
31E8:  MOVWF  xEA
31EA:  CALL   0668
31EE:  MOVLW  3D
31F0:  MOVWF  xEA
31F2:  CALL   0668
31F6:  MOVLW  01
31F8:  MOVWF  FE9
31FA:  MOVFF  AC,E0
31FE:  MOVFF  AB,DF
3202:  MOVFF  AA,DE
3206:  MOVFF  A9,DD
320A:  MOVWF  xE1
320C:  CALL   1392
3210:  MOVLW  56
3212:  MOVWF  FF6
3214:  MOVLW  04
3216:  MOVWF  FF7
3218:  MOVLW  04
321A:  MOVWF  xDD
321C:  CALL   11C6
3220:  MOVLW  01
3222:  MOVWF  FE9
3224:  MOVFF  B4,E0
3228:  MOVFF  B3,DF
322C:  MOVFF  B2,DE
3230:  MOVFF  B1,DD
3234:  MOVWF  xE1
3236:  CALL   1392
323A:  MOVLW  20
323C:  MOVWF  xEA
323E:  CALL   0668
3242:  MOVFF  28,DD
3246:  MOVLW  01
3248:  MOVWF  xDE
324A:  CALL   1578
....................    lcd_gotoxy(1,4); 
324E:  MOVLW  01
3250:  MOVWF  xEB
3252:  MOVLW  04
3254:  MOVWF  xEC
3256:  CALL   0606
....................    printf(lcd_putc,"T. Pulso=%02u ADC:%2.0f ",tpulso,sensores(0));    
325A:  CLRF   xDE
325C:  CALL   15E4
3260:  MOVFF  00,D9
3264:  MOVFF  01,DA
3268:  MOVFF  02,DB
326C:  MOVFF  03,DC
3270:  MOVLW  66
3272:  MOVWF  FF6
3274:  MOVLW  04
3276:  MOVWF  FF7
3278:  MOVLW  09
327A:  MOVWF  xDD
327C:  CALL   11C6
3280:  MOVFF  2B,DD
3284:  MOVLW  01
3286:  MOVWF  xDE
3288:  CALL   1578
328C:  MOVLW  73
328E:  MOVWF  FF6
3290:  MOVLW  04
3292:  MOVWF  FF7
3294:  MOVLW  05
3296:  MOVWF  xDD
3298:  CALL   11C6
329C:  MOVLW  01
329E:  MOVWF  FE9
32A0:  MOVFF  DC,E0
32A4:  MOVFF  DB,DF
32A8:  MOVFF  DA,DE
32AC:  MOVFF  D9,DD
32B0:  CLRF   xE1
32B2:  CALL   1392
32B6:  MOVLW  20
32B8:  MOVWF  xEA
32BA:  CALL   0668
....................     
....................    if(tright>30){             
32BE:  MOVF   4A,F
32C0:  BNZ   32C8
32C2:  MOVF   49,W
32C4:  SUBLW  1E
32C6:  BC    32E4
....................       delay_ms(500); 
32C8:  MOVLW  02
32CA:  MOVWF  xD9
32CC:  MOVLW  FA
32CE:  MOVWF  xF0
32D0:  CALL   050C
32D4:  DECFSZ xD9,F
32D6:  BRA    32CC
....................       printf(lcd_putc,"\f"); 
32D8:  MOVLW  0C
32DA:  MOVWF  xEA
32DC:  CALL   0668
....................       Menu=100; 
32E0:  MOVLW  64
32E2:  MOVWF  19
....................    } 
....................     
....................    if(tleft>30){ 
32E4:  MOVF   4C,F
32E6:  BNZ   32EE
32E8:  MOVF   4B,W
32EA:  SUBLW  1E
32EC:  BC    3312
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
32EE:  MOVLW  01
32F0:  MOVWF  19
32F2:  CLRF   35
32F4:  MOVLW  02
32F6:  MOVWF  xD9
32F8:  MOVLW  FA
32FA:  MOVWF  xF0
32FC:  CALL   050C
3300:  DECFSZ xD9,F
3302:  BRA    32F8
3304:  MOVLW  02
3306:  MOVWF  1C
3308:  MOVWF  1E
330A:  MOVLW  0C
330C:  MOVWF  xEA
330E:  CALL   0668
....................    }   
....................   } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
3312:  MOVF   19,W
3314:  SUBLW  64
3316:  BTFSS  FD8.2
3318:  BRA    37C4
....................     
....................    if(visualiza==1){ 
331A:  BTFSS  18.1
331C:  BRA    3492
....................       lcd_gotoxy(1,2); 
331E:  MOVLW  01
3320:  MOVWF  xEB
3322:  MOVLW  02
3324:  MOVWF  xEC
3326:  CALL   0606
....................       printf(lcd_putc,"pH:%2.1f",pVpH); 
332A:  MOVLW  70
332C:  MOVWF  xEA
332E:  CALL   0668
3332:  MOVLW  48
3334:  MOVWF  xEA
3336:  CALL   0668
333A:  MOVLW  3A
333C:  MOVWF  xEA
333E:  CALL   0668
3342:  MOVLW  01
3344:  MOVWF  FE9
3346:  MOVFF  BC,E0
334A:  MOVFF  BB,DF
334E:  MOVFF  BA,DE
3352:  MOVFF  B9,DD
3356:  MOVWF  xE1
3358:  CALL   1392
....................        
....................       lcd_gotoxy(1,3); 
335C:  MOVLW  01
335E:  MOVWF  xEB
3360:  MOVLW  03
3362:  MOVWF  xEC
3364:  CALL   0606
....................       printf(lcd_putc,"Time:%03u:%02u",horas,minutos); 
3368:  MOVLW  80
336A:  MOVWF  FF6
336C:  MOVLW  04
336E:  MOVWF  FF7
3370:  MOVLW  05
3372:  MOVWF  xDD
3374:  CALL   11C6
3378:  MOVFF  23,DD
337C:  MOVLW  03
337E:  MOVWF  xDE
3380:  CALL   1578
3384:  MOVLW  3A
3386:  MOVWF  xEA
3388:  CALL   0668
338C:  MOVFF  22,DD
3390:  MOVLW  01
3392:  MOVWF  xDE
3394:  CALL   1578
....................     
....................       if(estadoba==1){ 
3398:  BTFSS  17.1
339A:  BRA    33BA
....................          lcd_gotoxy(1,4); 
339C:  MOVLW  01
339E:  MOVWF  xEB
33A0:  MOVLW  04
33A2:  MOVWF  xEC
33A4:  CALL   0606
....................          printf(lcd_putc,"BOMBA:ON "); 
33A8:  MOVLW  90
33AA:  MOVWF  FF6
33AC:  MOVLW  04
33AE:  MOVWF  FF7
33B0:  CALL   10FC
....................          EnciendeBomba(); 
33B4:  CALL   1762
....................       }else{ 
33B8:  BRA    33D6
....................          lcd_gotoxy(1,4); 
33BA:  MOVLW  01
33BC:  MOVWF  xEB
33BE:  MOVLW  04
33C0:  MOVWF  xEC
33C2:  CALL   0606
....................          printf(lcd_putc,"BOMBA:OFF"); 
33C6:  MOVLW  9A
33C8:  MOVWF  FF6
33CA:  MOVLW  04
33CC:  MOVWF  FF7
33CE:  CALL   10FC
....................          ApagaBomba(); 
33D2:  CALL   1784
....................       } 
....................     
....................       if(estadobp==1){ 
33D6:  BTFSS  17.0
33D8:  BRA    33F8
....................          lcd_gotoxy(13,4); 
33DA:  MOVLW  0D
33DC:  MOVWF  xEB
33DE:  MOVLW  04
33E0:  MOVWF  xEC
33E2:  CALL   0606
....................          printf(lcd_putc,"BASE:ON "); 
33E6:  MOVLW  A4
33E8:  MOVWF  FF6
33EA:  MOVLW  04
33EC:  MOVWF  FF7
33EE:  CALL   10FC
....................          Peristaltica_on; 
33F2:  BSF    F8B.2
33F4:  BCF    F94.2
....................       }else{ 
33F6:  BRA    3414
....................          lcd_gotoxy(13,4); 
33F8:  MOVLW  0D
33FA:  MOVWF  xEB
33FC:  MOVLW  04
33FE:  MOVWF  xEC
3400:  CALL   0606
....................          printf(lcd_putc,"BASE:OFF"); 
3404:  MOVLW  AE
3406:  MOVWF  FF6
3408:  MOVLW  04
340A:  MOVWF  FF7
340C:  CALL   10FC
....................          Peristaltica_off; 
3410:  BCF    F8B.2
3412:  BCF    F94.2
....................       } 
....................     
....................       if(estadoagua==1){ 
3414:  BTFSS  17.2
3416:  BRA    3436
....................          lcd_gotoxy(13,2); 
3418:  MOVLW  0D
341A:  MOVWF  xEB
341C:  MOVLW  02
341E:  MOVWF  xEC
3420:  CALL   0606
....................          printf(lcd_putc,"AGUA:ON "); 
3424:  MOVLW  B8
3426:  MOVWF  FF6
3428:  MOVLW  04
342A:  MOVWF  FF7
342C:  CALL   10FC
....................          Agua_on; 
3430:  BSF    F8C.2
3432:  BCF    F95.2
....................       }else{ 
3434:  BRA    3452
....................          lcd_gotoxy(13,2); 
3436:  MOVLW  0D
3438:  MOVWF  xEB
343A:  MOVLW  02
343C:  MOVWF  xEC
343E:  CALL   0606
....................          printf(lcd_putc,"AGUA:OFF"); 
3442:  MOVLW  C2
3444:  MOVWF  FF6
3446:  MOVLW  04
3448:  MOVWF  FF7
344A:  CALL   10FC
....................          Agua_off; 
344E:  BCF    F8C.2
3450:  BCF    F95.2
....................       } 
....................        
....................       if(estadode==1){ 
3452:  BTFSS  18.4
3454:  BRA    3474
....................          lcd_gotoxy(13,3); 
3456:  MOVLW  0D
3458:  MOVWF  xEB
345A:  MOVLW  03
345C:  MOVWF  xEC
345E:  CALL   0606
....................          printf(lcd_putc,"DESA:ON "); 
3462:  MOVLW  CC
3464:  MOVWF  FF6
3466:  MOVLW  04
3468:  MOVWF  FF7
346A:  CALL   10FC
....................          Desague_on; 
346E:  BSF    F8C.4
3470:  BCF    F95.4
....................       }else{ 
3472:  BRA    3490
....................          lcd_gotoxy(13,3); 
3474:  MOVLW  0D
3476:  MOVWF  xEB
3478:  MOVLW  03
347A:  MOVWF  xEC
347C:  CALL   0606
....................          printf(lcd_putc,"DESA:OFF"); 
3480:  MOVLW  D6
3482:  MOVWF  FF6
3484:  MOVLW  04
3486:  MOVWF  FF7
3488:  CALL   10FC
....................          Desague_off; 
348C:  BCF    F8C.4
348E:  BCF    F95.4
....................       } 
....................       visualiza=0; 
3490:  BCF    18.1
....................    } 
....................     
....................    if(!AUX){ 
3492:  BSF    F96.2
3494:  BTFSC  F84.2
3496:  BRA    3682
....................       if(activo){ 
3498:  BTFSS  18.5
349A:  BRA    34A6
....................          activo=0; 
349C:  BCF    18.5
....................          estadoba=0; 
349E:  BCF    17.1
....................          estadobp=0; 
34A0:  BCF    17.0
....................          estadode=0; 
34A2:  BCF    18.4
....................          estadoagua=0; 
34A4:  BCF    17.2
....................       } 
....................       if(horas>=tiempoRenovacion){ 
34A6:  MOVF   2C,W
34A8:  SUBWF  23,W
34AA:  BTFSS  FD8.0
34AC:  BRA    362E
....................          renovar=1; 
34AE:  BSF    18.2
....................          if(tRenovacion<1800){ 
34B0:  MOVF   42,W
34B2:  SUBLW  07
34B4:  BNC   34D0
34B6:  BNZ   34BE
34B8:  MOVF   41,W
34BA:  SUBLW  07
34BC:  BNC   34D0
....................             estadode=1; 
34BE:  BSF    18.4
....................             Desague_on; 
34C0:  BSF    F8C.4
34C2:  BCF    F95.4
....................             ApagaBomba(); 
34C4:  CALL   1784
....................             Agua_off; 
34C8:  BCF    F8C.2
34CA:  BCF    F95.2
....................             estadoagua=0; 
34CC:  BCF    17.2
....................          }else{ 
34CE:  BRA    362C
....................             Desague_off; 
34D0:  BCF    F8C.4
34D2:  BCF    F95.4
....................             estadode=0; 
34D4:  BCF    18.4
....................             if(tPeristaltica>=(0.6*cargaInicial)){ 
34D6:  MOVFF  40,E4
34DA:  MOVFF  3F,E3
34DE:  CALL   06FE
34E2:  MOVLW  9A
34E4:  MOVWF  xED
34E6:  MOVLW  99
34E8:  MOVWF  xEC
34EA:  MOVLW  19
34EC:  MOVWF  xEB
34EE:  MOVLW  7E
34F0:  MOVWF  xEA
34F2:  MOVFF  03,F1
34F6:  MOVFF  02,F0
34FA:  MOVFF  01,EF
34FE:  MOVFF  00,EE
3502:  CALL   11E6
3506:  MOVFF  00,D9
350A:  MOVFF  01,DA
350E:  MOVFF  02,DB
3512:  MOVFF  03,DC
3516:  MOVFF  44,E4
351A:  MOVFF  43,E3
351E:  CALL   06FE
3522:  MOVFF  DC,E5
3526:  MOVFF  DB,E4
352A:  MOVFF  DA,E3
352E:  MOVFF  D9,E2
3532:  MOVFF  03,E9
3536:  MOVFF  02,E8
353A:  MOVFF  01,E7
353E:  MOVFF  00,E6
3542:  CALL   0D30
3546:  BC    354A
3548:  BNZ   3554
....................                estadobp=0; 
354A:  BCF    17.0
....................                Peristaltica_off; 
354C:  BCF    F8B.2
354E:  BCF    F94.2
....................                adicionBase=0; 
3550:  BCF    18.3
....................             }else{ 
3552:  BRA    355C
....................                estadobp=1; 
3554:  BSF    17.0
....................                Peristaltica_on; 
3556:  BSF    F8B.2
3558:  BCF    F94.2
....................                adicionBase=1; 
355A:  BSF    18.3
....................             } 
....................             if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
355C:  BSF    F96.0
355E:  BTFSC  F84.0
3560:  BRA    3570
....................                estadoba=0; 
3562:  BCF    17.1
....................                ApagaBomba();                
3564:  CALL   1784
....................                Agua_on; 
3568:  BSF    F8C.2
356A:  BCF    F95.2
....................                estadoagua=1; 
356C:  BSF    17.2
....................             }else{ 
356E:  BRA    362C
....................                if(HIGH){ 
3570:  BSF    F96.1
3572:  BTFSS  F84.1
3574:  BRA    362C
....................                   estadoagua=0; 
3576:  BCF    17.2
....................                   Agua_off; 
3578:  BCF    F8C.2
357A:  BCF    F95.2
....................                   if(!adicionBase){ 
357C:  BTFSC  18.3
357E:  BRA    362C
....................                      renovar=0; 
3580:  BCF    18.2
....................                      tRenovacion=0; 
3582:  CLRF   42
3584:  CLRF   41
....................                      tPeristaltica=0; 
3586:  CLRF   44
3588:  CLRF   43
....................                      horas=0; 
358A:  CLRF   23
....................                      minutos=0; 
358C:  CLRF   22
....................                      segundos=0; 
358E:  CLRF   21
....................                      write_eeprom(50,segundos);delay_ms(20); 
3590:  MOVLW  32
3592:  MOVWF  FA9
3594:  MOVFF  21,FA8
3598:  BCF    FA6.6
359A:  BCF    FA6.7
359C:  BSF    FA6.2
359E:  MOVF   FF2,W
35A0:  MOVWF  00
35A2:  BCF    FF2.7
35A4:  MOVLB  F
35A6:  MOVLW  55
35A8:  MOVWF  FA7
35AA:  MOVLW  AA
35AC:  MOVWF  FA7
35AE:  BSF    FA6.1
35B0:  BTFSC  FA6.1
35B2:  BRA    35B0
35B4:  BCF    FA6.2
35B6:  MOVF   00,W
35B8:  IORWF  FF2,F
35BA:  MOVLW  14
35BC:  MOVLB  0
35BE:  MOVWF  xF0
35C0:  CALL   050C
....................                      write_eeprom(51,minutos);delay_ms(20); 
35C4:  MOVLW  33
35C6:  MOVWF  FA9
35C8:  MOVFF  22,FA8
35CC:  BCF    FA6.6
35CE:  BCF    FA6.7
35D0:  BSF    FA6.2
35D2:  MOVF   FF2,W
35D4:  MOVWF  00
35D6:  BCF    FF2.7
35D8:  MOVLB  F
35DA:  MOVLW  55
35DC:  MOVWF  FA7
35DE:  MOVLW  AA
35E0:  MOVWF  FA7
35E2:  BSF    FA6.1
35E4:  BTFSC  FA6.1
35E6:  BRA    35E4
35E8:  BCF    FA6.2
35EA:  MOVF   00,W
35EC:  IORWF  FF2,F
35EE:  MOVLW  14
35F0:  MOVLB  0
35F2:  MOVWF  xF0
35F4:  CALL   050C
....................                      write_eeprom(52,horas);delay_ms(20); 
35F8:  MOVLW  34
35FA:  MOVWF  FA9
35FC:  MOVFF  23,FA8
3600:  BCF    FA6.6
3602:  BCF    FA6.7
3604:  BSF    FA6.2
3606:  MOVF   FF2,W
3608:  MOVWF  00
360A:  BCF    FF2.7
360C:  MOVLB  F
360E:  MOVLW  55
3610:  MOVWF  FA7
3612:  MOVLW  AA
3614:  MOVWF  FA7
3616:  BSF    FA6.1
3618:  BTFSC  FA6.1
361A:  BRA    3618
361C:  BCF    FA6.2
361E:  MOVF   00,W
3620:  IORWF  FF2,F
3622:  MOVLW  14
3624:  MOVLB  0
3626:  MOVWF  xF0
3628:  CALL   050C
....................                   } 
....................                } 
....................             } 
....................          } 
....................       }else{  
362C:  BRA    3680
....................          if(tright>30){ 
362E:  MOVF   4A,F
3630:  BNZ   3638
3632:  MOVF   49,W
3634:  SUBLW  1E
3636:  BC    3642
....................             if(Flanco == 0){ 
3638:  BTFSC  17.3
363A:  BRA    3640
....................                estadoagua=!estadoagua;Flanco = 1; 
363C:  BTG    17.2
363E:  BSF    17.3
....................             } 
....................          }else{ 
3640:  BRA    3644
....................             Flanco = 0; 
3642:  BCF    17.3
....................          } 
....................           
....................          if(tdown>30){ 
3644:  MOVF   48,F
3646:  BNZ   364E
3648:  MOVF   47,W
364A:  SUBLW  1E
364C:  BC    3660
....................             if(Flanco1 == 0){ 
364E:  BTFSC  17.4
3650:  BRA    365E
....................                estadoba=!estadoba;Flanco1 = 1;delay_ms(30); 
3652:  BTG    17.1
3654:  BSF    17.4
3656:  MOVLW  1E
3658:  MOVWF  xF0
365A:  CALL   050C
....................             } 
....................          }else{ 
365E:  BRA    3662
....................             Flanco1 = 0; 
3660:  BCF    17.4
....................          } 
....................           
....................          if(tleft>30){ 
3662:  MOVF   4C,F
3664:  BNZ   366C
3666:  MOVF   4B,W
3668:  SUBLW  1E
366A:  BC    367E
....................             if(Flanco2 == 0){ 
366C:  BTFSC  17.5
366E:  BRA    367C
....................                estadobp=!estadobp;Flanco2 = 1;delay_ms(30); 
3670:  BTG    17.0
3672:  BSF    17.5
3674:  MOVLW  1E
3676:  MOVWF  xF0
3678:  CALL   050C
....................             } 
....................          }else{ 
367C:  BRA    3680
....................             Flanco2 = 0; 
367E:  BCF    17.5
....................          } 
....................       } 
....................    }else{ 
3680:  BRA    36A6
....................       renovar=0; 
3682:  BCF    18.2
....................       adicionBase=0; 
3684:  BCF    18.3
....................       if(tRenovacion<1800) 
3686:  MOVF   42,W
3688:  SUBLW  07
368A:  BNC   3698
368C:  BNZ   3694
368E:  MOVF   41,W
3690:  SUBLW  07
3692:  BNC   3698
....................          tRenovacion=0; 
3694:  CLRF   42
3696:  CLRF   41
....................       estadode=0; 
3698:  BCF    18.4
....................       estadobp=0; 
369A:  BCF    17.0
....................       Desague_off; 
369C:  BCF    F8C.4
369E:  BCF    F95.4
....................       Peristaltica_off; 
36A0:  BCF    F8B.2
36A2:  BCF    F94.2
....................       activo=1; 
36A4:  BSF    18.5
....................    } 
....................     
.................... // Monitoreo Nivel de Agua//-------------------------------------- 
....................    if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
36A6:  BSF    F96.0
36A8:  BTFSC  F84.0
36AA:  BRA    36DC
....................       estadoba=0; 
36AC:  BCF    17.1
....................       ApagaBomba(); 
36AE:  CALL   1784
....................       lcd_gotoxy(1,1); 
36B2:  MOVLW  01
36B4:  MOVWF  xEB
36B6:  MOVWF  xEC
36B8:  CALL   0606
....................       printf(lcd_putc,"!NIVEL DE AGUA BAJO!"); 
36BC:  MOVLW  E0
36BE:  MOVWF  FF6
36C0:  MOVLW  04
36C2:  MOVWF  FF7
36C4:  CALL   10FC
....................       if(AUX){ 
36C8:  BSF    F96.2
36CA:  BTFSS  F84.2
36CC:  BRA    36D4
....................          Agua_on; 
36CE:  BSF    F8C.2
36D0:  BCF    F95.2
....................          estadoagua=1; 
36D2:  BSF    17.2
....................       } 
....................       SensadoNivelL=0; 
36D4:  BCF    18.0
....................       TiempoSensadoNivelL=0; 
36D6:  CLRF   3C
36D8:  CLRF   3B
....................    }else{ 
36DA:  BRA    3756
....................       lcd_gotoxy(1,1); 
36DC:  MOVLW  01
36DE:  MOVWF  xEB
36E0:  MOVWF  xEC
36E2:  CALL   0606
....................       printf(lcd_putc,"JP SCRUBBER TR:%03u h",tiempoRenovacion); 
36E6:  MOVLW  F6
36E8:  MOVWF  FF6
36EA:  MOVLW  04
36EC:  MOVWF  FF7
36EE:  MOVLW  0F
36F0:  MOVWF  xDD
36F2:  CALL   11C6
36F6:  MOVFF  2C,DD
36FA:  MOVLW  03
36FC:  MOVWF  xDE
36FE:  CALL   1578
3702:  MOVLW  20
3704:  MOVWF  xEA
3706:  CALL   0668
370A:  MOVLW  68
370C:  MOVWF  xEA
370E:  CALL   0668
....................       Alarma_off; 
3712:  BCF    F8C.3
3714:  BCF    F95.3
....................       if(TiempoSensadoNivelL>3){ 
3716:  MOVF   3C,F
3718:  BNZ   3720
371A:  MOVF   3B,W
371C:  SUBLW  03
371E:  BC    3754
....................          SensadoNivelL=0; 
3720:  BCF    18.0
....................          if(AUX){ 
3722:  BSF    F96.2
3724:  BTFSS  F84.2
3726:  BRA    372E
....................             EnciendeBomba(); 
3728:  CALL   1762
....................             estadoba=1; 
372C:  BSF    17.1
....................          } 
....................          if(HIGH){          
372E:  BSF    F96.1
3730:  BTFSS  F84.1
3732:  BRA    374C
....................             if(TiempoSensadoNivelH>3){ 
3734:  MOVF   3E,F
3736:  BNZ   373E
3738:  MOVF   3D,W
373A:  SUBLW  03
373C:  BC    3748
....................                SensadoNivelH=0; 
373E:  BCF    18.6
....................                estadoagua=0; 
3740:  BCF    17.2
....................                Agua_off; 
3742:  BCF    F8C.2
3744:  BCF    F95.2
....................             }else{ 
3746:  BRA    374A
....................                SensadoNivelH=1; 
3748:  BSF    18.6
....................             } 
....................          }else{ 
374A:  BRA    3752
....................             SensadoNivelH=0; 
374C:  BCF    18.6
....................             TiempoSensadoNivelH=0; 
374E:  CLRF   3E
3750:  CLRF   3D
....................          } 
....................       }else{ 
3752:  BRA    3756
....................          SensadoNivelL=1; 
3754:  BSF    18.0
....................       } 
....................    } 
.................... // Monitoreo Nivel de Agua//-------------------------------------- 
....................  
....................    if(UP){ 
3756:  BSF    F92.2
3758:  BTFSC  F80.2
375A:  BRA    37C4
....................       delay_ms(100); 
375C:  MOVLW  64
375E:  MOVWF  xF0
3760:  CALL   050C
....................       if(UP){ 
3764:  BSF    F92.2
3766:  BTFSC  F80.2
3768:  BRA    37C4
....................          delay_ms(2000); 
376A:  MOVLW  08
376C:  MOVWF  xD9
376E:  MOVLW  FA
3770:  MOVWF  xF0
3772:  CALL   050C
3776:  DECFSZ xD9,F
3778:  BRA    376E
....................          if(UP){ 
377A:  BSF    F92.2
377C:  BTFSC  F80.2
377E:  BRA    37B4
....................             printf(lcd_putc,"\f");delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;Flanco=1; 
3780:  MOVLW  0C
3782:  MOVWF  xEA
3784:  CALL   0668
3788:  MOVLW  1E
378A:  MOVWF  xF0
378C:  CALL   050C
3790:  MOVLW  01
3792:  MOVWF  19
3794:  CLRF   35
3796:  MOVLW  02
3798:  MOVWF  1C
379A:  MOVWF  1E
379C:  BSF    17.3
....................             delay_ms(100); 
379E:  MOVLW  64
37A0:  MOVWF  xF0
37A2:  CALL   050C
....................             lcd_init(); 
37A6:  CALL   05B0
....................             delay_ms(100); 
37AA:  MOVLW  64
37AC:  MOVWF  xF0
37AE:  CALL   050C
....................          }else if(!AUX){ 
37B2:  BRA    37C4
37B4:  BSF    F96.2
37B6:  BTFSC  F84.2
37B8:  BRA    37C4
....................             estadode=!estadode; 
37BA:  BTG    18.4
....................             delay_ms(100); 
37BC:  MOVLW  64
37BE:  MOVWF  xF0
37C0:  CALL   050C
....................          } 
....................       } 
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................  
....................    if(treset>=30){ 
37C4:  MOVF   29,W
37C6:  SUBLW  1D
37C8:  BC    37E0
....................       delay_ms(100); 
37CA:  MOVLW  64
37CC:  MOVWF  xF0
37CE:  CALL   050C
....................       lcd_init(); 
37D2:  CALL   05B0
....................       delay_ms(100); 
37D6:  MOVLW  64
37D8:  MOVWF  xF0
37DA:  CALL   050C
....................       treset=0; 
37DE:  CLRF   29
....................    } 
....................     
....................    if(tcontrol>10) 
37E0:  MOVF   2A,W
37E2:  SUBLW  0A
37E4:  BC    37E8
....................       tcontrol=0; 
37E6:  CLRF   2A
....................     
....................    if(Lectura==1){ 
37E8:  BTFSS  17.6
37EA:  BRA    3810
....................       if(!LOW) 
37EC:  BSF    F96.0
37EE:  BTFSC  F84.0
37F0:  BRA    37F6
....................          output_toggle(PIN_D3); 
37F2:  BCF    F95.3
37F4:  BTG    F8C.3
....................       pVpH=Leer_Sensor_ph(MediaMovil); 
37F6:  MOVFF  26,D9
37FA:  GOTO   1846
37FE:  MOVFF  03,BC
3802:  MOVFF  02,BB
3806:  MOVFF  01,BA
380A:  MOVFF  00,B9
....................       Lectura=0; 
380E:  BCF    17.6
....................    } 
....................     
....................    } 
3810:  GOTO   1E4E
.................... } 
....................  
3814:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E18   NOBROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

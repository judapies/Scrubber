CCS PCH C Compiler, Version 4.104, 5967               17-jul.-19 11:32

               Filename: H:\JP\JP\Laboratorio\Scrubber\2019\Bioweb\Firmware\Scrubber.lst

               ROM used: 14186 bytes (43%)
                         Largest free fragment is 18578
               RAM used: 213 (10%) at main() level
                         240 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1AFA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0184
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
04C4:  CLRF   FEA
04C6:  MOVLW  E8
04C8:  MOVWF  FE9
04CA:  MOVF   FEF,W
04CC:  BZ    04EA
04CE:  MOVLW  0F
04D0:  MOVWF  01
04D2:  CLRF   00
04D4:  DECFSZ 00,F
04D6:  BRA    04D4
04D8:  DECFSZ 01,F
04DA:  BRA    04D2
04DC:  MOVLW  8F
04DE:  MOVWF  00
04E0:  DECFSZ 00,F
04E2:  BRA    04E0
04E4:  NOP   
04E6:  DECFSZ FEF,F
04E8:  BRA    04CE
04EA:  RETLW  00
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0504:  SWAPF  xE9,W
0506:  ANDLW  F0
0508:  MOVWF  00
050A:  MOVLW  0F
050C:  ANDWF  F81,W
050E:  IORWF  00,W
0510:  MOVWF  F81
....................       delay_cycles(25); 
0512:  MOVLW  08
0514:  MOVWF  00
0516:  DECFSZ 00,F
0518:  BRA    0516
....................       lcd.enable = 1; 
051A:  BSF    F81.3
....................       delay_us(55); 
051C:  MOVLW  DB
051E:  MOVWF  00
0520:  DECFSZ 00,F
0522:  BRA    0520
0524:  BRA    0526
....................       lcd.enable = 0; 
0526:  BCF    F81.3
.................... } 
0528:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
052A:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
052C:  MOVLW  01
052E:  MOVWF  xE8
0530:  RCALL  04C4
....................       lcd.rs = address; 
0532:  BTFSS  xE6.0
0534:  BCF    F81.1
0536:  BTFSC  xE6.0
0538:  BSF    F81.1
....................       delay_cycles(25); 
053A:  MOVLW  08
053C:  MOVWF  00
053E:  DECFSZ 00,F
0540:  BRA    053E
....................       lcd.rw = 0; 
0542:  BCF    F81.2
....................       delay_cycles(25); 
0544:  MOVLW  08
0546:  MOVWF  00
0548:  DECFSZ 00,F
054A:  BRA    0548
....................       lcd.enable = 0; 
054C:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
054E:  SWAPF  xE7,W
0550:  MOVWF  xE8
0552:  MOVLW  0F
0554:  ANDWF  xE8,F
0556:  MOVFF  E8,E9
055A:  RCALL  0504
....................       lcd_send_nibble(n & 0xf); 
055C:  MOVF   xE7,W
055E:  ANDLW  0F
0560:  MOVWF  xE8
0562:  MOVWF  xE9
0564:  RCALL  0504
.................... } 
0566:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0568:  MOVLW  00
056A:  MOVWF  F93
....................     lcd.rs = 0; 
056C:  BCF    F81.1
....................     lcd.rw = 0; 
056E:  BCF    F81.2
....................     lcd.enable = 0; 
0570:  BCF    F81.3
....................     delay_ms(15); 
0572:  MOVLW  0F
0574:  MOVWF  xE8
0576:  RCALL  04C4
....................     for(i=1;i<=3;++i) { 
0578:  MOVLW  01
057A:  MOVWF  xD1
057C:  MOVF   xD1,W
057E:  SUBLW  03
0580:  BNC   0592
....................        lcd_send_nibble(3); 
0582:  MOVLW  03
0584:  MOVWF  xE9
0586:  RCALL  0504
....................        delay_ms(5); 
0588:  MOVLW  05
058A:  MOVWF  xE8
058C:  RCALL  04C4
....................     } 
058E:  INCF   xD1,F
0590:  BRA    057C
....................     lcd_send_nibble(2); 
0592:  MOVLW  02
0594:  MOVWF  xE9
0596:  RCALL  0504
....................     for(i=0;i<=3;++i) 
0598:  CLRF   xD1
059A:  MOVF   xD1,W
059C:  SUBLW  03
059E:  BNC   05BC
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
05A0:  CLRF   03
05A2:  MOVF   xD1,W
05A4:  MOVFF  FF2,D2
05A8:  BCF    FF2.7
05AA:  RCALL  0096
05AC:  BTFSC  xD2.7
05AE:  BSF    FF2.7
05B0:  MOVWF  xD2
05B2:  CLRF   xE6
05B4:  MOVWF  xE7
05B6:  RCALL  052A
05B8:  INCF   xD1,F
05BA:  BRA    059A
.................... } 
05BC:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
05BE:  MOVLW  01
05C0:  SUBWF  xE4,W
05C2:  ADDLW  FC
05C4:  BC    05E4
05C6:  ADDLW  04
05C8:  GOTO   05F4
....................      case 1 : address=0x80;break; 
05CC:  MOVLW  80
05CE:  MOVWF  xE5
05D0:  BRA    05E4
....................      case 2 : address=0xc0;break; 
05D2:  MOVLW  C0
05D4:  MOVWF  xE5
05D6:  BRA    05E4
....................      case 3 : address=0x94;break; 
05D8:  MOVLW  94
05DA:  MOVWF  xE5
05DC:  BRA    05E4
....................      case 4 : address=0xd4;break; 
05DE:  MOVLW  D4
05E0:  MOVWF  xE5
05E2:  BRA    05E4
....................    } 
....................    address+=x-1; 
05E4:  MOVLW  01
05E6:  SUBWF  xE3,W
05E8:  ADDWF  xE5,F
....................    lcd_send_byte(0,address); 
05EA:  CLRF   xE6
05EC:  MOVFF  E5,E7
05F0:  RCALL  052A
.................... } 
05F2:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0620:  MOVF   xE2,W
0622:  SUBLW  F1
0624:  BNZ   062A
....................    { 
....................       c=238; 
0626:  MOVLW  EE
0628:  MOVWF  xE2
....................    } 
....................    if(c=='Ñ') 
062A:  MOVF   xE2,W
062C:  SUBLW  D1
062E:  BNZ   0634
....................    { 
....................       c=255; 
0630:  MOVLW  FF
0632:  MOVWF  xE2
....................    } 
....................     
....................    switch (c) { 
0634:  MOVF   xE2,W
0636:  XORLW  0C
0638:  BZ    0644
063A:  XORLW  06
063C:  BZ    0658
063E:  XORLW  02
0640:  BZ    0666
0642:  BRA    0670
....................      case '\f'   : lcd_send_byte(0,1); 
0644:  CLRF   xE6
0646:  MOVLW  01
0648:  MOVWF  xE7
064A:  RCALL  052A
....................                    lcdline=1; 
064C:  MOVLW  01
064E:  MOVWF  16
....................                    delay_ms(2); 
0650:  MOVLW  02
0652:  MOVWF  xE8
0654:  RCALL  04C4
....................                                            break; 
0656:  BRA    067C
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0658:  INCF   16,F
065A:  MOVLW  01
065C:  MOVWF  xE3
065E:  MOVFF  16,E4
0662:  RCALL  05BE
0664:  BRA    067C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0666:  CLRF   xE6
0668:  MOVLW  10
066A:  MOVWF  xE7
066C:  RCALL  052A
066E:  BRA    067C
....................      default     : lcd_send_byte(1,c);     break; 
0670:  MOVLW  01
0672:  MOVWF  xE6
0674:  MOVFF  E2,E7
0678:  RCALL  052A
067A:  BRA    067C
....................    } 
.................... } 
067C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A2) 
.................... #define   DOWN          !input(PIN_A3) 
.................... #define   RIGHT         !input(PIN_A4) 
.................... #define   LEFT          !input(PIN_A5) 
....................  
.................... #define   HIGH           !input(PIN_E1) 
.................... #define   LOW            !input(PIN_E0) 
.................... #define   AUX            !input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Bomba_on            output_bit(PIN_D1,1) 
.................... #define   Bomba_off           output_bit(PIN_D1,0) 
.................... #define   Agua_on             output_bit(PIN_D2,1) 
.................... #define   Agua_off            output_bit(PIN_D2,0) 
.................... #define   Alarma_on           output_bit(PIN_D3,1) 
.................... #define   Alarma_off          output_bit(PIN_D3,0) 
.................... #define   Desague_on          output_bit(PIN_D4,1) 
.................... #define   Desague_off         output_bit(PIN_D4,0) 
.................... #define   Peristaltica_on     output_bit(PIN_C2,1) 
.................... #define   Peristaltica_off    output_bit(PIN_C2,0) 
....................  
.................... short estadobp=0,estadoba=0,estadoagua=0,Flanco=0,Flanco1=0,Flanco2=0,Lectura=0,Grabar=0,SensadoNivelL=0,visualiza=0,renovar=0,adicionBase=0; 
.................... short estadode=0,activo=0,SensadoNivelH=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horas=0; 
.................... int8 r=0,q=0,MediaMovil=6,punto=1,negativo=10,treset=0,tcontrol=0,tpulso=3,tiempoRenovacion=10,cargaH=0,cargaL=0; 
.................... int8 bInt=0,bDec=0,Y0Int=0,Y0Dec=0,Y1Int=0,Y1Dec=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
....................  
.................... int16 tiempos,TiempoSensadoNivelL=0,TiempoSensadoNivelH=0,cargaInicial=100,tRenovacion=0,tPeristaltica=0; 
.................... float PromPH[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,PH=0.0,X0=0.0,Y0=0.0,X1=0.0,Y1=0.0,pHpoint=4.0,pVpH=0.0,sPpH=7.0,m=0.0,b=0.0,Banda=0.0,tmp=0.0,sPH=0.0,sPL=0.0; 
.................... #include <Funciones.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
159C:  RLCF   xD6,W
159E:  MOVWF  00
15A0:  RLCF   00,F
15A2:  MOVLW  FC
15A4:  ANDWF  00,F
15A6:  MOVFF  00,01
15AA:  MOVF   FC2,W
15AC:  ANDLW  C3
15AE:  IORWF  00,W
15B0:  MOVWF  FC2
15B2:  MOVLW  0A
15B4:  MOVWF  xE8
15B6:  CALL   04C4
15BA:  BSF    FC2.1
15BC:  BTFSC  FC2.1
15BE:  BRA    15BC
15C0:  MOVF   FC4,W
15C2:  CLRF   xDC
15C4:  MOVWF  xDB
15C6:  CALL   06B6
15CA:  MOVFF  03,DA
15CE:  MOVFF  02,D9
15D2:  MOVFF  01,D8
15D6:  MOVFF  00,D7
15DA:  MOVFF  D7,00
15DE:  MOVFF  D8,01
15E2:  MOVFF  D9,02
15E6:  MOVFF  DA,03
.................... } 
15EA:  RETLW  00
....................  
.................... void SalidasOff(void){ 
....................    Bomba_off; 
*
04EC:  BCF    F8C.1
04EE:  BCF    F95.1
....................    Agua_off; 
04F0:  BCF    F8C.2
04F2:  BCF    F95.2
....................    Peristaltica_off; 
04F4:  BCF    F8B.2
04F6:  BCF    F94.2
....................    Desague_off; 
04F8:  BCF    F8C.4
04FA:  BCF    F95.4
....................    Alarma_off; 
04FC:  BCF    F8C.3
04FE:  BCF    F95.3
.................... } 
0500:  GOTO   06AA (RETURN)
....................  
.................... void ConfigInicial(void){ 
....................    delay_ms(1000); 
*
067E:  MOVLW  04
0680:  MOVWF  xD1
0682:  MOVLW  FA
0684:  MOVWF  xE8
0686:  RCALL  04C4
0688:  DECFSZ xD1,F
068A:  BRA    0682
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
068C:  MOVLW  85
068E:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0690:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
0692:  MOVF   FC1,W
0694:  ANDLW  C0
0696:  IORLW  0D
0698:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
069A:  BCF    FC0.0
069C:  BSF    FC0.1
069E:  BCF    FC0.2
06A0:  BCF    FC0.7
06A2:  BSF    FC2.0
....................    enable_interrupts(global); 
06A4:  MOVLW  C0
06A6:  IORWF  FF2,F
....................    SalidasOff(); 
06A8:  BRA    04EC
....................    lcd_init(); 
06AA:  RCALL  0568
....................    printf(lcd_putc,"\f"); 
06AC:  MOVLW  0C
06AE:  MOVWF  xE2
06B0:  RCALL  0620
.................... } 
06B2:  GOTO   1CC0 (RETURN)
....................  
.................... void LeeEEPROM(void){ 
....................    MediaMovil=read_eeprom(5);delay_ms(20); 
*
06EC:  MOVFF  FF2,D1
06F0:  BCF    FF2.7
06F2:  MOVLW  05
06F4:  MOVWF  FA9
06F6:  BCF    FA6.6
06F8:  BCF    FA6.7
06FA:  BSF    FA6.0
06FC:  MOVF   FA8,W
06FE:  BTFSC  xD1.7
0700:  BSF    FF2.7
0702:  MOVWF  26
0704:  MOVLW  14
0706:  MOVWF  xE8
0708:  RCALL  04C4
....................    tiempoRenovacion=read_eeprom(6); 
070A:  MOVFF  FF2,D1
070E:  BCF    FF2.7
0710:  MOVLW  06
0712:  MOVWF  FA9
0714:  BCF    FA6.6
0716:  BCF    FA6.7
0718:  BSF    FA6.0
071A:  MOVF   FA8,W
071C:  BTFSC  xD1.7
071E:  BSF    FF2.7
0720:  MOVWF  2C
....................    delay_ms(20); 
0722:  MOVLW  14
0724:  MOVWF  xE8
0726:  RCALL  04C4
....................    //BandaDec=read_eeprom(7); 
....................    delay_ms(20); 
0728:  MOVLW  14
072A:  MOVWF  xE8
072C:  RCALL  04C4
....................    cargaL=read_eeprom(8); 
072E:  MOVFF  FF2,D1
0732:  BCF    FF2.7
0734:  MOVLW  08
0736:  MOVWF  FA9
0738:  BCF    FA6.6
073A:  BCF    FA6.7
073C:  BSF    FA6.0
073E:  MOVF   FA8,W
0740:  BTFSC  xD1.7
0742:  BSF    FF2.7
0744:  MOVWF  2E
....................    delay_ms(20); 
0746:  MOVLW  14
0748:  MOVWF  xE8
074A:  RCALL  04C4
....................    cargaH=read_eeprom(9); 
074C:  MOVFF  FF2,D1
0750:  BCF    FF2.7
0752:  MOVLW  09
0754:  MOVWF  FA9
0756:  BCF    FA6.6
0758:  BCF    FA6.7
075A:  BSF    FA6.0
075C:  MOVF   FA8,W
075E:  BTFSC  xD1.7
0760:  BSF    FF2.7
0762:  MOVWF  2D
....................    delay_ms(20); 
0764:  MOVLW  14
0766:  MOVWF  xE8
0768:  RCALL  04C4
....................    cargaInicial=make16(cargaH,cargaL); 
076A:  MOVFF  2D,40
076E:  MOVFF  2E,3F
....................    bInt=read_eeprom(20); 
0772:  MOVFF  FF2,D1
0776:  BCF    FF2.7
0778:  MOVLW  14
077A:  MOVWF  FA9
077C:  BCF    FA6.6
077E:  BCF    FA6.7
0780:  BSF    FA6.0
0782:  MOVF   FA8,W
0784:  BTFSC  xD1.7
0786:  BSF    FF2.7
0788:  MOVWF  2F
....................    delay_ms(20); 
078A:  MOVLW  14
078C:  MOVWF  xE8
078E:  RCALL  04C4
....................    bDec=read_eeprom(21); 
0790:  MOVFF  FF2,D1
0794:  BCF    FF2.7
0796:  MOVLW  15
0798:  MOVWF  FA9
079A:  BCF    FA6.6
079C:  BCF    FA6.7
079E:  BSF    FA6.0
07A0:  MOVF   FA8,W
07A2:  BTFSC  xD1.7
07A4:  BSF    FF2.7
07A6:  MOVWF  30
....................    delay_ms(20); 
07A8:  MOVLW  14
07AA:  MOVWF  xE8
07AC:  RCALL  04C4
....................    X0=read_eeprom(30); 
07AE:  MOVFF  FF2,D1
07B2:  BCF    FF2.7
07B4:  MOVLW  1E
07B6:  MOVWF  FA9
07B8:  BCF    FA6.6
07BA:  BCF    FA6.7
07BC:  BSF    FA6.0
07BE:  MOVF   FA8,W
07C0:  BTFSC  xD1.7
07C2:  BSF    FF2.7
07C4:  CLRF   xDC
07C6:  MOVWF  xDB
07C8:  RCALL  06B6
07CA:  MOVFF  03,A0
07CE:  MOVFF  02,9F
07D2:  MOVFF  01,9E
07D6:  MOVFF  00,9D
....................    delay_ms(20); 
07DA:  MOVLW  14
07DC:  MOVWF  xE8
07DE:  RCALL  04C4
....................    X1=read_eeprom(31); 
07E0:  MOVFF  FF2,D1
07E4:  BCF    FF2.7
07E6:  MOVLW  1F
07E8:  MOVWF  FA9
07EA:  BCF    FA6.6
07EC:  BCF    FA6.7
07EE:  BSF    FA6.0
07F0:  MOVF   FA8,W
07F2:  BTFSC  xD1.7
07F4:  BSF    FF2.7
07F6:  CLRF   xDC
07F8:  MOVWF  xDB
07FA:  RCALL  06B6
07FC:  MOVFF  03,A8
0800:  MOVFF  02,A7
0804:  MOVFF  01,A6
0808:  MOVFF  00,A5
....................    delay_ms(20); 
080C:  MOVLW  14
080E:  MOVWF  xE8
0810:  RCALL  04C4
....................    Y0Int=read_eeprom(32); 
0812:  MOVFF  FF2,D1
0816:  BCF    FF2.7
0818:  MOVLW  20
081A:  MOVWF  FA9
081C:  BCF    FA6.6
081E:  BCF    FA6.7
0820:  BSF    FA6.0
0822:  MOVF   FA8,W
0824:  BTFSC  xD1.7
0826:  BSF    FF2.7
0828:  MOVWF  31
....................    delay_ms(20); 
082A:  MOVLW  14
082C:  MOVWF  xE8
082E:  RCALL  04C4
....................    Y0Dec=read_eeprom(33); 
0830:  MOVFF  FF2,D1
0834:  BCF    FF2.7
0836:  MOVLW  21
0838:  MOVWF  FA9
083A:  BCF    FA6.6
083C:  BCF    FA6.7
083E:  BSF    FA6.0
0840:  MOVF   FA8,W
0842:  BTFSC  xD1.7
0844:  BSF    FF2.7
0846:  MOVWF  32
....................    delay_ms(20); 
0848:  MOVLW  14
084A:  MOVWF  xE8
084C:  RCALL  04C4
....................    Y1Int=read_eeprom(34); 
084E:  MOVFF  FF2,D1
0852:  BCF    FF2.7
0854:  MOVLW  22
0856:  MOVWF  FA9
0858:  BCF    FA6.6
085A:  BCF    FA6.7
085C:  BSF    FA6.0
085E:  MOVF   FA8,W
0860:  BTFSC  xD1.7
0862:  BSF    FF2.7
0864:  MOVWF  33
....................    delay_ms(20); 
0866:  MOVLW  14
0868:  MOVWF  xE8
086A:  RCALL  04C4
....................    Y1Dec=read_eeprom(35); 
086C:  MOVFF  FF2,D1
0870:  BCF    FF2.7
0872:  MOVLW  23
0874:  MOVWF  FA9
0876:  BCF    FA6.6
0878:  BCF    FA6.7
087A:  BSF    FA6.0
087C:  MOVF   FA8,W
087E:  BTFSC  xD1.7
0880:  BSF    FF2.7
0882:  MOVWF  34
....................    delay_ms(20); 
0884:  MOVLW  14
0886:  MOVWF  xE8
0888:  RCALL  04C4
....................    segundos=read_eeprom(50); 
088A:  MOVFF  FF2,D1
088E:  BCF    FF2.7
0890:  MOVLW  32
0892:  MOVWF  FA9
0894:  BCF    FA6.6
0896:  BCF    FA6.7
0898:  BSF    FA6.0
089A:  MOVF   FA8,W
089C:  BTFSC  xD1.7
089E:  BSF    FF2.7
08A0:  MOVWF  21
....................    delay_ms(20); 
08A2:  MOVLW  14
08A4:  MOVWF  xE8
08A6:  RCALL  04C4
....................    minutos=read_eeprom(51); 
08A8:  MOVFF  FF2,D1
08AC:  BCF    FF2.7
08AE:  MOVLW  33
08B0:  MOVWF  FA9
08B2:  BCF    FA6.6
08B4:  BCF    FA6.7
08B6:  BSF    FA6.0
08B8:  MOVF   FA8,W
08BA:  BTFSC  xD1.7
08BC:  BSF    FF2.7
08BE:  MOVWF  22
....................    delay_ms(20); 
08C0:  MOVLW  14
08C2:  MOVWF  xE8
08C4:  RCALL  04C4
....................    horas=read_eeprom(52); 
08C6:  MOVFF  FF2,D1
08CA:  BCF    FF2.7
08CC:  MOVLW  34
08CE:  MOVWF  FA9
08D0:  BCF    FA6.6
08D2:  BCF    FA6.7
08D4:  BSF    FA6.0
08D6:  MOVF   FA8,W
08D8:  BTFSC  xD1.7
08DA:  BSF    FF2.7
08DC:  MOVWF  23
....................    delay_ms(20); 
08DE:  MOVLW  14
08E0:  MOVWF  xE8
08E2:  RCALL  04C4
....................    negativo=read_eeprom(60); 
08E4:  MOVFF  FF2,D1
08E8:  BCF    FF2.7
08EA:  MOVLW  3C
08EC:  MOVWF  FA9
08EE:  BCF    FA6.6
08F0:  BCF    FA6.7
08F2:  BSF    FA6.0
08F4:  MOVF   FA8,W
08F6:  BTFSC  xD1.7
08F8:  BSF    FF2.7
08FA:  MOVWF  28
....................    delay_ms(20); 
08FC:  MOVLW  14
08FE:  MOVWF  xE8
0900:  RCALL  04C4
....................    tpulso=read_eeprom(70); 
0902:  MOVFF  FF2,D1
0906:  BCF    FF2.7
0908:  MOVLW  46
090A:  MOVWF  FA9
090C:  BCF    FA6.6
090E:  BCF    FA6.7
0910:  BSF    FA6.0
0912:  MOVF   FA8,W
0914:  BTFSC  xD1.7
0916:  BSF    FF2.7
0918:  MOVWF  2B
....................    delay_ms(20); 
091A:  MOVLW  14
091C:  MOVWF  xE8
091E:  RCALL  04C4
.................... } 
0920:  GOTO   1CC4 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................    tmp=Y0Dec/10.0; 
*
0D5E:  CLRF   xDC
0D60:  MOVFF  32,DB
0D64:  RCALL  06B6
0D66:  MOVFF  03,DD
0D6A:  MOVFF  02,DC
0D6E:  MOVFF  01,DB
0D72:  MOVFF  00,DA
0D76:  CLRF   xE1
0D78:  CLRF   xE0
0D7A:  MOVLW  20
0D7C:  MOVWF  xDF
0D7E:  MOVLW  82
0D80:  MOVWF  xDE
0D82:  RCALL  0924
0D84:  MOVFF  03,C8
0D88:  MOVFF  02,C7
0D8C:  MOVFF  01,C6
0D90:  MOVFF  00,C5
....................    Y0=Y0Int+tmp; 
0D94:  CLRF   xDC
0D96:  MOVFF  31,DB
0D9A:  RCALL  06B6
0D9C:  BCF    FD8.1
0D9E:  MOVFF  03,DD
0DA2:  MOVFF  02,DC
0DA6:  MOVFF  01,DB
0DAA:  MOVFF  00,DA
0DAE:  MOVFF  C8,E1
0DB2:  MOVFF  C7,E0
0DB6:  MOVFF  C6,DF
0DBA:  MOVFF  C5,DE
0DBE:  RCALL  0A7E
0DC0:  MOVFF  03,A4
0DC4:  MOVFF  02,A3
0DC8:  MOVFF  01,A2
0DCC:  MOVFF  00,A1
....................     
....................    tmp=Y1Dec/10.0; 
0DD0:  CLRF   xDC
0DD2:  MOVFF  34,DB
0DD6:  RCALL  06B6
0DD8:  MOVFF  03,DD
0DDC:  MOVFF  02,DC
0DE0:  MOVFF  01,DB
0DE4:  MOVFF  00,DA
0DE8:  CLRF   xE1
0DEA:  CLRF   xE0
0DEC:  MOVLW  20
0DEE:  MOVWF  xDF
0DF0:  MOVLW  82
0DF2:  MOVWF  xDE
0DF4:  RCALL  0924
0DF6:  MOVFF  03,C8
0DFA:  MOVFF  02,C7
0DFE:  MOVFF  01,C6
0E02:  MOVFF  00,C5
....................    Y1=Y1Int+tmp; 
0E06:  CLRF   xDC
0E08:  MOVFF  33,DB
0E0C:  RCALL  06B6
0E0E:  BCF    FD8.1
0E10:  MOVFF  03,DD
0E14:  MOVFF  02,DC
0E18:  MOVFF  01,DB
0E1C:  MOVFF  00,DA
0E20:  MOVFF  C8,E1
0E24:  MOVFF  C7,E0
0E28:  MOVFF  C6,DF
0E2C:  MOVFF  C5,DE
0E30:  RCALL  0A7E
0E32:  MOVFF  03,AC
0E36:  MOVFF  02,AB
0E3A:  MOVFF  01,AA
0E3E:  MOVFF  00,A9
....................     
....................    tmp=bDec/100.0; 
0E42:  CLRF   xDC
0E44:  MOVFF  30,DB
0E48:  RCALL  06B6
0E4A:  MOVFF  03,DD
0E4E:  MOVFF  02,DC
0E52:  MOVFF  01,DB
0E56:  MOVFF  00,DA
0E5A:  CLRF   xE1
0E5C:  CLRF   xE0
0E5E:  MOVLW  48
0E60:  MOVWF  xDF
0E62:  MOVLW  85
0E64:  MOVWF  xDE
0E66:  RCALL  0924
0E68:  MOVFF  03,C8
0E6C:  MOVFF  02,C7
0E70:  MOVFF  01,C6
0E74:  MOVFF  00,C5
....................    b=bInt+tmp; 
0E78:  CLRF   xDC
0E7A:  MOVFF  2F,DB
0E7E:  RCALL  06B6
0E80:  BCF    FD8.1
0E82:  MOVFF  03,DD
0E86:  MOVFF  02,DC
0E8A:  MOVFF  01,DB
0E8E:  MOVFF  00,DA
0E92:  MOVFF  C8,E1
0E96:  MOVFF  C7,E0
0E9A:  MOVFF  C6,DF
0E9E:  MOVFF  C5,DE
0EA2:  RCALL  0A7E
0EA4:  MOVFF  03,C0
0EA8:  MOVFF  02,BF
0EAC:  MOVFF  01,BE
0EB0:  MOVFF  00,BD
....................     
....................    if(MediaMovil>10){ 
0EB4:  MOVF   26,W
0EB6:  SUBLW  0A
0EB8:  BC    0EF2
....................       MediaMovil=10;write_eeprom(5,10);delay_ms(30); 
0EBA:  MOVLW  0A
0EBC:  MOVWF  26
0EBE:  MOVLW  05
0EC0:  MOVWF  FA9
0EC2:  MOVLW  0A
0EC4:  MOVWF  FA8
0EC6:  BCF    FA6.6
0EC8:  BCF    FA6.7
0ECA:  BSF    FA6.2
0ECC:  MOVF   FF2,W
0ECE:  MOVWF  00
0ED0:  BCF    FF2.7
0ED2:  MOVLB  F
0ED4:  MOVLW  55
0ED6:  MOVWF  FA7
0ED8:  MOVLW  AA
0EDA:  MOVWF  FA7
0EDC:  BSF    FA6.1
0EDE:  BTFSC  FA6.1
0EE0:  BRA    0EDE
0EE2:  BCF    FA6.2
0EE4:  MOVF   00,W
0EE6:  IORWF  FF2,F
0EE8:  MOVLW  1E
0EEA:  MOVLB  0
0EEC:  MOVWF  xE8
0EEE:  CALL   04C4
....................    } 
....................    if(tiempoRenovacion>100){ 
0EF2:  MOVF   2C,W
0EF4:  SUBLW  64
0EF6:  BC    0F30
....................       tiempoRenovacion=100;write_eeprom(6,100);delay_ms(30); 
0EF8:  MOVLW  64
0EFA:  MOVWF  2C
0EFC:  MOVLW  06
0EFE:  MOVWF  FA9
0F00:  MOVLW  64
0F02:  MOVWF  FA8
0F04:  BCF    FA6.6
0F06:  BCF    FA6.7
0F08:  BSF    FA6.2
0F0A:  MOVF   FF2,W
0F0C:  MOVWF  00
0F0E:  BCF    FF2.7
0F10:  MOVLB  F
0F12:  MOVLW  55
0F14:  MOVWF  FA7
0F16:  MOVLW  AA
0F18:  MOVWF  FA7
0F1A:  BSF    FA6.1
0F1C:  BTFSC  FA6.1
0F1E:  BRA    0F1C
0F20:  BCF    FA6.2
0F22:  MOVF   00,W
0F24:  IORWF  FF2,F
0F26:  MOVLW  1E
0F28:  MOVLB  0
0F2A:  MOVWF  xE8
0F2C:  CALL   04C4
....................    } 
....................    if(cargaInicial>5000){ 
0F30:  MOVF   40,W
0F32:  SUBLW  12
0F34:  BC    0FB0
0F36:  XORLW  FF
0F38:  BNZ   0F40
0F3A:  MOVF   3F,W
0F3C:  SUBLW  88
0F3E:  BC    0FB0
....................       cargaInicial=500;write_eeprom(8,0xf4);delay_ms(30);write_eeprom(9,0x01);delay_ms(30); 
0F40:  MOVLW  01
0F42:  MOVWF  40
0F44:  MOVLW  F4
0F46:  MOVWF  3F
0F48:  MOVLW  08
0F4A:  MOVWF  FA9
0F4C:  MOVLW  F4
0F4E:  MOVWF  FA8
0F50:  BCF    FA6.6
0F52:  BCF    FA6.7
0F54:  BSF    FA6.2
0F56:  MOVF   FF2,W
0F58:  MOVWF  00
0F5A:  BCF    FF2.7
0F5C:  MOVLB  F
0F5E:  MOVLW  55
0F60:  MOVWF  FA7
0F62:  MOVLW  AA
0F64:  MOVWF  FA7
0F66:  BSF    FA6.1
0F68:  BTFSC  FA6.1
0F6A:  BRA    0F68
0F6C:  BCF    FA6.2
0F6E:  MOVF   00,W
0F70:  IORWF  FF2,F
0F72:  MOVLW  1E
0F74:  MOVLB  0
0F76:  MOVWF  xE8
0F78:  CALL   04C4
0F7C:  MOVLW  09
0F7E:  MOVWF  FA9
0F80:  MOVLW  01
0F82:  MOVWF  FA8
0F84:  BCF    FA6.6
0F86:  BCF    FA6.7
0F88:  BSF    FA6.2
0F8A:  MOVF   FF2,W
0F8C:  MOVWF  00
0F8E:  BCF    FF2.7
0F90:  MOVLB  F
0F92:  MOVLW  55
0F94:  MOVWF  FA7
0F96:  MOVLW  AA
0F98:  MOVWF  FA7
0F9A:  BSF    FA6.1
0F9C:  BTFSC  FA6.1
0F9E:  BRA    0F9C
0FA0:  BCF    FA6.2
0FA2:  MOVF   00,W
0FA4:  IORWF  FF2,F
0FA6:  MOVLW  1E
0FA8:  MOVLB  0
0FAA:  MOVWF  xE8
0FAC:  CALL   04C4
....................    } 
....................    if(horas>150) 
0FB0:  MOVF   23,W
0FB2:  SUBLW  96
0FB4:  BC    0FB8
....................       horas=0; 
0FB6:  CLRF   23
....................    if(minutos>59) 
0FB8:  MOVF   22,W
0FBA:  SUBLW  3B
0FBC:  BC    0FC0
....................       minutos=0; 
0FBE:  CLRF   22
....................    if(segundos>59) 
0FC0:  MOVF   21,W
0FC2:  SUBLW  3B
0FC4:  BC    0FC8
....................       segundos=0; 
0FC6:  CLRF   21
....................    if(b>10.0){ 
0FC8:  CLRF   xDD
0FCA:  CLRF   xDC
0FCC:  MOVLW  20
0FCE:  MOVWF  xDB
0FD0:  MOVLW  82
0FD2:  MOVWF  xDA
0FD4:  MOVFF  C0,E1
0FD8:  MOVFF  BF,E0
0FDC:  MOVFF  BE,DF
0FE0:  MOVFF  BD,DE
0FE4:  RCALL  0CE8
0FE6:  BNC   0FF8
....................       b=0.32; 
0FE8:  MOVLW  0A
0FEA:  MOVWF  xC0
0FEC:  MOVLW  D7
0FEE:  MOVWF  xBF
0FF0:  MOVLW  23
0FF2:  MOVWF  xBE
0FF4:  MOVLW  7D
0FF6:  MOVWF  xBD
....................    } 
....................    if(X0>250){ 
0FF8:  CLRF   xDD
0FFA:  CLRF   xDC
0FFC:  MOVLW  7A
0FFE:  MOVWF  xDB
1000:  MOVLW  86
1002:  MOVWF  xDA
1004:  MOVFF  A0,E1
1008:  MOVFF  9F,E0
100C:  MOVFF  9E,DF
1010:  MOVFF  9D,DE
1014:  RCALL  0CE8
1016:  BNC   1024
....................       X0=60; 
1018:  CLRF   xA0
101A:  CLRF   x9F
101C:  MOVLW  70
101E:  MOVWF  x9E
1020:  MOVLW  84
1022:  MOVWF  x9D
....................    } 
....................    if(X1>250){ 
1024:  CLRF   xDD
1026:  CLRF   xDC
1028:  MOVLW  7A
102A:  MOVWF  xDB
102C:  MOVLW  86
102E:  MOVWF  xDA
1030:  MOVFF  A8,E1
1034:  MOVFF  A7,E0
1038:  MOVFF  A6,DF
103C:  MOVFF  A5,DE
1040:  RCALL  0CE8
1042:  BNC   1050
....................       X1=103; 
1044:  CLRF   xA8
1046:  CLRF   xA7
1048:  MOVLW  4E
104A:  MOVWF  xA6
104C:  MOVLW  85
104E:  MOVWF  xA5
....................    } 
....................    if(Y0>10.0){ 
1050:  CLRF   xDD
1052:  CLRF   xDC
1054:  MOVLW  20
1056:  MOVWF  xDB
1058:  MOVLW  82
105A:  MOVWF  xDA
105C:  MOVFF  A4,E1
1060:  MOVFF  A3,E0
1064:  MOVFF  A2,DF
1068:  MOVFF  A1,DE
106C:  RCALL  0CE8
106E:  BNC   107A
....................       Y0=4.0; 
1070:  CLRF   xA4
1072:  CLRF   xA3
1074:  CLRF   xA2
1076:  MOVLW  81
1078:  MOVWF  xA1
....................    } 
....................    if(Y1>14.0){ 
107A:  CLRF   xDD
107C:  CLRF   xDC
107E:  MOVLW  60
1080:  MOVWF  xDB
1082:  MOVLW  82
1084:  MOVWF  xDA
1086:  MOVFF  AC,E1
108A:  MOVFF  AB,E0
108E:  MOVFF  AA,DF
1092:  MOVFF  A9,DE
1096:  RCALL  0CE8
1098:  BNC   10A6
....................       Y1=7.0; 
109A:  CLRF   xAC
109C:  CLRF   xAB
109E:  MOVLW  60
10A0:  MOVWF  xAA
10A2:  MOVLW  81
10A4:  MOVWF  xA9
....................    } 
....................    if(negativo>20){ 
10A6:  MOVF   28,W
10A8:  SUBLW  14
10AA:  BC    10B0
....................       negativo=20; 
10AC:  MOVLW  14
10AE:  MOVWF  28
....................    } 
....................    //b=0.32 
....................    //x=60 
....................    //x1=103 
....................    //Y0=4.0 
....................    //Y1=7.0 
....................    //negativo=20; 
.................... } 
10B0:  GOTO   1CC8 (RETURN)
....................  
.................... void EnciendeBomba(void){ 
....................    if(!input_state(PIN_D1)){ 
*
171A:  BTFSC  F83.1
171C:  BRA    1732
....................       delay_ms(100); 
171E:  MOVLW  64
1720:  MOVWF  xE8
1722:  CALL   04C4
....................       lcd_init(); 
1726:  CALL   0568
....................       delay_ms(100); 
172A:  MOVLW  64
172C:  MOVWF  xE8
172E:  CALL   04C4
....................    } 
....................    Bomba_on; 
1732:  BSF    F8C.1
1734:  BCF    F95.1
....................    estadoba=1; 
1736:  BSF    17.1
....................    Grabar=0; 
1738:  BCF    17.7
.................... } 
173A:  RETLW  00
....................  
.................... void ApagaBomba(void){ 
....................    if(input_state(PIN_D1)){ 
173C:  BTFSS  F83.1
173E:  BRA    1754
....................       delay_ms(100); 
1740:  MOVLW  64
1742:  MOVWF  xE8
1744:  CALL   04C4
....................       lcd_init(); 
1748:  CALL   0568
....................       delay_ms(100); 
174C:  MOVLW  64
174E:  MOVWF  xE8
1750:  CALL   04C4
....................    } 
....................    Bomba_off; 
1754:  BCF    F8C.1
1756:  BCF    F95.1
....................    estadoba=0; 
1758:  BCF    17.1
....................    if(Grabar==0){ 
175A:  BTFSC  17.7
175C:  BRA    17FC
....................       write_eeprom(50,segundos);delay_ms(20); 
175E:  MOVLW  32
1760:  MOVWF  FA9
1762:  MOVFF  21,FA8
1766:  BCF    FA6.6
1768:  BCF    FA6.7
176A:  BSF    FA6.2
176C:  MOVF   FF2,W
176E:  MOVWF  00
1770:  BCF    FF2.7
1772:  MOVLB  F
1774:  MOVLW  55
1776:  MOVWF  FA7
1778:  MOVLW  AA
177A:  MOVWF  FA7
177C:  BSF    FA6.1
177E:  BTFSC  FA6.1
1780:  BRA    177E
1782:  BCF    FA6.2
1784:  MOVF   00,W
1786:  IORWF  FF2,F
1788:  MOVLW  14
178A:  MOVLB  0
178C:  MOVWF  xE8
178E:  CALL   04C4
....................       write_eeprom(51,minutos);delay_ms(20); 
1792:  MOVLW  33
1794:  MOVWF  FA9
1796:  MOVFF  22,FA8
179A:  BCF    FA6.6
179C:  BCF    FA6.7
179E:  BSF    FA6.2
17A0:  MOVF   FF2,W
17A2:  MOVWF  00
17A4:  BCF    FF2.7
17A6:  MOVLB  F
17A8:  MOVLW  55
17AA:  MOVWF  FA7
17AC:  MOVLW  AA
17AE:  MOVWF  FA7
17B0:  BSF    FA6.1
17B2:  BTFSC  FA6.1
17B4:  BRA    17B2
17B6:  BCF    FA6.2
17B8:  MOVF   00,W
17BA:  IORWF  FF2,F
17BC:  MOVLW  14
17BE:  MOVLB  0
17C0:  MOVWF  xE8
17C2:  CALL   04C4
....................       write_eeprom(52,horas);delay_ms(20); 
17C6:  MOVLW  34
17C8:  MOVWF  FA9
17CA:  MOVFF  23,FA8
17CE:  BCF    FA6.6
17D0:  BCF    FA6.7
17D2:  BSF    FA6.2
17D4:  MOVF   FF2,W
17D6:  MOVWF  00
17D8:  BCF    FF2.7
17DA:  MOVLB  F
17DC:  MOVLW  55
17DE:  MOVWF  FA7
17E0:  MOVLW  AA
17E2:  MOVWF  FA7
17E4:  BSF    FA6.1
17E6:  BTFSC  FA6.1
17E8:  BRA    17E6
17EA:  BCF    FA6.2
17EC:  MOVF   00,W
17EE:  IORWF  FF2,F
17F0:  MOVLW  14
17F2:  MOVLB  0
17F4:  MOVWF  xE8
17F6:  CALL   04C4
....................       Grabar=1; 
17FA:  BSF    17.7
....................    } 
.................... } 
17FC:  RETLW  00
....................  
.................... void MensajeGuardado(void){ 
....................    printf(lcd_putc,"\f"); 
*
15EC:  MOVLW  0C
15EE:  MOVWF  xE2
15F0:  CALL   0620
....................    lcd_gotoxy(1,2); 
15F4:  MOVLW  01
15F6:  MOVWF  xE3
15F8:  MOVLW  02
15FA:  MOVWF  xE4
15FC:  CALL   05BE
....................    printf(lcd_putc," !Valor Almacenado  "); 
1600:  MOVLW  B4
1602:  MOVWF  FF6
1604:  MOVLW  00
1606:  MOVWF  FF7
1608:  RCALL  10B4
....................    lcd_gotoxy(1,4); 
160A:  MOVLW  01
160C:  MOVWF  xE3
160E:  MOVLW  04
1610:  MOVWF  xE4
1612:  CALL   05BE
....................    printf(lcd_putc,"                    "); 
1616:  MOVLW  CA
1618:  MOVWF  FF6
161A:  MOVLW  00
161C:  MOVWF  FF7
161E:  RCALL  10B4
....................    lcd_gotoxy(1,3); 
1620:  MOVLW  01
1622:  MOVWF  xE3
1624:  MOVLW  03
1626:  MOVWF  xE4
1628:  CALL   05BE
....................    printf(lcd_putc,"    Correctamente!  "); 
162C:  MOVLW  E0
162E:  MOVWF  FF6
1630:  MOVLW  00
1632:  MOVWF  FF7
1634:  RCALL  10B4
....................    lcd_gotoxy(1,1); 
1636:  MOVLW  01
1638:  MOVWF  xE3
163A:  MOVWF  xE4
163C:  CALL   05BE
....................    printf(lcd_putc,"                    "); 
1640:  MOVLW  F6
1642:  MOVWF  FF6
1644:  MOVLW  00
1646:  MOVWF  FF7
1648:  RCALL  10B4
....................    delay_ms(2000); 
164A:  MOVLW  08
164C:  MOVWF  xD1
164E:  MOVLW  FA
1650:  MOVWF  xE8
1652:  CALL   04C4
1656:  DECFSZ xD1,F
1658:  BRA    164E
....................    printf(lcd_putc,"\f"); 
165A:  MOVLW  0C
165C:  MOVWF  xE2
165E:  CALL   0620
.................... } 
1662:  RETLW  00
....................  
.................... void Refresco(void){ 
....................    delay_ms(100); 
....................    lcd_init(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... float Leer_Sensor_pH(int8 media){ 
*
17FE:  CLRF   xD5
1800:  CLRF   xD4
1802:  CLRF   xD3
1804:  CLRF   xD2
....................    float promediopH=0.0; 
....................    V1 = sensores(0);   //Lectura de ADC de 10 bit 
1806:  CLRF   xD6
1808:  RCALL  159C
180A:  MOVFF  03,98
180E:  MOVFF  02,97
1812:  MOVFF  01,96
1816:  MOVFF  00,95
....................    if(X1-X0>0){ 
181A:  BSF    FD8.1
181C:  MOVFF  A8,DD
1820:  MOVFF  A7,DC
1824:  MOVFF  A6,DB
1828:  MOVFF  A5,DA
182C:  MOVFF  A0,E1
1830:  MOVFF  9F,E0
1834:  MOVFF  9E,DF
1838:  MOVFF  9D,DE
183C:  CALL   0A7E
1840:  MOVFF  00,D6
1844:  MOVFF  01,D7
1848:  MOVFF  02,D8
184C:  MOVFF  03,D9
1850:  CLRF   xDD
1852:  CLRF   xDC
1854:  CLRF   xDB
1856:  CLRF   xDA
1858:  MOVFF  03,E1
185C:  MOVFF  02,E0
1860:  MOVFF  01,DF
1864:  MOVFF  00,DE
1868:  CALL   0CE8
186C:  BNC   18FE
....................       m=(Y1-Y0)/(X1-X0); //Y1=pH ingresado, Y0=pH ingresado, X0=ADC de Y0, X1=ADC de Y1 
186E:  BSF    FD8.1
1870:  MOVFF  AC,DD
1874:  MOVFF  AB,DC
1878:  MOVFF  AA,DB
187C:  MOVFF  A9,DA
1880:  MOVFF  A4,E1
1884:  MOVFF  A3,E0
1888:  MOVFF  A2,DF
188C:  MOVFF  A1,DE
1890:  CALL   0A7E
1894:  MOVFF  00,D6
1898:  MOVFF  01,D7
189C:  MOVFF  02,D8
18A0:  MOVFF  03,D9
18A4:  BSF    FD8.1
18A6:  MOVFF  A8,DD
18AA:  MOVFF  A7,DC
18AE:  MOVFF  A6,DB
18B2:  MOVFF  A5,DA
18B6:  MOVFF  A0,E1
18BA:  MOVFF  9F,E0
18BE:  MOVFF  9E,DF
18C2:  MOVFF  9D,DE
18C6:  CALL   0A7E
18CA:  MOVFF  D9,DD
18CE:  MOVFF  D8,DC
18D2:  MOVFF  D7,DB
18D6:  MOVFF  D6,DA
18DA:  MOVFF  03,E1
18DE:  MOVFF  02,E0
18E2:  MOVFF  01,DF
18E6:  MOVFF  00,DE
18EA:  CALL   0924
18EE:  MOVFF  03,BC
18F2:  MOVFF  02,BB
18F6:  MOVFF  01,BA
18FA:  MOVFF  00,B9
....................    } 
....................    if(negativo==10) 
18FE:  MOVF   28,W
1900:  SUBLW  0A
1902:  BNZ   196C
....................    { 
....................       PH=(m*V1)+b;// PH=mx+b 
1904:  MOVFF  BC,E5
1908:  MOVFF  BB,E4
190C:  MOVFF  BA,E3
1910:  MOVFF  B9,E2
1914:  MOVFF  98,E9
1918:  MOVFF  97,E8
191C:  MOVFF  96,E7
1920:  MOVFF  95,E6
1924:  RCALL  119E
1926:  MOVFF  00,D6
192A:  MOVFF  01,D7
192E:  MOVFF  02,D8
1932:  MOVFF  03,D9
1936:  BCF    FD8.1
1938:  MOVFF  03,DD
193C:  MOVFF  02,DC
1940:  MOVFF  01,DB
1944:  MOVFF  00,DA
1948:  MOVFF  C0,E1
194C:  MOVFF  BF,E0
1950:  MOVFF  BE,DF
1954:  MOVFF  BD,DE
1958:  CALL   0A7E
195C:  MOVFF  03,9C
1960:  MOVFF  02,9B
1964:  MOVFF  01,9A
1968:  MOVFF  00,99
....................    } 
....................    if(negativo==20) 
196C:  MOVF   28,W
196E:  SUBLW  14
1970:  BNZ   19DA
....................    { 
....................       PH=(m*V1)-b;// PH=mx+b 
1972:  MOVFF  BC,E5
1976:  MOVFF  BB,E4
197A:  MOVFF  BA,E3
197E:  MOVFF  B9,E2
1982:  MOVFF  98,E9
1986:  MOVFF  97,E8
198A:  MOVFF  96,E7
198E:  MOVFF  95,E6
1992:  RCALL  119E
1994:  MOVFF  00,D6
1998:  MOVFF  01,D7
199C:  MOVFF  02,D8
19A0:  MOVFF  03,D9
19A4:  BSF    FD8.1
19A6:  MOVFF  03,DD
19AA:  MOVFF  02,DC
19AE:  MOVFF  01,DB
19B2:  MOVFF  00,DA
19B6:  MOVFF  C0,E1
19BA:  MOVFF  BF,E0
19BE:  MOVFF  BE,DF
19C2:  MOVFF  BD,DE
19C6:  CALL   0A7E
19CA:  MOVFF  03,9C
19CE:  MOVFF  02,9B
19D2:  MOVFF  01,9A
19D6:  MOVFF  00,99
....................    }   
....................     
....................    if(PH<0.0) 
19DA:  MOVFF  9C,DD
19DE:  MOVFF  9B,DC
19E2:  MOVFF  9A,DB
19E6:  MOVFF  99,DA
19EA:  CLRF   xE1
19EC:  CLRF   xE0
19EE:  CLRF   xDF
19F0:  CLRF   xDE
19F2:  CALL   0CE8
19F6:  BNC   1A00
....................    { 
....................       PH=0.0; 
19F8:  CLRF   x9C
19FA:  CLRF   x9B
19FC:  CLRF   x9A
19FE:  CLRF   x99
....................    } 
....................  
....................    if(r>media-1) 
1A00:  MOVLW  01
1A02:  SUBWF  xD1,W
1A04:  SUBWF  24,W
1A06:  BZ    1A0C
1A08:  BNC   1A0C
....................    {r=0;} 
1A0A:  CLRF   24
....................    PromPH[r]=PH;r++; 
1A0C:  MOVF   24,W
1A0E:  MULLW  04
1A10:  MOVF   FF3,W
1A12:  CLRF   03
1A14:  ADDLW  45
1A16:  MOVWF  FE9
1A18:  MOVLW  00
1A1A:  ADDWFC 03,W
1A1C:  MOVWF  FEA
1A1E:  MOVFF  99,FEF
1A22:  MOVFF  9A,FEC
1A26:  MOVFF  9B,FEC
1A2A:  MOVFF  9C,FEC
1A2E:  INCF   24,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1A30:  CLRF   25
1A32:  MOVLW  01
1A34:  SUBWF  xD1,W
1A36:  SUBWF  25,W
1A38:  BZ    1A3C
1A3A:  BC    1AA8
....................    { 
....................       promediopH+=PromPH[q]; 
1A3C:  MOVF   25,W
1A3E:  MULLW  04
1A40:  MOVF   FF3,W
1A42:  CLRF   03
1A44:  ADDLW  45
1A46:  MOVWF  FE9
1A48:  MOVLW  00
1A4A:  ADDWFC 03,W
1A4C:  MOVWF  FEA
1A4E:  MOVFF  FEF,00
1A52:  MOVFF  FEC,01
1A56:  MOVFF  FEC,02
1A5A:  MOVFF  FEC,03
1A5E:  MOVFF  FEA,D7
1A62:  MOVFF  FE9,D6
1A66:  BCF    FD8.1
1A68:  MOVFF  D5,DD
1A6C:  MOVFF  D4,DC
1A70:  MOVFF  D3,DB
1A74:  MOVFF  D2,DA
1A78:  MOVFF  03,E1
1A7C:  MOVFF  02,E0
1A80:  MOVFF  01,DF
1A84:  MOVFF  00,DE
1A88:  CALL   0A7E
1A8C:  MOVFF  D7,FEA
1A90:  MOVFF  D6,FE9
1A94:  MOVFF  03,D5
1A98:  MOVFF  02,D4
1A9C:  MOVFF  01,D3
1AA0:  MOVFF  00,D2
....................    }  
1AA4:  INCF   25,F
1AA6:  BRA    1A32
....................    promediopH=promediopH/media;    
1AA8:  CLRF   xDC
1AAA:  MOVFF  D1,DB
1AAE:  CALL   06B6
1AB2:  MOVFF  D5,DD
1AB6:  MOVFF  D4,DC
1ABA:  MOVFF  D3,DB
1ABE:  MOVFF  D2,DA
1AC2:  MOVFF  03,E1
1AC6:  MOVFF  02,E0
1ACA:  MOVFF  01,DF
1ACE:  MOVFF  00,DE
1AD2:  CALL   0924
1AD6:  MOVFF  03,D5
1ADA:  MOVFF  02,D4
1ADE:  MOVFF  01,D3
1AE2:  MOVFF  00,D2
....................     
....................    return promediopH; 
1AE6:  MOVFF  D2,00
1AEA:  MOVFF  D3,01
1AEE:  MOVFF  D4,02
1AF2:  MOVFF  D5,03
.................... } 
1AF6:  GOTO   3756 (RETURN)
....................  
.................... void Controla(void){ 
....................    sPH=sPpH+Banda; 
....................    sPL=sPpH-Banda; 
....................    if(pVpH>sPL && pVpH<sPH) 
....................    { 
....................       Peristaltica_off; 
....................       estadobp=0; 
....................    } 
....................    else 
....................    { 
....................       if(pVpH<sPL) 
....................       { 
....................          if(tcontrol<tpulso) 
....................          { 
....................             Peristaltica_on; 
....................             estadobp=1; 
....................          } 
....................          else 
....................          { 
....................             Peristaltica_off; 
....................             estadobp=0; 
....................          } 
....................       } 
....................       else 
....................       { 
....................          Peristaltica_off; 
....................          estadobp=0; 
....................       } 
....................    } 
.................... } 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
10D6:  DECFSZ xD2,W
10D8:  BRA    10F0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. un Punto      ");} 
10DA:  MOVLW  02
10DC:  MOVWF  xE3
10DE:  MOVFF  D3,E4
10E2:  CALL   05BE
10E6:  MOVLW  0C
10E8:  MOVWF  FF6
10EA:  MOVLW  01
10EC:  MOVWF  FF7
10EE:  RCALL  10B4
....................    if(x==2) 
10F0:  MOVF   xD2,W
10F2:  SUBLW  02
10F4:  BNZ   110C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. dos Puntos    ");} 
10F6:  MOVLW  02
10F8:  MOVWF  xE3
10FA:  MOVFF  D3,E4
10FE:  CALL   05BE
1102:  MOVLW  20
1104:  MOVWF  FF6
1106:  MOVLW  01
1108:  MOVWF  FF7
110A:  RCALL  10B4
....................    if(x==3) 
110C:  MOVF   xD2,W
110E:  SUBLW  03
1110:  BNZ   1128
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
1112:  MOVLW  02
1114:  MOVWF  xE3
1116:  MOVFF  D3,E4
111A:  CALL   05BE
111E:  MOVLW  34
1120:  MOVWF  FF6
1122:  MOVLW  01
1124:  MOVWF  FF7
1126:  RCALL  10B4
....................    if(x==4) 
1128:  MOVF   xD2,W
112A:  SUBLW  04
112C:  BNZ   1144
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Renovación  ");} 
112E:  MOVLW  02
1130:  MOVWF  xE3
1132:  MOVFF  D3,E4
1136:  CALL   05BE
113A:  MOVLW  48
113C:  MOVWF  FF6
113E:  MOVLW  01
1140:  MOVWF  FF7
1142:  RCALL  10B4
....................    if(x==5) 
1144:  MOVF   xD2,W
1146:  SUBLW  05
1148:  BNZ   1160
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Carga Inicial      ");} 
114A:  MOVLW  02
114C:  MOVWF  xE3
114E:  MOVFF  D3,E4
1152:  CALL   05BE
1156:  MOVLW  5C
1158:  MOVWF  FF6
115A:  MOVLW  01
115C:  MOVWF  FF7
115E:  RCALL  10B4
....................    if(x==6) 
1160:  MOVF   xD2,W
1162:  SUBLW  06
1164:  BNZ   117C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1166:  MOVLW  02
1168:  MOVWF  xE3
116A:  MOVFF  D3,E4
116E:  CALL   05BE
1172:  MOVLW  70
1174:  MOVWF  FF6
1176:  MOVLW  01
1178:  MOVWF  FF7
117A:  RCALL  10B4
.................... } 
117C:  RETLW  00
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
0184:  MOVLW  15
0186:  MOVWF  FCF
0188:  MOVLW  A0
018A:  MOVWF  FCE
....................    tiempos++; 
018C:  INCF   39,F
018E:  BTFSC  FD8.2
0190:  INCF   3A,F
....................    if(tiempos>=200){   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
0192:  MOVF   3A,F
0194:  BNZ   019C
0196:  MOVF   39,W
0198:  SUBLW  C7
019A:  BC    01EA
....................       tiempos=0;Lectura=1;treset++;tcontrol++;visualiza=1; 
019C:  CLRF   3A
019E:  CLRF   39
01A0:  BSF    17.6
01A2:  INCF   29,F
01A4:  INCF   2A,F
01A6:  BSF    18.1
....................       if(SensadoNivelL){ 
01A8:  BTFSS  18.0
01AA:  BRA    01B2
....................          TiempoSensadoNivelL++; 
01AC:  INCF   3B,F
01AE:  BTFSC  FD8.2
01B0:  INCF   3C,F
....................       } 
....................       if(SensadoNivelH){ 
01B2:  BTFSS  18.6
01B4:  BRA    01BC
....................          TiempoSensadoNivelH++; 
01B6:  INCF   3D,F
01B8:  BTFSC  FD8.2
01BA:  INCF   3E,F
....................       } 
....................       if(renovar) 
01BC:  BTFSS  18.2
01BE:  BRA    01C6
....................          tRenovacion++; 
01C0:  INCF   41,F
01C2:  BTFSC  FD8.2
01C4:  INCF   42,F
....................       if(adicionBase) 
01C6:  BTFSS  18.3
01C8:  BRA    01D0
....................          tPeristaltica++; 
01CA:  INCF   43,F
01CC:  BTFSC  FD8.2
01CE:  INCF   44,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadoba==1){ 
01D0:  BTFSS  17.1
01D2:  BRA    01EA
....................          segundos++; 
01D4:  INCF   21,F
....................          if(segundos==60){ 
01D6:  MOVF   21,W
01D8:  SUBLW  3C
01DA:  BNZ   01E0
....................             segundos=0;minutos++; 
01DC:  CLRF   21
01DE:  INCF   22,F
....................          } 
....................          if(minutos==60){ 
01E0:  MOVF   22,W
01E2:  SUBLW  3C
01E4:  BNZ   01EA
....................             minutos=0;horas++; 
01E6:  CLRF   22
01E8:  INCF   23,F
....................          } 
....................       }      
....................    } 
.................... } 
....................  
01EA:  BCF    F9E.0
01EC:  GOTO   0054
.................... void main () 
.................... { 
*
1AFA:  CLRF   FF8
1AFC:  BCF    FD0.7
1AFE:  BSF    07.7
1B00:  CLRF   FEA
1B02:  CLRF   FE9
1B04:  BCF    17.0
1B06:  BCF    17.1
1B08:  BCF    17.2
1B0A:  BCF    17.3
1B0C:  BCF    17.4
1B0E:  BCF    17.5
1B10:  BCF    17.6
1B12:  BCF    17.7
1B14:  BCF    18.0
1B16:  BCF    18.1
1B18:  BCF    18.2
1B1A:  BCF    18.3
1B1C:  BCF    18.4
1B1E:  BCF    18.5
1B20:  BCF    18.6
1B22:  CLRF   19
1B24:  MOVLW  07
1B26:  MOVWF  1A
1B28:  MOVLW  02
1B2A:  MOVWF  1B
1B2C:  MOVWF  1C
1B2E:  MOVLW  03
1B30:  MOVWF  1D
1B32:  MOVLW  02
1B34:  MOVWF  1E
1B36:  MOVWF  1F
1B38:  MOVLW  04
1B3A:  MOVWF  20
1B3C:  CLRF   21
1B3E:  CLRF   22
1B40:  CLRF   23
1B42:  CLRF   24
1B44:  CLRF   25
1B46:  MOVLW  06
1B48:  MOVWF  26
1B4A:  MOVLW  01
1B4C:  MOVWF  27
1B4E:  MOVLW  0A
1B50:  MOVWF  28
1B52:  CLRF   29
1B54:  CLRF   2A
1B56:  MOVLW  03
1B58:  MOVWF  2B
1B5A:  MOVLW  0A
1B5C:  MOVWF  2C
1B5E:  CLRF   2D
1B60:  CLRF   2E
1B62:  CLRF   2F
1B64:  CLRF   30
1B66:  CLRF   31
1B68:  CLRF   32
1B6A:  CLRF   33
1B6C:  CLRF   34
1B6E:  CLRF   35
1B70:  CLRF   3C
1B72:  CLRF   3B
1B74:  CLRF   3E
1B76:  CLRF   3D
1B78:  CLRF   40
1B7A:  MOVLW  64
1B7C:  MOVWF  3F
1B7E:  CLRF   42
1B80:  CLRF   41
1B82:  CLRF   44
1B84:  CLRF   43
1B86:  CLRF   x98
1B88:  CLRF   x97
1B8A:  CLRF   x96
1B8C:  CLRF   x95
1B8E:  CLRF   x9C
1B90:  CLRF   x9B
1B92:  CLRF   x9A
1B94:  CLRF   x99
1B96:  CLRF   xA0
1B98:  CLRF   x9F
1B9A:  CLRF   x9E
1B9C:  CLRF   x9D
1B9E:  CLRF   xA4
1BA0:  CLRF   xA3
1BA2:  CLRF   xA2
1BA4:  CLRF   xA1
1BA6:  CLRF   xA8
1BA8:  CLRF   xA7
1BAA:  CLRF   xA6
1BAC:  CLRF   xA5
1BAE:  CLRF   xAC
1BB0:  CLRF   xAB
1BB2:  CLRF   xAA
1BB4:  CLRF   xA9
1BB6:  CLRF   xB0
1BB8:  CLRF   xAF
1BBA:  CLRF   xAE
1BBC:  MOVLW  81
1BBE:  MOVWF  xAD
1BC0:  CLRF   xB4
1BC2:  CLRF   xB3
1BC4:  CLRF   xB2
1BC6:  CLRF   xB1
1BC8:  CLRF   xB8
1BCA:  CLRF   xB7
1BCC:  MOVLW  60
1BCE:  MOVWF  xB6
1BD0:  MOVLW  81
1BD2:  MOVWF  xB5
1BD4:  CLRF   xBC
1BD6:  CLRF   xBB
1BD8:  CLRF   xBA
1BDA:  CLRF   xB9
1BDC:  CLRF   xC0
1BDE:  CLRF   xBF
1BE0:  CLRF   xBE
1BE2:  CLRF   xBD
1BE4:  CLRF   xC4
1BE6:  CLRF   xC3
1BE8:  CLRF   xC2
1BEA:  CLRF   xC1
1BEC:  CLRF   xC8
1BEE:  CLRF   xC7
1BF0:  CLRF   xC6
1BF2:  CLRF   xC5
1BF4:  CLRF   xCC
1BF6:  CLRF   xCB
1BF8:  CLRF   xCA
1BFA:  CLRF   xC9
1BFC:  CLRF   xD0
1BFE:  CLRF   xCF
1C00:  CLRF   xCE
1C02:  CLRF   xCD
1C04:  MOVF   FC1,W
1C06:  ANDLW  C0
1C08:  IORLW  0F
1C0A:  MOVWF  FC1
1C0C:  MOVLW  07
1C0E:  MOVWF  FB4
1C10:  MOVLW  3E
1C12:  MOVWF  36
1C14:  MOVLW  20
1C16:  MOVWF  37
1C18:  MOVLW  5E
1C1A:  MOVWF  38
1C1C:  CLRF   45
1C1E:  CLRF   46
1C20:  CLRF   47
1C22:  CLRF   48
1C24:  CLRF   49
1C26:  CLRF   4A
1C28:  CLRF   4B
1C2A:  CLRF   4C
1C2C:  CLRF   4D
1C2E:  CLRF   4E
1C30:  CLRF   4F
1C32:  CLRF   50
1C34:  CLRF   51
1C36:  CLRF   52
1C38:  CLRF   53
1C3A:  CLRF   54
1C3C:  CLRF   55
1C3E:  CLRF   56
1C40:  CLRF   57
1C42:  CLRF   58
1C44:  CLRF   59
1C46:  CLRF   5A
1C48:  CLRF   5B
1C4A:  CLRF   5C
1C4C:  CLRF   5D
1C4E:  CLRF   5E
1C50:  CLRF   5F
1C52:  CLRF   x60
1C54:  CLRF   x61
1C56:  CLRF   x62
1C58:  CLRF   x63
1C5A:  CLRF   x64
1C5C:  CLRF   x65
1C5E:  CLRF   x66
1C60:  CLRF   x67
1C62:  CLRF   x68
1C64:  CLRF   x69
1C66:  CLRF   x6A
1C68:  CLRF   x6B
1C6A:  CLRF   x6C
1C6C:  CLRF   x6D
1C6E:  CLRF   x6E
1C70:  CLRF   x6F
1C72:  CLRF   x70
1C74:  CLRF   x71
1C76:  CLRF   x72
1C78:  CLRF   x73
1C7A:  CLRF   x74
1C7C:  CLRF   x75
1C7E:  CLRF   x76
1C80:  CLRF   x77
1C82:  CLRF   x78
1C84:  CLRF   x79
1C86:  CLRF   x7A
1C88:  CLRF   x7B
1C8A:  CLRF   x7C
1C8C:  CLRF   x7D
1C8E:  CLRF   x7E
1C90:  CLRF   x7F
1C92:  CLRF   x80
1C94:  CLRF   x81
1C96:  CLRF   x82
1C98:  CLRF   x83
1C9A:  CLRF   x84
1C9C:  CLRF   x85
1C9E:  CLRF   x86
1CA0:  CLRF   x87
1CA2:  CLRF   x88
1CA4:  CLRF   x89
1CA6:  CLRF   x8A
1CA8:  CLRF   x8B
1CAA:  CLRF   x8C
1CAC:  CLRF   x8D
1CAE:  CLRF   x8E
1CB0:  CLRF   x8F
1CB2:  CLRF   x90
1CB4:  CLRF   x91
1CB6:  CLRF   x92
1CB8:  CLRF   x93
1CBA:  CLRF   x94
....................    ConfigInicial(); 
1CBC:  GOTO   067E
....................    LeeEEPROM(); 
1CC0:  GOTO   06EC
....................    LimitaValores(); 
1CC4:  GOTO   0D5E
....................    lcd_gotoxy(1,1); 
1CC8:  MOVLW  01
1CCA:  MOVWF  xE3
1CCC:  MOVWF  xE4
1CCE:  CALL   05BE
....................    printf(lcd_putc,"     SCRUBBER       "); 
1CD2:  MOVLW  F0
1CD4:  MOVWF  FF6
1CD6:  MOVLW  01
1CD8:  MOVWF  FF7
1CDA:  CALL   10B4
....................    lcd_gotoxy(1,2); 
1CDE:  MOVLW  01
1CE0:  MOVWF  xE3
1CE2:  MOVLW  02
1CE4:  MOVWF  xE4
1CE6:  CALL   05BE
....................    printf(lcd_putc,"      HUMEDO        "); 
1CEA:  MOVLW  06
1CEC:  MOVWF  FF6
1CEE:  MOVLW  02
1CF0:  MOVWF  FF7
1CF2:  CALL   10B4
....................    lcd_gotoxy(1,3); 
1CF6:  MOVLW  01
1CF8:  MOVWF  xE3
1CFA:  MOVLW  03
1CFC:  MOVWF  xE4
1CFE:  CALL   05BE
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1D02:  MOVLW  1C
1D04:  MOVWF  FF6
1D06:  MOVLW  02
1D08:  MOVWF  FF7
1D0A:  CALL   10B4
....................    lcd_gotoxy(1,4); 
1D0E:  MOVLW  01
1D10:  MOVWF  xE3
1D12:  MOVLW  04
1D14:  MOVWF  xE4
1D16:  CALL   05BE
....................    printf(lcd_putc,"  REF:OPSCR120-01   "); 
1D1A:  MOVLW  32
1D1C:  MOVWF  FF6
1D1E:  MOVLW  02
1D20:  MOVWF  FF7
1D22:  CALL   10B4
....................    delay_ms(1500); 
1D26:  MOVLW  06
1D28:  MOVWF  xD1
1D2A:  MOVLW  FA
1D2C:  MOVWF  xE8
1D2E:  CALL   04C4
1D32:  DECFSZ xD1,F
1D34:  BRA    1D2A
....................    printf(lcd_putc,"\f"); 
1D36:  MOVLW  0C
1D38:  MOVWF  xE2
1D3A:  CALL   0620
....................     
....................    if(UP){ 
1D3E:  BSF    F92.2
1D40:  BTFSC  F80.2
1D42:  BRA    1DF2
....................       delay_ms(1000); 
1D44:  MOVLW  04
1D46:  MOVWF  xD1
1D48:  MOVLW  FA
1D4A:  MOVWF  xE8
1D4C:  CALL   04C4
1D50:  DECFSZ xD1,F
1D52:  BRA    1D48
....................       if(UP){ 
1D54:  BSF    F92.2
1D56:  BTFSC  F80.2
1D58:  BRA    1DF2
....................          write_eeprom(50,0); 
1D5A:  MOVLW  32
1D5C:  MOVWF  FA9
1D5E:  CLRF   FA8
1D60:  BCF    FA6.6
1D62:  BCF    FA6.7
1D64:  BSF    FA6.2
1D66:  MOVF   FF2,W
1D68:  MOVWF  00
1D6A:  BCF    FF2.7
1D6C:  MOVLB  F
1D6E:  MOVLW  55
1D70:  MOVWF  FA7
1D72:  MOVLW  AA
1D74:  MOVWF  FA7
1D76:  BSF    FA6.1
1D78:  BTFSC  FA6.1
1D7A:  BRA    1D78
1D7C:  BCF    FA6.2
1D7E:  MOVF   00,W
1D80:  IORWF  FF2,F
....................          delay_ms(10); 
1D82:  MOVLW  0A
1D84:  MOVLB  0
1D86:  MOVWF  xE8
1D88:  CALL   04C4
....................          write_eeprom(51,0); 
1D8C:  MOVLW  33
1D8E:  MOVWF  FA9
1D90:  CLRF   FA8
1D92:  BCF    FA6.6
1D94:  BCF    FA6.7
1D96:  BSF    FA6.2
1D98:  MOVF   FF2,W
1D9A:  MOVWF  00
1D9C:  BCF    FF2.7
1D9E:  MOVLB  F
1DA0:  MOVLW  55
1DA2:  MOVWF  FA7
1DA4:  MOVLW  AA
1DA6:  MOVWF  FA7
1DA8:  BSF    FA6.1
1DAA:  BTFSC  FA6.1
1DAC:  BRA    1DAA
1DAE:  BCF    FA6.2
1DB0:  MOVF   00,W
1DB2:  IORWF  FF2,F
....................          delay_ms(10); 
1DB4:  MOVLW  0A
1DB6:  MOVLB  0
1DB8:  MOVWF  xE8
1DBA:  CALL   04C4
....................          write_eeprom(52,0); 
1DBE:  MOVLW  34
1DC0:  MOVWF  FA9
1DC2:  CLRF   FA8
1DC4:  BCF    FA6.6
1DC6:  BCF    FA6.7
1DC8:  BSF    FA6.2
1DCA:  MOVF   FF2,W
1DCC:  MOVWF  00
1DCE:  BCF    FF2.7
1DD0:  MOVLB  F
1DD2:  MOVLW  55
1DD4:  MOVWF  FA7
1DD6:  MOVLW  AA
1DD8:  MOVWF  FA7
1DDA:  BSF    FA6.1
1DDC:  BTFSC  FA6.1
1DDE:  BRA    1DDC
1DE0:  BCF    FA6.2
1DE2:  MOVF   00,W
1DE4:  IORWF  FF2,F
....................          delay_ms(10); 
1DE6:  MOVLW  0A
1DE8:  MOVLB  0
1DEA:  MOVWF  xE8
1DEC:  CALL   04C4
....................          reset_cpu(); 
1DF0:  RESET
....................       } 
....................    } 
....................    
....................    Menu=100; 
1DF2:  MOVLW  64
1DF4:  MOVWF  19
....................    while(true){ 
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1DF6:  DECFSZ 19,W
1DF8:  BRA    1FDC
....................    lcd_gotoxy(1,1); 
1DFA:  MOVLW  01
1DFC:  MOVWF  xE3
1DFE:  MOVWF  xE4
1E00:  CALL   05BE
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1E04:  MOVLW  48
1E06:  MOVWF  FF6
1E08:  MOVLW  02
1E0A:  MOVWF  FF7
1E0C:  CALL   10B4
....................       if(paso<0) 
1E10:  BTFSC  35.7
1E12:  BRA    1E16
1E14:  BRA    1E18
....................          paso=0; 
1E16:  CLRF   35
....................          
....................       if(UP){//Si oprime hacia arriba 
1E18:  BSF    F92.2
1E1A:  BTFSC  F80.2
1E1C:  BRA    1E38
....................          if(Flanco == 0){ 
1E1E:  BTFSC  17.3
1E20:  BRA    1E36
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
1E22:  DECF   1E,F
1E24:  DECF   1C,F
1E26:  MOVLW  01
1E28:  ADDWF  1C,W
1E2A:  MOVWF  1D
1E2C:  BSF    17.3
1E2E:  MOVLW  1E
1E30:  MOVWF  xE8
1E32:  CALL   04C4
....................          } 
....................       }else{ 
1E36:  BRA    1E3A
....................          Flanco = 0; 
1E38:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
1E3A:  BSF    F92.3
1E3C:  BTFSC  F80.3
1E3E:  BRA    1E5A
....................          if(Flanco2 == 0){ 
1E40:  BTFSC  17.5
1E42:  BRA    1E58
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
1E44:  INCF   1E,F
1E46:  INCF   1C,F
1E48:  MOVLW  01
1E4A:  SUBWF  1C,W
1E4C:  MOVWF  1D
1E4E:  BSF    17.5
1E50:  MOVLW  1E
1E52:  MOVWF  xE8
1E54:  CALL   04C4
....................          } 
....................       }else{ 
1E58:  BRA    1E5C
....................          Flanco2 = 0; 
1E5A:  BCF    17.5
....................       } 
....................     
....................         if(Flecha2>nMenuH) 
1E5C:  MOVF   1E,W
1E5E:  SUBWF  20,W
1E60:  BC    1E72
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1E62:  INCF   35,F
1E64:  MOVFF  1E,20
1E68:  MOVLW  02
1E6A:  SUBWF  20,W
1E6C:  MOVWF  1F
1E6E:  MOVLW  04
1E70:  MOVWF  1C
....................          
....................         if(Flecha2<nMenuL) 
1E72:  MOVF   1F,W
1E74:  SUBWF  1E,W
1E76:  BC    1E88
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1E78:  DECF   35,F
1E7A:  MOVFF  1E,1F
1E7E:  MOVLW  02
1E80:  ADDWF  1F,W
1E82:  MOVWF  20
1E84:  MOVLW  02
1E86:  MOVWF  1C
....................          
....................         if(Flecha2>n_opcionH) 
1E88:  MOVF   1E,W
1E8A:  SUBWF  1A,W
1E8C:  BC    1EA0
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1E8E:  MOVFF  1B,1E
1E92:  MOVLW  02
1E94:  MOVWF  1C
1E96:  CLRF   35
1E98:  MOVFF  1E,1F
1E9C:  ADDWF  1F,W
1E9E:  MOVWF  20
....................          
....................         if(Flecha2<n_opcionL) 
1EA0:  MOVF   1B,W
1EA2:  SUBWF  1E,W
1EA4:  BC    1EBC
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
1EA6:  MOVFF  1A,1E
1EAA:  MOVLW  04
1EAC:  MOVWF  1C
1EAE:  SUBWF  1A,W
1EB0:  MOVWF  35
1EB2:  MOVFF  1E,20
1EB6:  MOVLW  02
1EB8:  SUBWF  20,W
1EBA:  MOVWF  1F
....................          
....................         mensajes(1+paso,2); 
1EBC:  MOVLW  01
1EBE:  ADDWF  35,W
1EC0:  MOVWF  xD1
1EC2:  MOVWF  xD2
1EC4:  MOVLW  02
1EC6:  MOVWF  xD3
1EC8:  CALL   10D6
....................         mensajes(2+paso,3); 
1ECC:  MOVLW  02
1ECE:  ADDWF  35,W
1ED0:  MOVWF  xD1
1ED2:  MOVWF  xD2
1ED4:  MOVLW  03
1ED6:  MOVWF  xD3
1ED8:  CALL   10D6
....................         mensajes(3+paso,4); 
1EDC:  MOVLW  03
1EDE:  ADDWF  35,W
1EE0:  MOVWF  xD1
1EE2:  MOVWF  xD2
1EE4:  MOVLW  04
1EE6:  MOVWF  xD3
1EE8:  CALL   10D6
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1EEC:  MOVLW  01
1EEE:  MOVWF  xE3
1EF0:  MOVFF  1C,E4
1EF4:  CALL   05BE
....................         lcd_putc(t[0]); 
1EF8:  MOVFF  36,E2
1EFC:  CALL   0620
....................  
....................         if(Flecha==2) 
1F00:  MOVF   1C,W
1F02:  SUBLW  02
1F04:  BNZ   1F2E
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1F06:  MOVLW  01
1F08:  MOVWF  xE3
1F0A:  MOVLW  04
1F0C:  MOVWF  xE4
1F0E:  CALL   05BE
....................             lcd_putc(t[1]); 
1F12:  MOVFF  37,E2
1F16:  CALL   0620
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1F1A:  MOVLW  01
1F1C:  MOVWF  xE3
1F1E:  MOVLW  03
1F20:  MOVWF  xE4
1F22:  CALL   05BE
....................             lcd_putc(t[1]); 
1F26:  MOVFF  37,E2
1F2A:  CALL   0620
....................           } 
....................          
....................         if(Flecha==4) 
1F2E:  MOVF   1C,W
1F30:  SUBLW  04
1F32:  BNZ   1F5C
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1F34:  MOVLW  01
1F36:  MOVWF  xE3
1F38:  MOVLW  02
1F3A:  MOVWF  xE4
1F3C:  CALL   05BE
....................             lcd_putc(t[1]); 
1F40:  MOVFF  37,E2
1F44:  CALL   0620
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1F48:  MOVLW  01
1F4A:  MOVWF  xE3
1F4C:  MOVLW  03
1F4E:  MOVWF  xE4
1F50:  CALL   05BE
....................             lcd_putc(t[1]); 
1F54:  MOVFF  37,E2
1F58:  CALL   0620
....................           } 
....................          
....................         if(Flecha==3){ 
1F5C:  MOVF   1C,W
1F5E:  SUBLW  03
1F60:  BNZ   1F8A
....................             lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1F62:  MOVLW  01
1F64:  MOVWF  xE3
1F66:  MOVLW  04
1F68:  MOVWF  xE4
1F6A:  CALL   05BE
....................             lcd_putc(t[1]); 
1F6E:  MOVFF  37,E2
1F72:  CALL   0620
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1F76:  MOVLW  01
1F78:  MOVWF  xE3
1F7A:  MOVLW  02
1F7C:  MOVWF  xE4
1F7E:  CALL   05BE
....................             lcd_putc(t[1]); 
1F82:  MOVFF  37,E2
1F86:  CALL   0620
....................         } 
....................  
....................        if(RIGHT){// Si oprime derecha 
1F8A:  BSF    F92.4
1F8C:  BTFSC  F80.4
1F8E:  BRA    1FB8
....................          if(Flanco1 == 0){ 
1F90:  BTFSC  17.4
1F92:  BRA    1FB6
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
1F94:  BSF    17.4
1F96:  MOVFF  1E,19
1F9A:  MOVLW  03
1F9C:  MOVWF  1C
1F9E:  MOVLW  02
1FA0:  MOVWF  xD1
1FA2:  MOVLW  96
1FA4:  MOVWF  xE8
1FA6:  CALL   04C4
1FAA:  DECFSZ xD1,F
1FAC:  BRA    1FA2
1FAE:  MOVLW  0C
1FB0:  MOVWF  xE2
1FB2:  CALL   0620
....................          } 
....................        }else{ 
1FB6:  BRA    1FBA
....................          Flanco1 = 0; 
1FB8:  BCF    17.4
....................        } 
....................              
....................        if(LEFT){ 
1FBA:  BSF    F92.5
1FBC:  BTFSC  F80.5
1FBE:  BRA    1FDC
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
1FC0:  MOVLW  64
1FC2:  MOVWF  19
1FC4:  MOVLW  0C
1FC6:  MOVWF  xE2
1FC8:  CALL   0620
1FCC:  MOVLW  02
1FCE:  MOVWF  xD1
1FD0:  MOVLW  FA
1FD2:  MOVWF  xE8
1FD4:  CALL   04C4
1FD8:  DECFSZ xD1,F
1FDA:  BRA    1FD0
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de Calibracion en un punto 
1FDC:  MOVF   19,W
1FDE:  SUBLW  02
1FE0:  BTFSS  FD8.2
1FE2:  BRA    23EC
....................     
....................    lcd_gotoxy(1,1); 
1FE4:  MOVLW  01
1FE6:  MOVWF  xE3
1FE8:  MOVWF  xE4
1FEA:  CALL   05BE
....................    printf(lcd_putc,"Calibracion un Punto"); 
1FEE:  MOVLW  5E
1FF0:  MOVWF  FF6
1FF2:  MOVLW  02
1FF4:  MOVWF  FF7
1FF6:  CALL   10B4
....................    lcd_gotoxy(1,2); 
1FFA:  MOVLW  01
1FFC:  MOVWF  xE3
1FFE:  MOVLW  02
2000:  MOVWF  xE4
2002:  CALL   05BE
....................    printf(lcd_putc," Ingrese valor  pH  "); 
2006:  MOVLW  74
2008:  MOVWF  FF6
200A:  MOVLW  02
200C:  MOVWF  FF7
200E:  CALL   10B4
....................    lcd_gotoxy(1,3); 
2012:  MOVLW  01
2014:  MOVWF  xE3
2016:  MOVLW  03
2018:  MOVWF  xE4
201A:  CALL   05BE
....................    printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
201E:  MOVLW  8A
2020:  MOVWF  FF6
2022:  MOVLW  02
2024:  MOVWF  FF7
2026:  MOVLW  05
2028:  MOVWF  xD5
202A:  CALL   117E
202E:  MOVLW  01
2030:  MOVWF  FE9
2032:  MOVFF  B0,D8
2036:  MOVFF  AF,D7
203A:  MOVFF  AE,D6
203E:  MOVFF  AD,D5
2042:  MOVWF  xD9
2044:  CALL   134A
2048:  MOVLW  94
204A:  MOVWF  FF6
204C:  MOVLW  02
204E:  MOVWF  FF7
2050:  MOVLW  05
2052:  MOVWF  xD5
2054:  CALL   117E
....................     
....................           
....................    if(pHpoint<0.5) 
2058:  MOVFF  B0,DD
205C:  MOVFF  AF,DC
2060:  MOVFF  AE,DB
2064:  MOVFF  AD,DA
2068:  CLRF   xE1
206A:  CLRF   xE0
206C:  CLRF   xDF
206E:  MOVLW  7E
2070:  MOVWF  xDE
2072:  CALL   0CE8
2076:  BNC   2082
....................       pHpoint=0.5; 
2078:  CLRF   xB0
207A:  CLRF   xAF
207C:  CLRF   xAE
207E:  MOVLW  7E
2080:  MOVWF  xAD
....................     
....................    if(pHpoint>14.0) 
2082:  CLRF   xDD
2084:  CLRF   xDC
2086:  MOVLW  60
2088:  MOVWF  xDB
208A:  MOVLW  82
208C:  MOVWF  xDA
208E:  MOVFF  B0,E1
2092:  MOVFF  AF,E0
2096:  MOVFF  AE,DF
209A:  MOVFF  AD,DE
209E:  CALL   0CE8
20A2:  BNC   20B0
....................       pHpoint=14.0; 
20A4:  CLRF   xB0
20A6:  CLRF   xAF
20A8:  MOVLW  60
20AA:  MOVWF  xAE
20AC:  MOVLW  82
20AE:  MOVWF  xAD
....................        
....................    if(UP){ 
20B0:  BSF    F92.2
20B2:  BTFSC  F80.2
20B4:  BRA    2116
....................       if(pHpoint<14.0){ 
20B6:  MOVFF  B0,DD
20BA:  MOVFF  AF,DC
20BE:  MOVFF  AE,DB
20C2:  MOVFF  AD,DA
20C6:  CLRF   xE1
20C8:  CLRF   xE0
20CA:  MOVLW  60
20CC:  MOVWF  xDF
20CE:  MOVLW  82
20D0:  MOVWF  xDE
20D2:  CALL   0CE8
20D6:  BNC   2116
....................          pHpoint+=0.1;delay_ms(50); 
20D8:  BCF    FD8.1
20DA:  MOVFF  B0,DD
20DE:  MOVFF  AF,DC
20E2:  MOVFF  AE,DB
20E6:  MOVFF  AD,DA
20EA:  MOVLW  CD
20EC:  MOVWF  xE1
20EE:  MOVLW  CC
20F0:  MOVWF  xE0
20F2:  MOVLW  4C
20F4:  MOVWF  xDF
20F6:  MOVLW  7B
20F8:  MOVWF  xDE
20FA:  CALL   0A7E
20FE:  MOVFF  03,B0
2102:  MOVFF  02,AF
2106:  MOVFF  01,AE
210A:  MOVFF  00,AD
210E:  MOVLW  32
2110:  MOVWF  xE8
2112:  CALL   04C4
....................       } 
....................    } 
....................     
....................    if(DOWN){ 
2116:  BSF    F92.3
2118:  BTFSC  F80.3
211A:  BRA    217A
....................       if(pHpoint>0.5){ 
211C:  CLRF   xDD
211E:  CLRF   xDC
2120:  CLRF   xDB
2122:  MOVLW  7E
2124:  MOVWF  xDA
2126:  MOVFF  B0,E1
212A:  MOVFF  AF,E0
212E:  MOVFF  AE,DF
2132:  MOVFF  AD,DE
2136:  CALL   0CE8
213A:  BNC   217A
....................          pHpoint-=0.1;delay_ms(50); 
213C:  BSF    FD8.1
213E:  MOVFF  B0,DD
2142:  MOVFF  AF,DC
2146:  MOVFF  AE,DB
214A:  MOVFF  AD,DA
214E:  MOVLW  CD
2150:  MOVWF  xE1
2152:  MOVLW  CC
2154:  MOVWF  xE0
2156:  MOVLW  4C
2158:  MOVWF  xDF
215A:  MOVLW  7B
215C:  MOVWF  xDE
215E:  CALL   0A7E
2162:  MOVFF  03,B0
2166:  MOVFF  02,AF
216A:  MOVFF  01,AE
216E:  MOVFF  00,AD
2172:  MOVLW  32
2174:  MOVWF  xE8
2176:  CALL   04C4
....................       } 
....................    } 
....................     
....................    if(RIGHT){ 
217A:  BSF    F92.4
217C:  BTFSC  F80.4
217E:  BRA    23C2
....................       b=pHpoint-pVpH; 
2180:  BSF    FD8.1
2182:  MOVFF  B0,DD
2186:  MOVFF  AF,DC
218A:  MOVFF  AE,DB
218E:  MOVFF  AD,DA
2192:  MOVFF  B4,E1
2196:  MOVFF  B3,E0
219A:  MOVFF  B2,DF
219E:  MOVFF  B1,DE
21A2:  CALL   0A7E
21A6:  MOVFF  03,C0
21AA:  MOVFF  02,BF
21AE:  MOVFF  01,BE
21B2:  MOVFF  00,BD
....................       if(b>=0){ 
21B6:  CLRF   xDD
21B8:  CLRF   xDC
21BA:  CLRF   xDB
21BC:  CLRF   xDA
21BE:  MOVFF  C0,E1
21C2:  MOVFF  BF,E0
21C6:  MOVFF  BE,DF
21CA:  MOVFF  BD,DE
21CE:  CALL   0CE8
21D2:  BC    21D6
21D4:  BNZ   2206
....................          negativo=10;write_eeprom(60,negativo); 
21D6:  MOVLW  0A
21D8:  MOVWF  28
21DA:  MOVLW  3C
21DC:  MOVWF  FA9
21DE:  MOVFF  28,FA8
21E2:  BCF    FA6.6
21E4:  BCF    FA6.7
21E6:  BSF    FA6.2
21E8:  MOVF   FF2,W
21EA:  MOVWF  00
21EC:  BCF    FF2.7
21EE:  MOVLB  F
21F0:  MOVLW  55
21F2:  MOVWF  FA7
21F4:  MOVLW  AA
21F6:  MOVWF  FA7
21F8:  BSF    FA6.1
21FA:  BTFSC  FA6.1
21FC:  BRA    21FA
21FE:  BCF    FA6.2
2200:  MOVF   00,W
2202:  IORWF  FF2,F
2204:  MOVLB  0
....................       } 
....................       if(b<0){ 
2206:  MOVFF  C0,DD
220A:  MOVFF  BF,DC
220E:  MOVFF  BE,DB
2212:  MOVFF  BD,DA
2216:  CLRF   xE1
2218:  CLRF   xE0
221A:  CLRF   xDF
221C:  CLRF   xDE
221E:  CALL   0CE8
2222:  BNC   2254
....................          negativo=20;write_eeprom(60,negativo); 
2224:  MOVLW  14
2226:  MOVWF  28
2228:  MOVLW  3C
222A:  MOVWF  FA9
222C:  MOVFF  28,FA8
2230:  BCF    FA6.6
2232:  BCF    FA6.7
2234:  BSF    FA6.2
2236:  MOVF   FF2,W
2238:  MOVWF  00
223A:  BCF    FF2.7
223C:  MOVLB  F
223E:  MOVLW  55
2240:  MOVWF  FA7
2242:  MOVLW  AA
2244:  MOVWF  FA7
2246:  BSF    FA6.1
2248:  BTFSC  FA6.1
224A:  BRA    2248
224C:  BCF    FA6.2
224E:  MOVF   00,W
2250:  IORWF  FF2,F
2252:  MOVLB  0
....................       } 
....................       b=abs(b); 
2254:  MOVFF  BD,00
2258:  MOVFF  BE,01
225C:  MOVFF  BF,02
2260:  MOVFF  C0,03
2264:  BCF    01.7
2266:  MOVFF  C0,C0
226A:  MOVFF  BF,BF
226E:  MOVFF  01,BE
2272:  MOVFF  BD,BD
....................       bInt=(int8)b; 
2276:  MOVFF  C0,D4
227A:  MOVFF  BF,D3
227E:  MOVFF  BE,D2
2282:  MOVFF  BD,D1
2286:  CALL   14D0
228A:  MOVFF  01,2F
....................       tmp=b-bInt; 
228E:  CLRF   xDC
2290:  MOVFF  2F,DB
2294:  CALL   06B6
2298:  BSF    FD8.1
229A:  MOVFF  C0,DD
229E:  MOVFF  BF,DC
22A2:  MOVFF  BE,DB
22A6:  MOVFF  BD,DA
22AA:  MOVFF  03,E1
22AE:  MOVFF  02,E0
22B2:  MOVFF  01,DF
22B6:  MOVFF  00,DE
22BA:  CALL   0A7E
22BE:  MOVFF  03,C8
22C2:  MOVFF  02,C7
22C6:  MOVFF  01,C6
22CA:  MOVFF  00,C5
....................       bDec=tmp*100; 
22CE:  MOVFF  C8,E5
22D2:  MOVFF  C7,E4
22D6:  MOVFF  C6,E3
22DA:  MOVFF  C5,E2
22DE:  CLRF   xE9
22E0:  CLRF   xE8
22E2:  MOVLW  48
22E4:  MOVWF  xE7
22E6:  MOVLW  85
22E8:  MOVWF  xE6
22EA:  CALL   119E
22EE:  MOVFF  03,D4
22F2:  MOVFF  02,D3
22F6:  MOVFF  01,D2
22FA:  MOVFF  00,D1
22FE:  CALL   14D0
2302:  MOVFF  01,30
....................       write_eeprom(20,bInt); 
2306:  MOVLW  14
2308:  MOVWF  FA9
230A:  MOVFF  2F,FA8
230E:  BCF    FA6.6
2310:  BCF    FA6.7
2312:  BSF    FA6.2
2314:  MOVF   FF2,W
2316:  MOVWF  00
2318:  BCF    FF2.7
231A:  MOVLB  F
231C:  MOVLW  55
231E:  MOVWF  FA7
2320:  MOVLW  AA
2322:  MOVWF  FA7
2324:  BSF    FA6.1
2326:  BTFSC  FA6.1
2328:  BRA    2326
232A:  BCF    FA6.2
232C:  MOVF   00,W
232E:  IORWF  FF2,F
....................       delay_ms(20); 
2330:  MOVLW  14
2332:  MOVLB  0
2334:  MOVWF  xE8
2336:  CALL   04C4
....................       write_eeprom(21,bDec); 
233A:  MOVLW  15
233C:  MOVWF  FA9
233E:  MOVFF  30,FA8
2342:  BCF    FA6.6
2344:  BCF    FA6.7
2346:  BSF    FA6.2
2348:  MOVF   FF2,W
234A:  MOVWF  00
234C:  BCF    FF2.7
234E:  MOVLB  F
2350:  MOVLW  55
2352:  MOVWF  FA7
2354:  MOVLW  AA
2356:  MOVWF  FA7
2358:  BSF    FA6.1
235A:  BTFSC  FA6.1
235C:  BRA    235A
235E:  BCF    FA6.2
2360:  MOVF   00,W
2362:  IORWF  FF2,F
....................       delay_ms(200); 
2364:  MOVLW  C8
2366:  MOVLB  0
2368:  MOVWF  xE8
236A:  CALL   04C4
....................       printf(lcd_putc,"\f"); 
236E:  MOVLW  0C
2370:  MOVWF  xE2
2372:  CALL   0620
....................       lcd_gotoxy(1,2); 
2376:  MOVLW  01
2378:  MOVWF  xE3
237A:  MOVLW  02
237C:  MOVWF  xE4
237E:  CALL   05BE
....................       printf(lcd_putc,"   Calibracion   "); 
2382:  MOVLW  9A
2384:  MOVWF  FF6
2386:  MOVLW  02
2388:  MOVWF  FF7
238A:  CALL   10B4
....................       lcd_gotoxy(1,3); 
238E:  MOVLW  01
2390:  MOVWF  xE3
2392:  MOVLW  03
2394:  MOVWF  xE4
2396:  CALL   05BE
....................       printf(lcd_putc,"     Exitosa     "); 
239A:  MOVLW  AC
239C:  MOVWF  FF6
239E:  MOVLW  02
23A0:  MOVWF  FF7
23A2:  CALL   10B4
....................       delay_ms(500); 
23A6:  MOVLW  02
23A8:  MOVWF  xD1
23AA:  MOVLW  FA
23AC:  MOVWF  xE8
23AE:  CALL   04C4
23B2:  DECFSZ xD1,F
23B4:  BRA    23AA
....................       printf(lcd_putc,"\f"); 
23B6:  MOVLW  0C
23B8:  MOVWF  xE2
23BA:  CALL   0620
....................       Menu=100; 
23BE:  MOVLW  64
23C0:  MOVWF  19
....................    } 
....................     
....................    if(LEFT){ 
23C2:  BSF    F92.5
23C4:  BTFSC  F80.5
23C6:  BRA    23EC
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
23C8:  MOVLW  01
23CA:  MOVWF  19
23CC:  CLRF   35
23CE:  MOVLW  04
23D0:  MOVWF  xD1
23D2:  MOVLW  FA
23D4:  MOVWF  xE8
23D6:  CALL   04C4
23DA:  DECFSZ xD1,F
23DC:  BRA    23D2
23DE:  MOVLW  02
23E0:  MOVWF  1C
23E2:  MOVWF  1E
23E4:  MOVLW  0C
23E6:  MOVWF  xE2
23E8:  CALL   0620
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de calibracion en dos puntos 
23EC:  MOVF   19,W
23EE:  SUBLW  03
23F0:  BTFSS  FD8.2
23F2:  GOTO   2C9A
....................     
....................       lcd_gotoxy(1,1); 
23F6:  MOVLW  01
23F8:  MOVWF  xE3
23FA:  MOVWF  xE4
23FC:  CALL   05BE
....................       printf(lcd_putc,"Calibracion dos Punt"); 
2400:  MOVLW  BE
2402:  MOVWF  FF6
2404:  MOVLW  02
2406:  MOVWF  FF7
2408:  CALL   10B4
....................       lcd_gotoxy(1,2); 
240C:  MOVLW  01
240E:  MOVWF  xE3
2410:  MOVLW  02
2412:  MOVWF  xE4
2414:  CALL   05BE
....................       printf(lcd_putc,"Ingrese valor  pH %u",punto); 
2418:  MOVLW  D4
241A:  MOVWF  FF6
241C:  MOVLW  02
241E:  MOVWF  FF7
2420:  MOVLW  12
2422:  MOVWF  xD5
2424:  CALL   117E
2428:  MOVFF  27,D5
242C:  MOVLW  1B
242E:  MOVWF  xD6
2430:  CALL   1530
....................       lcd_gotoxy(1,3); 
2434:  MOVLW  01
2436:  MOVWF  xE3
2438:  MOVLW  03
243A:  MOVWF  xE4
243C:  CALL   05BE
....................       printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
2440:  MOVLW  EA
2442:  MOVWF  FF6
2444:  MOVLW  02
2446:  MOVWF  FF7
2448:  MOVLW  05
244A:  MOVWF  xD5
244C:  CALL   117E
2450:  MOVLW  01
2452:  MOVWF  FE9
2454:  MOVFF  B0,D8
2458:  MOVFF  AF,D7
245C:  MOVFF  AE,D6
2460:  MOVFF  AD,D5
2464:  MOVWF  xD9
2466:  CALL   134A
246A:  MOVLW  F4
246C:  MOVWF  FF6
246E:  MOVLW  02
2470:  MOVWF  FF7
2472:  MOVLW  05
2474:  MOVWF  xD5
2476:  CALL   117E
....................       //lcd_gotoxy(1,4); 
....................       //printf(lcd_putc,"     %2.1f  ",sensores(0));  
....................              
....................       if(pHpoint<0.5) 
247A:  MOVFF  B0,DD
247E:  MOVFF  AF,DC
2482:  MOVFF  AE,DB
2486:  MOVFF  AD,DA
248A:  CLRF   xE1
248C:  CLRF   xE0
248E:  CLRF   xDF
2490:  MOVLW  7E
2492:  MOVWF  xDE
2494:  CALL   0CE8
2498:  BNC   24A4
....................          pHpoint=0.5; 
249A:  CLRF   xB0
249C:  CLRF   xAF
249E:  CLRF   xAE
24A0:  MOVLW  7E
24A2:  MOVWF  xAD
....................        
....................       if(pHpoint>14.0)       
24A4:  CLRF   xDD
24A6:  CLRF   xDC
24A8:  MOVLW  60
24AA:  MOVWF  xDB
24AC:  MOVLW  82
24AE:  MOVWF  xDA
24B0:  MOVFF  B0,E1
24B4:  MOVFF  AF,E0
24B8:  MOVFF  AE,DF
24BC:  MOVFF  AD,DE
24C0:  CALL   0CE8
24C4:  BNC   24D2
....................          pHpoint=14.0; 
24C6:  CLRF   xB0
24C8:  CLRF   xAF
24CA:  MOVLW  60
24CC:  MOVWF  xAE
24CE:  MOVLW  82
24D0:  MOVWF  xAD
....................        
....................       if(UP){ 
24D2:  BSF    F92.2
24D4:  BTFSC  F80.2
24D6:  BRA    2538
....................          if(pHpoint<14.0){ 
24D8:  MOVFF  B0,DD
24DC:  MOVFF  AF,DC
24E0:  MOVFF  AE,DB
24E4:  MOVFF  AD,DA
24E8:  CLRF   xE1
24EA:  CLRF   xE0
24EC:  MOVLW  60
24EE:  MOVWF  xDF
24F0:  MOVLW  82
24F2:  MOVWF  xDE
24F4:  CALL   0CE8
24F8:  BNC   2538
....................             pHpoint+=0.1;delay_ms(50); 
24FA:  BCF    FD8.1
24FC:  MOVFF  B0,DD
2500:  MOVFF  AF,DC
2504:  MOVFF  AE,DB
2508:  MOVFF  AD,DA
250C:  MOVLW  CD
250E:  MOVWF  xE1
2510:  MOVLW  CC
2512:  MOVWF  xE0
2514:  MOVLW  4C
2516:  MOVWF  xDF
2518:  MOVLW  7B
251A:  MOVWF  xDE
251C:  CALL   0A7E
2520:  MOVFF  03,B0
2524:  MOVFF  02,AF
2528:  MOVFF  01,AE
252C:  MOVFF  00,AD
2530:  MOVLW  32
2532:  MOVWF  xE8
2534:  CALL   04C4
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
2538:  BSF    F92.3
253A:  BTFSC  F80.3
253C:  BRA    259C
....................          if(pHpoint>0.5){ 
253E:  CLRF   xDD
2540:  CLRF   xDC
2542:  CLRF   xDB
2544:  MOVLW  7E
2546:  MOVWF  xDA
2548:  MOVFF  B0,E1
254C:  MOVFF  AF,E0
2550:  MOVFF  AE,DF
2554:  MOVFF  AD,DE
2558:  CALL   0CE8
255C:  BNC   259C
....................             pHpoint-=0.1;delay_ms(50); 
255E:  BSF    FD8.1
2560:  MOVFF  B0,DD
2564:  MOVFF  AF,DC
2568:  MOVFF  AE,DB
256C:  MOVFF  AD,DA
2570:  MOVLW  CD
2572:  MOVWF  xE1
2574:  MOVLW  CC
2576:  MOVWF  xE0
2578:  MOVLW  4C
257A:  MOVWF  xDF
257C:  MOVLW  7B
257E:  MOVWF  xDE
2580:  CALL   0A7E
2584:  MOVFF  03,B0
2588:  MOVFF  02,AF
258C:  MOVFF  01,AE
2590:  MOVFF  00,AD
2594:  MOVLW  32
2596:  MOVWF  xE8
2598:  CALL   04C4
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
259C:  BSF    F92.4
259E:  BTFSC  F80.4
25A0:  BRA    2B9C
....................          if(punto==1){ 
25A2:  DECFSZ 27,W
25A4:  BRA    25EC
....................             X0=sensores(0); 
25A6:  CLRF   xD6
25A8:  CALL   159C
25AC:  MOVFF  03,A0
25B0:  MOVFF  02,9F
25B4:  MOVFF  01,9E
25B8:  MOVFF  00,9D
....................             Y0=pHpoint; 
25BC:  MOVFF  B0,A4
25C0:  MOVFF  AF,A3
25C4:  MOVFF  AE,A2
25C8:  MOVFF  AD,A1
....................             punto++; 
25CC:  INCF   27,F
....................             delay_ms(1000); 
25CE:  MOVLW  04
25D0:  MOVWF  xD1
25D2:  MOVLW  FA
25D4:  MOVWF  xE8
25D6:  CALL   04C4
25DA:  DECFSZ xD1,F
25DC:  BRA    25D2
....................             pHpoint=7.0; 
25DE:  CLRF   xB0
25E0:  CLRF   xAF
25E2:  MOVLW  60
25E4:  MOVWF  xAE
25E6:  MOVLW  81
25E8:  MOVWF  xAD
....................          }else{ 
25EA:  BRA    2B9C
....................             if(punto==2){ 
25EC:  MOVF   27,W
25EE:  SUBLW  02
25F0:  BTFSS  FD8.2
25F2:  BRA    2B9C
....................                X1=sensores(0); 
25F4:  CLRF   xD6
25F6:  CALL   159C
25FA:  MOVFF  03,A8
25FE:  MOVFF  02,A7
2602:  MOVFF  01,A6
2606:  MOVFF  00,A5
....................                Y1=pHpoint; 
260A:  MOVFF  B0,AC
260E:  MOVFF  AF,AB
2612:  MOVFF  AE,AA
2616:  MOVFF  AD,A9
....................                 
....................                Y0Int=(int8)Y0; 
261A:  MOVFF  A4,D4
261E:  MOVFF  A3,D3
2622:  MOVFF  A2,D2
2626:  MOVFF  A1,D1
262A:  CALL   14D0
262E:  MOVFF  01,31
....................                tmp=Y0-Y0Int; 
2632:  CLRF   xDC
2634:  MOVFF  31,DB
2638:  CALL   06B6
263C:  BSF    FD8.1
263E:  MOVFF  A4,DD
2642:  MOVFF  A3,DC
2646:  MOVFF  A2,DB
264A:  MOVFF  A1,DA
264E:  MOVFF  03,E1
2652:  MOVFF  02,E0
2656:  MOVFF  01,DF
265A:  MOVFF  00,DE
265E:  CALL   0A7E
2662:  MOVFF  03,C8
2666:  MOVFF  02,C7
266A:  MOVFF  01,C6
266E:  MOVFF  00,C5
....................                Y0Dec=tmp*10; 
2672:  MOVFF  C8,E5
2676:  MOVFF  C7,E4
267A:  MOVFF  C6,E3
267E:  MOVFF  C5,E2
2682:  CLRF   xE9
2684:  CLRF   xE8
2686:  MOVLW  20
2688:  MOVWF  xE7
268A:  MOVLW  82
268C:  MOVWF  xE6
268E:  CALL   119E
2692:  MOVFF  03,D4
2696:  MOVFF  02,D3
269A:  MOVFF  01,D2
269E:  MOVFF  00,D1
26A2:  CALL   14D0
26A6:  MOVFF  01,32
....................                 
....................                Y1Int=(int8)Y1; 
26AA:  MOVFF  AC,D4
26AE:  MOVFF  AB,D3
26B2:  MOVFF  AA,D2
26B6:  MOVFF  A9,D1
26BA:  CALL   14D0
26BE:  MOVFF  01,33
....................                tmp=Y1-Y1Int; 
26C2:  CLRF   xDC
26C4:  MOVFF  33,DB
26C8:  CALL   06B6
26CC:  BSF    FD8.1
26CE:  MOVFF  AC,DD
26D2:  MOVFF  AB,DC
26D6:  MOVFF  AA,DB
26DA:  MOVFF  A9,DA
26DE:  MOVFF  03,E1
26E2:  MOVFF  02,E0
26E6:  MOVFF  01,DF
26EA:  MOVFF  00,DE
26EE:  CALL   0A7E
26F2:  MOVFF  03,C8
26F6:  MOVFF  02,C7
26FA:  MOVFF  01,C6
26FE:  MOVFF  00,C5
....................                Y1Dec=tmp*10; 
2702:  MOVFF  C8,E5
2706:  MOVFF  C7,E4
270A:  MOVFF  C6,E3
270E:  MOVFF  C5,E2
2712:  CLRF   xE9
2714:  CLRF   xE8
2716:  MOVLW  20
2718:  MOVWF  xE7
271A:  MOVLW  82
271C:  MOVWF  xE6
271E:  CALL   119E
2722:  MOVFF  03,D4
2726:  MOVFF  02,D3
272A:  MOVFF  01,D2
272E:  MOVFF  00,D1
2732:  CALL   14D0
2736:  MOVFF  01,34
....................                 
....................                write_eeprom(30,(int8)X0); 
273A:  MOVFF  A0,D4
273E:  MOVFF  9F,D3
2742:  MOVFF  9E,D2
2746:  MOVFF  9D,D1
274A:  CALL   14D0
274E:  MOVFF  01,D1
2752:  MOVLW  1E
2754:  MOVWF  FA9
2756:  MOVFF  D1,FA8
275A:  BCF    FA6.6
275C:  BCF    FA6.7
275E:  BSF    FA6.2
2760:  MOVF   FF2,W
2762:  MOVWF  00
2764:  BCF    FF2.7
2766:  MOVLB  F
2768:  MOVLW  55
276A:  MOVWF  FA7
276C:  MOVLW  AA
276E:  MOVWF  FA7
2770:  BSF    FA6.1
2772:  BTFSC  FA6.1
2774:  BRA    2772
2776:  BCF    FA6.2
2778:  MOVF   00,W
277A:  IORWF  FF2,F
....................                delay_ms(20); 
277C:  MOVLW  14
277E:  MOVLB  0
2780:  MOVWF  xE8
2782:  CALL   04C4
....................                write_eeprom(31,(int8)X1); 
2786:  MOVFF  A8,D4
278A:  MOVFF  A7,D3
278E:  MOVFF  A6,D2
2792:  MOVFF  A5,D1
2796:  CALL   14D0
279A:  MOVFF  01,D1
279E:  MOVLW  1F
27A0:  MOVWF  FA9
27A2:  MOVFF  D1,FA8
27A6:  BCF    FA6.6
27A8:  BCF    FA6.7
27AA:  BSF    FA6.2
27AC:  MOVF   FF2,W
27AE:  MOVWF  00
27B0:  BCF    FF2.7
27B2:  MOVLB  F
27B4:  MOVLW  55
27B6:  MOVWF  FA7
27B8:  MOVLW  AA
27BA:  MOVWF  FA7
27BC:  BSF    FA6.1
27BE:  BTFSC  FA6.1
27C0:  BRA    27BE
27C2:  BCF    FA6.2
27C4:  MOVF   00,W
27C6:  IORWF  FF2,F
....................                delay_ms(20); 
27C8:  MOVLW  14
27CA:  MOVLB  0
27CC:  MOVWF  xE8
27CE:  CALL   04C4
....................                write_eeprom(32,Y0Int); 
27D2:  MOVLW  20
27D4:  MOVWF  FA9
27D6:  MOVFF  31,FA8
27DA:  BCF    FA6.6
27DC:  BCF    FA6.7
27DE:  BSF    FA6.2
27E0:  MOVF   FF2,W
27E2:  MOVWF  00
27E4:  BCF    FF2.7
27E6:  MOVLB  F
27E8:  MOVLW  55
27EA:  MOVWF  FA7
27EC:  MOVLW  AA
27EE:  MOVWF  FA7
27F0:  BSF    FA6.1
27F2:  BTFSC  FA6.1
27F4:  BRA    27F2
27F6:  BCF    FA6.2
27F8:  MOVF   00,W
27FA:  IORWF  FF2,F
....................                delay_ms(20); 
27FC:  MOVLW  14
27FE:  MOVLB  0
2800:  MOVWF  xE8
2802:  CALL   04C4
....................                write_eeprom(33,Y0Dec); 
2806:  MOVLW  21
2808:  MOVWF  FA9
280A:  MOVFF  32,FA8
280E:  BCF    FA6.6
2810:  BCF    FA6.7
2812:  BSF    FA6.2
2814:  MOVF   FF2,W
2816:  MOVWF  00
2818:  BCF    FF2.7
281A:  MOVLB  F
281C:  MOVLW  55
281E:  MOVWF  FA7
2820:  MOVLW  AA
2822:  MOVWF  FA7
2824:  BSF    FA6.1
2826:  BTFSC  FA6.1
2828:  BRA    2826
282A:  BCF    FA6.2
282C:  MOVF   00,W
282E:  IORWF  FF2,F
....................                delay_ms(20); 
2830:  MOVLW  14
2832:  MOVLB  0
2834:  MOVWF  xE8
2836:  CALL   04C4
....................                write_eeprom(34,Y1Int); 
283A:  MOVLW  22
283C:  MOVWF  FA9
283E:  MOVFF  33,FA8
2842:  BCF    FA6.6
2844:  BCF    FA6.7
2846:  BSF    FA6.2
2848:  MOVF   FF2,W
284A:  MOVWF  00
284C:  BCF    FF2.7
284E:  MOVLB  F
2850:  MOVLW  55
2852:  MOVWF  FA7
2854:  MOVLW  AA
2856:  MOVWF  FA7
2858:  BSF    FA6.1
285A:  BTFSC  FA6.1
285C:  BRA    285A
285E:  BCF    FA6.2
2860:  MOVF   00,W
2862:  IORWF  FF2,F
....................                delay_ms(20); 
2864:  MOVLW  14
2866:  MOVLB  0
2868:  MOVWF  xE8
286A:  CALL   04C4
....................                write_eeprom(35,Y1Dec); 
286E:  MOVLW  23
2870:  MOVWF  FA9
2872:  MOVFF  34,FA8
2876:  BCF    FA6.6
2878:  BCF    FA6.7
287A:  BSF    FA6.2
287C:  MOVF   FF2,W
287E:  MOVWF  00
2880:  BCF    FF2.7
2882:  MOVLB  F
2884:  MOVLW  55
2886:  MOVWF  FA7
2888:  MOVLW  AA
288A:  MOVWF  FA7
288C:  BSF    FA6.1
288E:  BTFSC  FA6.1
2890:  BRA    288E
2892:  BCF    FA6.2
2894:  MOVF   00,W
2896:  IORWF  FF2,F
....................                delay_ms(20); 
2898:  MOVLW  14
289A:  MOVLB  0
289C:  MOVWF  xE8
289E:  CALL   04C4
....................                 
....................                b=Y1-(X1*(Y1-Y0)/(X1-X0)); 
28A2:  BSF    FD8.1
28A4:  MOVFF  AC,DD
28A8:  MOVFF  AB,DC
28AC:  MOVFF  AA,DB
28B0:  MOVFF  A9,DA
28B4:  MOVFF  A4,E1
28B8:  MOVFF  A3,E0
28BC:  MOVFF  A2,DF
28C0:  MOVFF  A1,DE
28C4:  CALL   0A7E
28C8:  MOVFF  A8,E5
28CC:  MOVFF  A7,E4
28D0:  MOVFF  A6,E3
28D4:  MOVFF  A5,E2
28D8:  MOVFF  03,E9
28DC:  MOVFF  02,E8
28E0:  MOVFF  01,E7
28E4:  MOVFF  00,E6
28E8:  CALL   119E
28EC:  MOVFF  00,D1
28F0:  MOVFF  01,D2
28F4:  MOVFF  02,D3
28F8:  MOVFF  03,D4
28FC:  BSF    FD8.1
28FE:  MOVFF  A8,DD
2902:  MOVFF  A7,DC
2906:  MOVFF  A6,DB
290A:  MOVFF  A5,DA
290E:  MOVFF  A0,E1
2912:  MOVFF  9F,E0
2916:  MOVFF  9E,DF
291A:  MOVFF  9D,DE
291E:  CALL   0A7E
2922:  MOVFF  D4,DD
2926:  MOVFF  D3,DC
292A:  MOVFF  D2,DB
292E:  MOVFF  D1,DA
2932:  MOVFF  03,E1
2936:  MOVFF  02,E0
293A:  MOVFF  01,DF
293E:  MOVFF  00,DE
2942:  CALL   0924
2946:  BSF    FD8.1
2948:  MOVFF  AC,DD
294C:  MOVFF  AB,DC
2950:  MOVFF  AA,DB
2954:  MOVFF  A9,DA
2958:  MOVFF  03,E1
295C:  MOVFF  02,E0
2960:  MOVFF  01,DF
2964:  MOVFF  00,DE
2968:  CALL   0A7E
296C:  MOVFF  03,C0
2970:  MOVFF  02,BF
2974:  MOVFF  01,BE
2978:  MOVFF  00,BD
....................                if(b>=0){ 
297C:  CLRF   xDD
297E:  CLRF   xDC
2980:  CLRF   xDB
2982:  CLRF   xDA
2984:  MOVFF  C0,E1
2988:  MOVFF  BF,E0
298C:  MOVFF  BE,DF
2990:  MOVFF  BD,DE
2994:  CALL   0CE8
2998:  BC    299C
299A:  BNZ   29D4
....................                   negativo=10;write_eeprom(60,negativo);delay_ms(20); 
299C:  MOVLW  0A
299E:  MOVWF  28
29A0:  MOVLW  3C
29A2:  MOVWF  FA9
29A4:  MOVFF  28,FA8
29A8:  BCF    FA6.6
29AA:  BCF    FA6.7
29AC:  BSF    FA6.2
29AE:  MOVF   FF2,W
29B0:  MOVWF  00
29B2:  BCF    FF2.7
29B4:  MOVLB  F
29B6:  MOVLW  55
29B8:  MOVWF  FA7
29BA:  MOVLW  AA
29BC:  MOVWF  FA7
29BE:  BSF    FA6.1
29C0:  BTFSC  FA6.1
29C2:  BRA    29C0
29C4:  BCF    FA6.2
29C6:  MOVF   00,W
29C8:  IORWF  FF2,F
29CA:  MOVLW  14
29CC:  MOVLB  0
29CE:  MOVWF  xE8
29D0:  CALL   04C4
....................                } 
....................                if(b<0){ 
29D4:  MOVFF  C0,DD
29D8:  MOVFF  BF,DC
29DC:  MOVFF  BE,DB
29E0:  MOVFF  BD,DA
29E4:  CLRF   xE1
29E6:  CLRF   xE0
29E8:  CLRF   xDF
29EA:  CLRF   xDE
29EC:  CALL   0CE8
29F0:  BNC   2A2A
....................                   negativo=20;write_eeprom(60,negativo);delay_ms(20); 
29F2:  MOVLW  14
29F4:  MOVWF  28
29F6:  MOVLW  3C
29F8:  MOVWF  FA9
29FA:  MOVFF  28,FA8
29FE:  BCF    FA6.6
2A00:  BCF    FA6.7
2A02:  BSF    FA6.2
2A04:  MOVF   FF2,W
2A06:  MOVWF  00
2A08:  BCF    FF2.7
2A0A:  MOVLB  F
2A0C:  MOVLW  55
2A0E:  MOVWF  FA7
2A10:  MOVLW  AA
2A12:  MOVWF  FA7
2A14:  BSF    FA6.1
2A16:  BTFSC  FA6.1
2A18:  BRA    2A16
2A1A:  BCF    FA6.2
2A1C:  MOVF   00,W
2A1E:  IORWF  FF2,F
2A20:  MOVLW  14
2A22:  MOVLB  0
2A24:  MOVWF  xE8
2A26:  CALL   04C4
....................                } 
....................                b=abs(b); 
2A2A:  MOVFF  BD,00
2A2E:  MOVFF  BE,01
2A32:  MOVFF  BF,02
2A36:  MOVFF  C0,03
2A3A:  BCF    01.7
2A3C:  MOVFF  C0,C0
2A40:  MOVFF  BF,BF
2A44:  MOVFF  01,BE
2A48:  MOVFF  BD,BD
....................                bInt=(int8)b; 
2A4C:  MOVFF  C0,D4
2A50:  MOVFF  BF,D3
2A54:  MOVFF  BE,D2
2A58:  MOVFF  BD,D1
2A5C:  CALL   14D0
2A60:  MOVFF  01,2F
....................                tmp=b-bInt; 
2A64:  CLRF   xDC
2A66:  MOVFF  2F,DB
2A6A:  CALL   06B6
2A6E:  BSF    FD8.1
2A70:  MOVFF  C0,DD
2A74:  MOVFF  BF,DC
2A78:  MOVFF  BE,DB
2A7C:  MOVFF  BD,DA
2A80:  MOVFF  03,E1
2A84:  MOVFF  02,E0
2A88:  MOVFF  01,DF
2A8C:  MOVFF  00,DE
2A90:  CALL   0A7E
2A94:  MOVFF  03,C8
2A98:  MOVFF  02,C7
2A9C:  MOVFF  01,C6
2AA0:  MOVFF  00,C5
....................                bDec=tmp*100; 
2AA4:  MOVFF  C8,E5
2AA8:  MOVFF  C7,E4
2AAC:  MOVFF  C6,E3
2AB0:  MOVFF  C5,E2
2AB4:  CLRF   xE9
2AB6:  CLRF   xE8
2AB8:  MOVLW  48
2ABA:  MOVWF  xE7
2ABC:  MOVLW  85
2ABE:  MOVWF  xE6
2AC0:  CALL   119E
2AC4:  MOVFF  03,D4
2AC8:  MOVFF  02,D3
2ACC:  MOVFF  01,D2
2AD0:  MOVFF  00,D1
2AD4:  CALL   14D0
2AD8:  MOVFF  01,30
....................                write_eeprom(20,bInt); 
2ADC:  MOVLW  14
2ADE:  MOVWF  FA9
2AE0:  MOVFF  2F,FA8
2AE4:  BCF    FA6.6
2AE6:  BCF    FA6.7
2AE8:  BSF    FA6.2
2AEA:  MOVF   FF2,W
2AEC:  MOVWF  00
2AEE:  BCF    FF2.7
2AF0:  MOVLB  F
2AF2:  MOVLW  55
2AF4:  MOVWF  FA7
2AF6:  MOVLW  AA
2AF8:  MOVWF  FA7
2AFA:  BSF    FA6.1
2AFC:  BTFSC  FA6.1
2AFE:  BRA    2AFC
2B00:  BCF    FA6.2
2B02:  MOVF   00,W
2B04:  IORWF  FF2,F
....................                delay_ms(20); 
2B06:  MOVLW  14
2B08:  MOVLB  0
2B0A:  MOVWF  xE8
2B0C:  CALL   04C4
....................                write_eeprom(21,bDec); 
2B10:  MOVLW  15
2B12:  MOVWF  FA9
2B14:  MOVFF  30,FA8
2B18:  BCF    FA6.6
2B1A:  BCF    FA6.7
2B1C:  BSF    FA6.2
2B1E:  MOVF   FF2,W
2B20:  MOVWF  00
2B22:  BCF    FF2.7
2B24:  MOVLB  F
2B26:  MOVLW  55
2B28:  MOVWF  FA7
2B2A:  MOVLW  AA
2B2C:  MOVWF  FA7
2B2E:  BSF    FA6.1
2B30:  BTFSC  FA6.1
2B32:  BRA    2B30
2B34:  BCF    FA6.2
2B36:  MOVF   00,W
2B38:  IORWF  FF2,F
....................                delay_ms(200); 
2B3A:  MOVLW  C8
2B3C:  MOVLB  0
2B3E:  MOVWF  xE8
2B40:  CALL   04C4
....................                printf(lcd_putc,"\f"); 
2B44:  MOVLW  0C
2B46:  MOVWF  xE2
2B48:  CALL   0620
....................                lcd_gotoxy(1,2); 
2B4C:  MOVLW  01
2B4E:  MOVWF  xE3
2B50:  MOVLW  02
2B52:  MOVWF  xE4
2B54:  CALL   05BE
....................                printf(lcd_putc,"   Calibracion   "); 
2B58:  MOVLW  FA
2B5A:  MOVWF  FF6
2B5C:  MOVLW  02
2B5E:  MOVWF  FF7
2B60:  CALL   10B4
....................                lcd_gotoxy(1,3); 
2B64:  MOVLW  01
2B66:  MOVWF  xE3
2B68:  MOVLW  03
2B6A:  MOVWF  xE4
2B6C:  CALL   05BE
....................                printf(lcd_putc,"     Exitosa     "); 
2B70:  MOVLW  0C
2B72:  MOVWF  FF6
2B74:  MOVLW  03
2B76:  MOVWF  FF7
2B78:  CALL   10B4
....................                delay_ms(500); 
2B7C:  MOVLW  02
2B7E:  MOVWF  xD1
2B80:  MOVLW  FA
2B82:  MOVWF  xE8
2B84:  CALL   04C4
2B88:  DECFSZ xD1,F
2B8A:  BRA    2B80
....................                printf(lcd_putc,"\f");  
2B8C:  MOVLW  0C
2B8E:  MOVWF  xE2
2B90:  CALL   0620
....................                punto=1; 
2B94:  MOVLW  01
2B96:  MOVWF  27
....................                Menu=100; 
2B98:  MOVLW  64
2B9A:  MOVWF  19
....................             } 
....................          } 
....................       } 
....................        
....................       if(LEFT){ 
2B9C:  BSF    F92.5
2B9E:  BTFSC  F80.5
2BA0:  BRA    2C9A
....................          Menu=1;paso=0;delay_ms(200);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");punto=1; 
2BA2:  MOVLW  01
2BA4:  MOVWF  19
2BA6:  CLRF   35
2BA8:  MOVLW  C8
2BAA:  MOVWF  xE8
2BAC:  CALL   04C4
2BB0:  MOVLW  02
2BB2:  MOVWF  1C
2BB4:  MOVWF  1E
2BB6:  MOVLW  0C
2BB8:  MOVWF  xE2
2BBA:  CALL   0620
2BBE:  MOVLW  01
2BC0:  MOVWF  27
....................          X0=read_eeprom(30); 
2BC2:  MOVFF  FF2,D1
2BC6:  BCF    FF2.7
2BC8:  MOVLW  1E
2BCA:  MOVWF  FA9
2BCC:  BCF    FA6.6
2BCE:  BCF    FA6.7
2BD0:  BSF    FA6.0
2BD2:  MOVF   FA8,W
2BD4:  BTFSC  xD1.7
2BD6:  BSF    FF2.7
2BD8:  CLRF   xDC
2BDA:  MOVWF  xDB
2BDC:  CALL   06B6
2BE0:  MOVFF  03,A0
2BE4:  MOVFF  02,9F
2BE8:  MOVFF  01,9E
2BEC:  MOVFF  00,9D
....................          Y0Int=read_eeprom(32);Y0Dec=read_eeprom(33); 
2BF0:  MOVFF  FF2,D1
2BF4:  BCF    FF2.7
2BF6:  MOVLW  20
2BF8:  MOVWF  FA9
2BFA:  BCF    FA6.6
2BFC:  BCF    FA6.7
2BFE:  BSF    FA6.0
2C00:  MOVF   FA8,W
2C02:  BTFSC  xD1.7
2C04:  BSF    FF2.7
2C06:  MOVWF  31
2C08:  MOVFF  FF2,D1
2C0C:  BCF    FF2.7
2C0E:  MOVLW  21
2C10:  MOVWF  FA9
2C12:  BCF    FA6.6
2C14:  BCF    FA6.7
2C16:  BSF    FA6.0
2C18:  MOVF   FA8,W
2C1A:  BTFSC  xD1.7
2C1C:  BSF    FF2.7
2C1E:  MOVWF  32
....................          tmp=Y0Dec/10.0; 
2C20:  CLRF   xDC
2C22:  MOVFF  32,DB
2C26:  CALL   06B6
2C2A:  MOVFF  03,DD
2C2E:  MOVFF  02,DC
2C32:  MOVFF  01,DB
2C36:  MOVFF  00,DA
2C3A:  CLRF   xE1
2C3C:  CLRF   xE0
2C3E:  MOVLW  20
2C40:  MOVWF  xDF
2C42:  MOVLW  82
2C44:  MOVWF  xDE
2C46:  CALL   0924
2C4A:  MOVFF  03,C8
2C4E:  MOVFF  02,C7
2C52:  MOVFF  01,C6
2C56:  MOVFF  00,C5
....................          Y0=Y0Int+tmp; 
2C5A:  CLRF   xDC
2C5C:  MOVFF  31,DB
2C60:  CALL   06B6
2C64:  BCF    FD8.1
2C66:  MOVFF  03,DD
2C6A:  MOVFF  02,DC
2C6E:  MOVFF  01,DB
2C72:  MOVFF  00,DA
2C76:  MOVFF  C8,E1
2C7A:  MOVFF  C7,E0
2C7E:  MOVFF  C6,DF
2C82:  MOVFF  C5,DE
2C86:  CALL   0A7E
2C8A:  MOVFF  03,A4
2C8E:  MOVFF  02,A3
2C92:  MOVFF  01,A2
2C96:  MOVFF  00,A1
....................       }   
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de Media Movil 
2C9A:  MOVF   19,W
2C9C:  SUBLW  04
2C9E:  BTFSS  FD8.2
2CA0:  BRA    2DC8
....................     
....................    lcd_gotoxy(1,1); 
2CA2:  MOVLW  01
2CA4:  MOVWF  xE3
2CA6:  MOVWF  xE4
2CA8:  CALL   05BE
....................    printf(lcd_putc,"    Media   Movil   "); 
2CAC:  MOVLW  1E
2CAE:  MOVWF  FF6
2CB0:  MOVLW  03
2CB2:  MOVWF  FF7
2CB4:  CALL   10B4
....................    lcd_gotoxy(1,2); 
2CB8:  MOVLW  01
2CBA:  MOVWF  xE3
2CBC:  MOVLW  02
2CBE:  MOVWF  xE4
2CC0:  CALL   05BE
....................    printf(lcd_putc,"    Ingrese valor   "); 
2CC4:  MOVLW  34
2CC6:  MOVWF  FF6
2CC8:  MOVLW  03
2CCA:  MOVWF  FF7
2CCC:  CALL   10B4
....................    lcd_gotoxy(1,3); 
2CD0:  MOVLW  01
2CD2:  MOVWF  xE3
2CD4:  MOVLW  03
2CD6:  MOVWF  xE4
2CD8:  CALL   05BE
....................    printf(lcd_putc,"        %02u   ",MediaMovil);  
2CDC:  MOVLW  4A
2CDE:  MOVWF  FF6
2CE0:  MOVLW  03
2CE2:  MOVWF  FF7
2CE4:  MOVLW  08
2CE6:  MOVWF  xD5
2CE8:  CALL   117E
2CEC:  MOVFF  26,D5
2CF0:  MOVLW  01
2CF2:  MOVWF  xD6
2CF4:  CALL   1530
2CF8:  MOVLW  20
2CFA:  MOVWF  xE2
2CFC:  CALL   0620
2D00:  MOVLW  20
2D02:  MOVWF  xE2
2D04:  CALL   0620
2D08:  MOVLW  20
2D0A:  MOVWF  xE2
2D0C:  CALL   0620
....................     
....................           
....................    if(MediaMovil>16){ 
2D10:  MOVF   26,W
2D12:  SUBLW  10
2D14:  BC    2D1A
....................       MediaMovil=16; 
2D16:  MOVLW  10
2D18:  MOVWF  26
....................    } 
....................     
....................    if(UP){ 
2D1A:  BSF    F92.2
2D1C:  BTFSC  F80.2
2D1E:  BRA    2D30
....................       if(MediaMovil<16){ 
2D20:  MOVF   26,W
2D22:  SUBLW  0F
2D24:  BNC   2D30
....................          MediaMovil++;delay_ms(50); 
2D26:  INCF   26,F
2D28:  MOVLW  32
2D2A:  MOVWF  xE8
2D2C:  CALL   04C4
....................       } 
....................    } 
....................     
....................    if(DOWN){ 
2D30:  BSF    F92.3
2D32:  BTFSC  F80.3
2D34:  BRA    2D44
....................       if(MediaMovil>0){ 
2D36:  MOVF   26,F
2D38:  BZ    2D44
....................          MediaMovil--;delay_ms(50); 
2D3A:  DECF   26,F
2D3C:  MOVLW  32
2D3E:  MOVWF  xE8
2D40:  CALL   04C4
....................       } 
....................    } 
....................     
....................    if(RIGHT || LEFT){ 
2D44:  BSF    F92.4
2D46:  BTFSS  F80.4
2D48:  BRA    2D50
2D4A:  BSF    F92.5
2D4C:  BTFSC  F80.5
2D4E:  BRA    2DC8
....................       delay_ms(500); 
2D50:  MOVLW  02
2D52:  MOVWF  xD1
2D54:  MOVLW  FA
2D56:  MOVWF  xE8
2D58:  CALL   04C4
2D5C:  DECFSZ xD1,F
2D5E:  BRA    2D54
....................       if(RIGHT || LEFT){ 
2D60:  BSF    F92.4
2D62:  BTFSS  F80.4
2D64:  BRA    2D6C
2D66:  BSF    F92.5
2D68:  BTFSC  F80.5
2D6A:  BRA    2DC8
....................          write_eeprom(5,MediaMovil); 
2D6C:  MOVLW  05
2D6E:  MOVWF  FA9
2D70:  MOVFF  26,FA8
2D74:  BCF    FA6.6
2D76:  BCF    FA6.7
2D78:  BSF    FA6.2
2D7A:  MOVF   FF2,W
2D7C:  MOVWF  00
2D7E:  BCF    FF2.7
2D80:  MOVLB  F
2D82:  MOVLW  55
2D84:  MOVWF  FA7
2D86:  MOVLW  AA
2D88:  MOVWF  FA7
2D8A:  BSF    FA6.1
2D8C:  BTFSC  FA6.1
2D8E:  BRA    2D8C
2D90:  BCF    FA6.2
2D92:  MOVF   00,W
2D94:  IORWF  FF2,F
....................          delay_ms(100); 
2D96:  MOVLW  64
2D98:  MOVLB  0
2D9A:  MOVWF  xE8
2D9C:  CALL   04C4
....................          MensajeGuardado(); 
2DA0:  CALL   15EC
....................          Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2DA4:  MOVLW  01
2DA6:  MOVWF  19
2DA8:  CLRF   35
2DAA:  MOVLW  02
2DAC:  MOVWF  xD1
2DAE:  MOVLW  FA
2DB0:  MOVWF  xE8
2DB2:  CALL   04C4
2DB6:  DECFSZ xD1,F
2DB8:  BRA    2DAE
2DBA:  MOVLW  02
2DBC:  MOVWF  1C
2DBE:  MOVWF  1E
2DC0:  MOVLW  0C
2DC2:  MOVWF  xE2
2DC4:  CALL   0620
....................       } 
....................    } 
....................   } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Tiempo de Renovación de Agua 
2DC8:  MOVF   19,W
2DCA:  SUBLW  05
2DCC:  BTFSS  FD8.2
2DCE:  BRA    2EF4
....................     
....................    lcd_gotoxy(1,1); 
2DD0:  MOVLW  01
2DD2:  MOVWF  xE3
2DD4:  MOVWF  xE4
2DD6:  CALL   05BE
....................    printf(lcd_putc,"Renovacion   Liquido"); 
2DDA:  MOVLW  5A
2DDC:  MOVWF  FF6
2DDE:  MOVLW  03
2DE0:  MOVWF  FF7
2DE2:  CALL   10B4
....................    lcd_gotoxy(1,2); 
2DE6:  MOVLW  01
2DE8:  MOVWF  xE3
2DEA:  MOVLW  02
2DEC:  MOVWF  xE4
2DEE:  CALL   05BE
....................    printf(lcd_putc,"    Ingrese valor   "); 
2DF2:  MOVLW  70
2DF4:  MOVWF  FF6
2DF6:  MOVLW  03
2DF8:  MOVWF  FF7
2DFA:  CALL   10B4
....................    lcd_gotoxy(1,3); 
2DFE:  MOVLW  01
2E00:  MOVWF  xE3
2E02:  MOVLW  03
2E04:  MOVWF  xE4
2E06:  CALL   05BE
....................    printf(lcd_putc,"   Tiempo:%03u horas ",tiempoRenovacion);  
2E0A:  MOVLW  86
2E0C:  MOVWF  FF6
2E0E:  MOVLW  03
2E10:  MOVWF  FF7
2E12:  MOVLW  0A
2E14:  MOVWF  xD5
2E16:  CALL   117E
2E1A:  MOVFF  2C,D5
2E1E:  MOVLW  03
2E20:  MOVWF  xD6
2E22:  CALL   1530
2E26:  MOVLW  94
2E28:  MOVWF  FF6
2E2A:  MOVLW  03
2E2C:  MOVWF  FF7
2E2E:  MOVLW  07
2E30:  MOVWF  xD5
2E32:  CALL   117E
....................     
....................           
....................    if(tiempoRenovacion>100) 
2E36:  MOVF   2C,W
2E38:  SUBLW  64
2E3A:  BC    2E40
....................       tiempoRenovacion=100; 
2E3C:  MOVLW  64
2E3E:  MOVWF  2C
....................    if(tiempoRenovacion<1) 
2E40:  MOVF   2C,F
2E42:  BNZ   2E48
....................       tiempoRenovacion=1; 
2E44:  MOVLW  01
2E46:  MOVWF  2C
....................     
....................    if(UP){       
2E48:  BSF    F92.2
2E4A:  BTFSC  F80.2
2E4C:  BRA    2E58
....................       tiempoRenovacion++;delay_ms(50); 
2E4E:  INCF   2C,F
2E50:  MOVLW  32
2E52:  MOVWF  xE8
2E54:  CALL   04C4
....................    } 
....................     
....................    if(DOWN){       
2E58:  BSF    F92.3
2E5A:  BTFSC  F80.3
2E5C:  BRA    2E68
....................       tiempoRenovacion--;delay_ms(50); 
2E5E:  DECF   2C,F
2E60:  MOVLW  32
2E62:  MOVWF  xE8
2E64:  CALL   04C4
....................    } 
....................     
....................    if(RIGHT || LEFT){ 
2E68:  BSF    F92.4
2E6A:  BTFSS  F80.4
2E6C:  BRA    2E74
2E6E:  BSF    F92.5
2E70:  BTFSC  F80.5
2E72:  BRA    2EF4
....................       delay_ms(1000); 
2E74:  MOVLW  04
2E76:  MOVWF  xD1
2E78:  MOVLW  FA
2E7A:  MOVWF  xE8
2E7C:  CALL   04C4
2E80:  DECFSZ xD1,F
2E82:  BRA    2E78
....................       if(RIGHT || LEFT){ 
2E84:  BSF    F92.4
2E86:  BTFSS  F80.4
2E88:  BRA    2E90
2E8A:  BSF    F92.5
2E8C:  BTFSC  F80.5
2E8E:  BRA    2EF4
....................          write_eeprom(6,tiempoRenovacion); 
2E90:  MOVLW  06
2E92:  MOVWF  FA9
2E94:  MOVFF  2C,FA8
2E98:  BCF    FA6.6
2E9A:  BCF    FA6.7
2E9C:  BSF    FA6.2
2E9E:  MOVF   FF2,W
2EA0:  MOVWF  00
2EA2:  BCF    FF2.7
2EA4:  MOVLB  F
2EA6:  MOVLW  55
2EA8:  MOVWF  FA7
2EAA:  MOVLW  AA
2EAC:  MOVWF  FA7
2EAE:  BSF    FA6.1
2EB0:  BTFSC  FA6.1
2EB2:  BRA    2EB0
2EB4:  BCF    FA6.2
2EB6:  MOVF   00,W
2EB8:  IORWF  FF2,F
....................          delay_ms(500); 
2EBA:  MOVLW  02
2EBC:  MOVLB  0
2EBE:  MOVWF  xD1
2EC0:  MOVLW  FA
2EC2:  MOVWF  xE8
2EC4:  CALL   04C4
2EC8:  DECFSZ xD1,F
2ECA:  BRA    2EC0
....................          Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2ECC:  MOVLW  01
2ECE:  MOVWF  19
2ED0:  CLRF   35
2ED2:  MOVLW  02
2ED4:  MOVWF  xD1
2ED6:  MOVLW  FA
2ED8:  MOVWF  xE8
2EDA:  CALL   04C4
2EDE:  DECFSZ xD1,F
2EE0:  BRA    2ED6
2EE2:  MOVLW  02
2EE4:  MOVWF  1C
2EE6:  MOVWF  1E
2EE8:  MOVLW  0C
2EEA:  MOVWF  xE2
2EEC:  CALL   0620
....................          MensajeGuardado(); 
2EF0:  CALL   15EC
....................       } 
....................    } 
....................   } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Carga Inicial de Base 
2EF4:  MOVF   19,W
2EF6:  SUBLW  06
2EF8:  BTFSS  FD8.2
2EFA:  BRA    3082
....................     
....................    lcd_gotoxy(1,1); 
2EFC:  MOVLW  01
2EFE:  MOVWF  xE3
2F00:  MOVWF  xE4
2F02:  CALL   05BE
....................    printf(lcd_putc," Carga Inicial Base "); 
2F06:  MOVLW  9C
2F08:  MOVWF  FF6
2F0A:  MOVLW  03
2F0C:  MOVWF  FF7
2F0E:  CALL   10B4
....................    lcd_gotoxy(1,2); 
2F12:  MOVLW  01
2F14:  MOVWF  xE3
2F16:  MOVLW  02
2F18:  MOVWF  xE4
2F1A:  CALL   05BE
....................    printf(lcd_putc,"Ingrese valor en ml "); 
2F1E:  MOVLW  B2
2F20:  MOVWF  FF6
2F22:  MOVLW  03
2F24:  MOVWF  FF7
2F26:  CALL   10B4
....................    lcd_gotoxy(1,3); 
2F2A:  MOVLW  01
2F2C:  MOVWF  xE3
2F2E:  MOVLW  03
2F30:  MOVWF  xE4
2F32:  CALL   05BE
....................    printf(lcd_putc,"   Base:%04Lu ml  ",cargaInicial);  
2F36:  MOVLW  C8
2F38:  MOVWF  FF6
2F3A:  MOVLW  03
2F3C:  MOVWF  FF7
2F3E:  MOVLW  08
2F40:  MOVWF  xD5
2F42:  CALL   117E
2F46:  MOVLW  09
2F48:  MOVWF  FE9
2F4A:  MOVFF  40,D2
2F4E:  MOVFF  3F,D1
2F52:  GOTO   1664
2F56:  MOVLW  D5
2F58:  MOVWF  FF6
2F5A:  MOVLW  03
2F5C:  MOVWF  FF7
2F5E:  MOVLW  05
2F60:  MOVWF  xD5
2F62:  CALL   117E
....................     
....................           
....................    if(cargaInicial>5000) 
2F66:  MOVF   40,W
2F68:  SUBLW  12
2F6A:  BC    2F7E
2F6C:  XORLW  FF
2F6E:  BNZ   2F76
2F70:  MOVF   3F,W
2F72:  SUBLW  88
2F74:  BC    2F7E
....................       cargaInicial=5000; 
2F76:  MOVLW  13
2F78:  MOVWF  40
2F7A:  MOVLW  88
2F7C:  MOVWF  3F
....................     
....................    if(cargaInicial<100) 
2F7E:  MOVF   40,F
2F80:  BNZ   2F8E
2F82:  MOVF   3F,W
2F84:  SUBLW  63
2F86:  BNC   2F8E
....................       cargaInicial=100; 
2F88:  CLRF   40
2F8A:  MOVLW  64
2F8C:  MOVWF  3F
....................     
....................    if(UP){ 
2F8E:  BSF    F92.2
2F90:  BTFSC  F80.2
2F92:  BRA    2FA4
....................       cargaInicial+=10;delay_ms(50); 
2F94:  MOVLW  0A
2F96:  ADDWF  3F,F
2F98:  MOVLW  00
2F9A:  ADDWFC 40,F
2F9C:  MOVLW  32
2F9E:  MOVWF  xE8
2FA0:  CALL   04C4
....................    } 
....................     
....................    if(DOWN){ 
2FA4:  BSF    F92.3
2FA6:  BTFSC  F80.3
2FA8:  BRA    2FBA
....................       cargaInicial-=10;delay_ms(50); 
2FAA:  MOVLW  0A
2FAC:  SUBWF  3F,F
2FAE:  MOVLW  00
2FB0:  SUBWFB 40,F
2FB2:  MOVLW  32
2FB4:  MOVWF  xE8
2FB6:  CALL   04C4
....................    } 
....................     
....................    if(RIGHT || LEFT){ 
2FBA:  BSF    F92.4
2FBC:  BTFSS  F80.4
2FBE:  BRA    2FC6
2FC0:  BSF    F92.5
2FC2:  BTFSC  F80.5
2FC4:  BRA    3082
....................       delay_ms(500); 
2FC6:  MOVLW  02
2FC8:  MOVWF  xD1
2FCA:  MOVLW  FA
2FCC:  MOVWF  xE8
2FCE:  CALL   04C4
2FD2:  DECFSZ xD1,F
2FD4:  BRA    2FCA
....................       if(RIGHT || LEFT){ 
2FD6:  BSF    F92.4
2FD8:  BTFSS  F80.4
2FDA:  BRA    2FE2
2FDC:  BSF    F92.5
2FDE:  BTFSC  F80.5
2FE0:  BRA    3082
....................          write_eeprom(8,make8(cargaInicial,0)); 
2FE2:  MOVFF  3F,D1
2FE6:  MOVLW  08
2FE8:  MOVWF  FA9
2FEA:  MOVFF  D1,FA8
2FEE:  BCF    FA6.6
2FF0:  BCF    FA6.7
2FF2:  BSF    FA6.2
2FF4:  MOVF   FF2,W
2FF6:  MOVWF  00
2FF8:  BCF    FF2.7
2FFA:  MOVLB  F
2FFC:  MOVLW  55
2FFE:  MOVWF  FA7
3000:  MOVLW  AA
3002:  MOVWF  FA7
3004:  BSF    FA6.1
3006:  BTFSC  FA6.1
3008:  BRA    3006
300A:  BCF    FA6.2
300C:  MOVF   00,W
300E:  IORWF  FF2,F
....................          delay_ms(100); 
3010:  MOVLW  64
3012:  MOVLB  0
3014:  MOVWF  xE8
3016:  CALL   04C4
....................          write_eeprom(9,make8(cargaInicial,1)); 
301A:  MOVFF  40,D1
301E:  MOVLW  09
3020:  MOVWF  FA9
3022:  MOVFF  D1,FA8
3026:  BCF    FA6.6
3028:  BCF    FA6.7
302A:  BSF    FA6.2
302C:  MOVF   FF2,W
302E:  MOVWF  00
3030:  BCF    FF2.7
3032:  MOVLB  F
3034:  MOVLW  55
3036:  MOVWF  FA7
3038:  MOVLW  AA
303A:  MOVWF  FA7
303C:  BSF    FA6.1
303E:  BTFSC  FA6.1
3040:  BRA    303E
3042:  BCF    FA6.2
3044:  MOVF   00,W
3046:  IORWF  FF2,F
....................          delay_ms(500); 
3048:  MOVLW  02
304A:  MOVLB  0
304C:  MOVWF  xD1
304E:  MOVLW  FA
3050:  MOVWF  xE8
3052:  CALL   04C4
3056:  DECFSZ xD1,F
3058:  BRA    304E
....................          Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
305A:  MOVLW  01
305C:  MOVWF  19
305E:  CLRF   35
3060:  MOVLW  02
3062:  MOVWF  xD1
3064:  MOVLW  FA
3066:  MOVWF  xE8
3068:  CALL   04C4
306C:  DECFSZ xD1,F
306E:  BRA    3064
3070:  MOVLW  02
3072:  MOVWF  1C
3074:  MOVWF  1E
3076:  MOVLW  0C
3078:  MOVWF  xE2
307A:  CALL   0620
....................          MensajeGuardado(); 
307E:  CALL   15EC
....................       } 
....................    } 
....................   } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de Mantenimiento 
3082:  MOVF   19,W
3084:  SUBLW  07
3086:  BTFSS  FD8.2
3088:  BRA    3292
....................     
....................    lcd_gotoxy(1,1); 
308A:  MOVLW  01
308C:  MOVWF  xE3
308E:  MOVWF  xE4
3090:  CALL   05BE
....................    printf(lcd_putc,"MTO.  pH:%2.1f ",pVpH);    
3094:  MOVLW  DC
3096:  MOVWF  FF6
3098:  MOVLW  03
309A:  MOVWF  FF7
309C:  MOVLW  09
309E:  MOVWF  xD5
30A0:  CALL   117E
30A4:  MOVLW  01
30A6:  MOVWF  FE9
30A8:  MOVFF  B4,D8
30AC:  MOVFF  B3,D7
30B0:  MOVFF  B2,D6
30B4:  MOVFF  B1,D5
30B8:  MOVWF  xD9
30BA:  CALL   134A
30BE:  MOVLW  20
30C0:  MOVWF  xE2
30C2:  CALL   0620
....................    lcd_gotoxy(1,2); 
30C6:  MOVLW  01
30C8:  MOVWF  xE3
30CA:  MOVLW  02
30CC:  MOVWF  xE4
30CE:  CALL   05BE
....................    printf(lcd_putc,"b:%2.2f X=%2.0f X1=%2.0f" ,b,X0,X1); 
30D2:  MOVLW  62
30D4:  MOVWF  xE2
30D6:  CALL   0620
30DA:  MOVLW  3A
30DC:  MOVWF  xE2
30DE:  CALL   0620
30E2:  MOVLW  89
30E4:  MOVWF  FE9
30E6:  MOVFF  C0,D8
30EA:  MOVFF  BF,D7
30EE:  MOVFF  BE,D6
30F2:  MOVFF  BD,D5
30F6:  MOVLW  02
30F8:  MOVWF  xD9
30FA:  CALL   134A
30FE:  MOVLW  20
3100:  MOVWF  xE2
3102:  CALL   0620
3106:  MOVLW  58
3108:  MOVWF  xE2
310A:  CALL   0620
310E:  MOVLW  3D
3110:  MOVWF  xE2
3112:  CALL   0620
3116:  MOVLW  01
3118:  MOVWF  FE9
311A:  MOVFF  A0,D8
311E:  MOVFF  9F,D7
3122:  MOVFF  9E,D6
3126:  MOVFF  9D,D5
312A:  CLRF   xD9
312C:  CALL   134A
3130:  MOVLW  FB
3132:  MOVWF  FF6
3134:  MOVLW  03
3136:  MOVWF  FF7
3138:  MOVLW  04
313A:  MOVWF  xD5
313C:  CALL   117E
3140:  MOVLW  01
3142:  MOVWF  FE9
3144:  MOVFF  A8,D8
3148:  MOVFF  A7,D7
314C:  MOVFF  A6,D6
3150:  MOVFF  A5,D5
3154:  CLRF   xD9
3156:  CALL   134A
....................    lcd_gotoxy(1,3); 
315A:  MOVLW  01
315C:  MOVWF  xE3
315E:  MOVLW  03
3160:  MOVWF  xE4
3162:  CALL   05BE
....................    printf(lcd_putc,"Y0=%2.1f Y1=%2.1f %02u" ,Y0,Y1,negativo); 
3166:  MOVLW  59
3168:  MOVWF  xE2
316A:  CALL   0620
316E:  MOVLW  30
3170:  MOVWF  xE2
3172:  CALL   0620
3176:  MOVLW  3D
3178:  MOVWF  xE2
317A:  CALL   0620
317E:  MOVLW  01
3180:  MOVWF  FE9
3182:  MOVFF  A4,D8
3186:  MOVFF  A3,D7
318A:  MOVFF  A2,D6
318E:  MOVFF  A1,D5
3192:  MOVWF  xD9
3194:  CALL   134A
3198:  MOVLW  0E
319A:  MOVWF  FF6
319C:  MOVLW  04
319E:  MOVWF  FF7
31A0:  MOVLW  04
31A2:  MOVWF  xD5
31A4:  CALL   117E
31A8:  MOVLW  01
31AA:  MOVWF  FE9
31AC:  MOVFF  AC,D8
31B0:  MOVFF  AB,D7
31B4:  MOVFF  AA,D6
31B8:  MOVFF  A9,D5
31BC:  MOVWF  xD9
31BE:  CALL   134A
31C2:  MOVLW  20
31C4:  MOVWF  xE2
31C6:  CALL   0620
31CA:  MOVFF  28,D5
31CE:  MOVLW  01
31D0:  MOVWF  xD6
31D2:  CALL   1530
....................    lcd_gotoxy(1,4); 
31D6:  MOVLW  01
31D8:  MOVWF  xE3
31DA:  MOVLW  04
31DC:  MOVWF  xE4
31DE:  CALL   05BE
....................    printf(lcd_putc,"T. Pulso=%02u ADC:%2.0f ",tpulso,sensores(0));    
31E2:  CLRF   xD6
31E4:  CALL   159C
31E8:  MOVFF  00,D1
31EC:  MOVFF  01,D2
31F0:  MOVFF  02,D3
31F4:  MOVFF  03,D4
31F8:  MOVLW  1E
31FA:  MOVWF  FF6
31FC:  MOVLW  04
31FE:  MOVWF  FF7
3200:  MOVLW  09
3202:  MOVWF  xD5
3204:  CALL   117E
3208:  MOVFF  2B,D5
320C:  MOVLW  01
320E:  MOVWF  xD6
3210:  CALL   1530
3214:  MOVLW  2B
3216:  MOVWF  FF6
3218:  MOVLW  04
321A:  MOVWF  FF7
321C:  MOVLW  05
321E:  MOVWF  xD5
3220:  CALL   117E
3224:  MOVLW  01
3226:  MOVWF  FE9
3228:  MOVFF  D4,D8
322C:  MOVFF  D3,D7
3230:  MOVFF  D2,D6
3234:  MOVFF  D1,D5
3238:  CLRF   xD9
323A:  CALL   134A
323E:  MOVLW  20
3240:  MOVWF  xE2
3242:  CALL   0620
....................     
....................    if(RIGHT){             
3246:  BSF    F92.4
3248:  BTFSC  F80.4
324A:  BRA    3268
....................       delay_ms(500); 
324C:  MOVLW  02
324E:  MOVWF  xD1
3250:  MOVLW  FA
3252:  MOVWF  xE8
3254:  CALL   04C4
3258:  DECFSZ xD1,F
325A:  BRA    3250
....................       printf(lcd_putc,"\f"); 
325C:  MOVLW  0C
325E:  MOVWF  xE2
3260:  CALL   0620
....................       Menu=100; 
3264:  MOVLW  64
3266:  MOVWF  19
....................    } 
....................     
....................    if(LEFT){ 
3268:  BSF    F92.5
326A:  BTFSC  F80.5
326C:  BRA    3292
....................       Menu=1;paso=0;delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
326E:  MOVLW  01
3270:  MOVWF  19
3272:  CLRF   35
3274:  MOVLW  02
3276:  MOVWF  xD1
3278:  MOVLW  FA
327A:  MOVWF  xE8
327C:  CALL   04C4
3280:  DECFSZ xD1,F
3282:  BRA    3278
3284:  MOVLW  02
3286:  MOVWF  1C
3288:  MOVWF  1E
328A:  MOVLW  0C
328C:  MOVWF  xE2
328E:  CALL   0620
....................    }   
....................   } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
3292:  MOVF   19,W
3294:  SUBLW  64
3296:  BTFSS  FD8.2
3298:  BRA    372C
....................     
....................    if(visualiza==1){ 
329A:  BTFSS  18.1
329C:  BRA    3412
....................       lcd_gotoxy(1,2); 
329E:  MOVLW  01
32A0:  MOVWF  xE3
32A2:  MOVLW  02
32A4:  MOVWF  xE4
32A6:  CALL   05BE
....................       printf(lcd_putc,"pH:%2.1f",pVpH); 
32AA:  MOVLW  70
32AC:  MOVWF  xE2
32AE:  CALL   0620
32B2:  MOVLW  48
32B4:  MOVWF  xE2
32B6:  CALL   0620
32BA:  MOVLW  3A
32BC:  MOVWF  xE2
32BE:  CALL   0620
32C2:  MOVLW  01
32C4:  MOVWF  FE9
32C6:  MOVFF  B4,D8
32CA:  MOVFF  B3,D7
32CE:  MOVFF  B2,D6
32D2:  MOVFF  B1,D5
32D6:  MOVWF  xD9
32D8:  CALL   134A
....................        
....................       lcd_gotoxy(1,3); 
32DC:  MOVLW  01
32DE:  MOVWF  xE3
32E0:  MOVLW  03
32E2:  MOVWF  xE4
32E4:  CALL   05BE
....................       printf(lcd_putc,"Time:%03u:%02u",horas,minutos); 
32E8:  MOVLW  38
32EA:  MOVWF  FF6
32EC:  MOVLW  04
32EE:  MOVWF  FF7
32F0:  MOVLW  05
32F2:  MOVWF  xD5
32F4:  CALL   117E
32F8:  MOVFF  23,D5
32FC:  MOVLW  03
32FE:  MOVWF  xD6
3300:  CALL   1530
3304:  MOVLW  3A
3306:  MOVWF  xE2
3308:  CALL   0620
330C:  MOVFF  22,D5
3310:  MOVLW  01
3312:  MOVWF  xD6
3314:  CALL   1530
....................     
....................       if(estadoba==1){ 
3318:  BTFSS  17.1
331A:  BRA    333A
....................          lcd_gotoxy(1,4); 
331C:  MOVLW  01
331E:  MOVWF  xE3
3320:  MOVLW  04
3322:  MOVWF  xE4
3324:  CALL   05BE
....................          printf(lcd_putc,"BOMBA:ON "); 
3328:  MOVLW  48
332A:  MOVWF  FF6
332C:  MOVLW  04
332E:  MOVWF  FF7
3330:  CALL   10B4
....................          EnciendeBomba(); 
3334:  CALL   171A
....................       }else{ 
3338:  BRA    3356
....................          lcd_gotoxy(1,4); 
333A:  MOVLW  01
333C:  MOVWF  xE3
333E:  MOVLW  04
3340:  MOVWF  xE4
3342:  CALL   05BE
....................          printf(lcd_putc,"BOMBA:OFF"); 
3346:  MOVLW  52
3348:  MOVWF  FF6
334A:  MOVLW  04
334C:  MOVWF  FF7
334E:  CALL   10B4
....................          ApagaBomba(); 
3352:  CALL   173C
....................       } 
....................     
....................       if(estadobp==1){ 
3356:  BTFSS  17.0
3358:  BRA    3378
....................          lcd_gotoxy(13,4); 
335A:  MOVLW  0D
335C:  MOVWF  xE3
335E:  MOVLW  04
3360:  MOVWF  xE4
3362:  CALL   05BE
....................          printf(lcd_putc,"BASE:ON "); 
3366:  MOVLW  5C
3368:  MOVWF  FF6
336A:  MOVLW  04
336C:  MOVWF  FF7
336E:  CALL   10B4
....................          Peristaltica_on; 
3372:  BSF    F8B.2
3374:  BCF    F94.2
....................       }else{ 
3376:  BRA    3394
....................          lcd_gotoxy(13,4); 
3378:  MOVLW  0D
337A:  MOVWF  xE3
337C:  MOVLW  04
337E:  MOVWF  xE4
3380:  CALL   05BE
....................          printf(lcd_putc,"BASE:OFF"); 
3384:  MOVLW  66
3386:  MOVWF  FF6
3388:  MOVLW  04
338A:  MOVWF  FF7
338C:  CALL   10B4
....................          Peristaltica_off; 
3390:  BCF    F8B.2
3392:  BCF    F94.2
....................       } 
....................     
....................       if(estadoagua==1){ 
3394:  BTFSS  17.2
3396:  BRA    33B6
....................          lcd_gotoxy(13,2); 
3398:  MOVLW  0D
339A:  MOVWF  xE3
339C:  MOVLW  02
339E:  MOVWF  xE4
33A0:  CALL   05BE
....................          printf(lcd_putc,"AGUA:ON "); 
33A4:  MOVLW  70
33A6:  MOVWF  FF6
33A8:  MOVLW  04
33AA:  MOVWF  FF7
33AC:  CALL   10B4
....................          Agua_on; 
33B0:  BSF    F8C.2
33B2:  BCF    F95.2
....................       }else{ 
33B4:  BRA    33D2
....................          lcd_gotoxy(13,2); 
33B6:  MOVLW  0D
33B8:  MOVWF  xE3
33BA:  MOVLW  02
33BC:  MOVWF  xE4
33BE:  CALL   05BE
....................          printf(lcd_putc,"AGUA:OFF"); 
33C2:  MOVLW  7A
33C4:  MOVWF  FF6
33C6:  MOVLW  04
33C8:  MOVWF  FF7
33CA:  CALL   10B4
....................          Agua_off; 
33CE:  BCF    F8C.2
33D0:  BCF    F95.2
....................       } 
....................        
....................       if(estadode==1){ 
33D2:  BTFSS  18.4
33D4:  BRA    33F4
....................          lcd_gotoxy(13,3); 
33D6:  MOVLW  0D
33D8:  MOVWF  xE3
33DA:  MOVLW  03
33DC:  MOVWF  xE4
33DE:  CALL   05BE
....................          printf(lcd_putc,"DESA:ON "); 
33E2:  MOVLW  84
33E4:  MOVWF  FF6
33E6:  MOVLW  04
33E8:  MOVWF  FF7
33EA:  CALL   10B4
....................          Desague_on; 
33EE:  BSF    F8C.4
33F0:  BCF    F95.4
....................       }else{ 
33F2:  BRA    3410
....................          lcd_gotoxy(13,3); 
33F4:  MOVLW  0D
33F6:  MOVWF  xE3
33F8:  MOVLW  03
33FA:  MOVWF  xE4
33FC:  CALL   05BE
....................          printf(lcd_putc,"DESA:OFF"); 
3400:  MOVLW  8E
3402:  MOVWF  FF6
3404:  MOVLW  04
3406:  MOVWF  FF7
3408:  CALL   10B4
....................          Desague_off; 
340C:  BCF    F8C.4
340E:  BCF    F95.4
....................       } 
....................       visualiza=0; 
3410:  BCF    18.1
....................    } 
....................     
....................    if(!AUX){ 
3412:  BSF    F96.2
3414:  BTFSS  F84.2
3416:  BRA    35FE
....................       if(activo){ 
3418:  BTFSS  18.5
341A:  BRA    3426
....................          activo=0; 
341C:  BCF    18.5
....................          estadoba=0; 
341E:  BCF    17.1
....................          estadobp=0; 
3420:  BCF    17.0
....................          estadode=0; 
3422:  BCF    18.4
....................          estadoagua=0; 
3424:  BCF    17.2
....................       } 
....................       if(horas>=tiempoRenovacion){ 
3426:  MOVF   2C,W
3428:  SUBWF  23,W
342A:  BTFSS  FD8.0
342C:  BRA    35AE
....................          renovar=1; 
342E:  BSF    18.2
....................          if(tRenovacion<1800){ 
3430:  MOVF   42,W
3432:  SUBLW  07
3434:  BNC   3450
3436:  BNZ   343E
3438:  MOVF   41,W
343A:  SUBLW  07
343C:  BNC   3450
....................             estadode=1; 
343E:  BSF    18.4
....................             Desague_on; 
3440:  BSF    F8C.4
3442:  BCF    F95.4
....................             ApagaBomba(); 
3444:  CALL   173C
....................             Agua_off; 
3448:  BCF    F8C.2
344A:  BCF    F95.2
....................             estadoagua=0; 
344C:  BCF    17.2
....................          }else{ 
344E:  BRA    35AC
....................             Desague_off; 
3450:  BCF    F8C.4
3452:  BCF    F95.4
....................             estadode=0; 
3454:  BCF    18.4
....................             if(tPeristaltica>=(0.6*cargaInicial)){ 
3456:  MOVFF  40,DC
345A:  MOVFF  3F,DB
345E:  CALL   06B6
3462:  MOVLW  9A
3464:  MOVWF  xE5
3466:  MOVLW  99
3468:  MOVWF  xE4
346A:  MOVLW  19
346C:  MOVWF  xE3
346E:  MOVLW  7E
3470:  MOVWF  xE2
3472:  MOVFF  03,E9
3476:  MOVFF  02,E8
347A:  MOVFF  01,E7
347E:  MOVFF  00,E6
3482:  CALL   119E
3486:  MOVFF  00,D1
348A:  MOVFF  01,D2
348E:  MOVFF  02,D3
3492:  MOVFF  03,D4
3496:  MOVFF  44,DC
349A:  MOVFF  43,DB
349E:  CALL   06B6
34A2:  MOVFF  D4,DD
34A6:  MOVFF  D3,DC
34AA:  MOVFF  D2,DB
34AE:  MOVFF  D1,DA
34B2:  MOVFF  03,E1
34B6:  MOVFF  02,E0
34BA:  MOVFF  01,DF
34BE:  MOVFF  00,DE
34C2:  CALL   0CE8
34C6:  BC    34CA
34C8:  BNZ   34D4
....................                estadobp=0; 
34CA:  BCF    17.0
....................                Peristaltica_off; 
34CC:  BCF    F8B.2
34CE:  BCF    F94.2
....................                adicionBase=0; 
34D0:  BCF    18.3
....................             }else{ 
34D2:  BRA    34DC
....................                estadobp=1; 
34D4:  BSF    17.0
....................                Peristaltica_on; 
34D6:  BSF    F8B.2
34D8:  BCF    F94.2
....................                adicionBase=1; 
34DA:  BSF    18.3
....................             } 
....................             if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
34DC:  BSF    F96.0
34DE:  BTFSS  F84.0
34E0:  BRA    34F0
....................                estadoba=0; 
34E2:  BCF    17.1
....................                ApagaBomba();                
34E4:  CALL   173C
....................                Agua_on; 
34E8:  BSF    F8C.2
34EA:  BCF    F95.2
....................                estadoagua=1; 
34EC:  BSF    17.2
....................             }else{ 
34EE:  BRA    35AC
....................                if(HIGH){ 
34F0:  BSF    F96.1
34F2:  BTFSC  F84.1
34F4:  BRA    35AC
....................                   estadoagua=0; 
34F6:  BCF    17.2
....................                   Agua_off; 
34F8:  BCF    F8C.2
34FA:  BCF    F95.2
....................                   if(!adicionBase){ 
34FC:  BTFSC  18.3
34FE:  BRA    35AC
....................                      renovar=0; 
3500:  BCF    18.2
....................                      tRenovacion=0; 
3502:  CLRF   42
3504:  CLRF   41
....................                      tPeristaltica=0; 
3506:  CLRF   44
3508:  CLRF   43
....................                      horas=0; 
350A:  CLRF   23
....................                      minutos=0; 
350C:  CLRF   22
....................                      segundos=0; 
350E:  CLRF   21
....................                      write_eeprom(50,segundos);delay_ms(20); 
3510:  MOVLW  32
3512:  MOVWF  FA9
3514:  MOVFF  21,FA8
3518:  BCF    FA6.6
351A:  BCF    FA6.7
351C:  BSF    FA6.2
351E:  MOVF   FF2,W
3520:  MOVWF  00
3522:  BCF    FF2.7
3524:  MOVLB  F
3526:  MOVLW  55
3528:  MOVWF  FA7
352A:  MOVLW  AA
352C:  MOVWF  FA7
352E:  BSF    FA6.1
3530:  BTFSC  FA6.1
3532:  BRA    3530
3534:  BCF    FA6.2
3536:  MOVF   00,W
3538:  IORWF  FF2,F
353A:  MOVLW  14
353C:  MOVLB  0
353E:  MOVWF  xE8
3540:  CALL   04C4
....................                      write_eeprom(51,minutos);delay_ms(20); 
3544:  MOVLW  33
3546:  MOVWF  FA9
3548:  MOVFF  22,FA8
354C:  BCF    FA6.6
354E:  BCF    FA6.7
3550:  BSF    FA6.2
3552:  MOVF   FF2,W
3554:  MOVWF  00
3556:  BCF    FF2.7
3558:  MOVLB  F
355A:  MOVLW  55
355C:  MOVWF  FA7
355E:  MOVLW  AA
3560:  MOVWF  FA7
3562:  BSF    FA6.1
3564:  BTFSC  FA6.1
3566:  BRA    3564
3568:  BCF    FA6.2
356A:  MOVF   00,W
356C:  IORWF  FF2,F
356E:  MOVLW  14
3570:  MOVLB  0
3572:  MOVWF  xE8
3574:  CALL   04C4
....................                      write_eeprom(52,horas);delay_ms(20); 
3578:  MOVLW  34
357A:  MOVWF  FA9
357C:  MOVFF  23,FA8
3580:  BCF    FA6.6
3582:  BCF    FA6.7
3584:  BSF    FA6.2
3586:  MOVF   FF2,W
3588:  MOVWF  00
358A:  BCF    FF2.7
358C:  MOVLB  F
358E:  MOVLW  55
3590:  MOVWF  FA7
3592:  MOVLW  AA
3594:  MOVWF  FA7
3596:  BSF    FA6.1
3598:  BTFSC  FA6.1
359A:  BRA    3598
359C:  BCF    FA6.2
359E:  MOVF   00,W
35A0:  IORWF  FF2,F
35A2:  MOVLW  14
35A4:  MOVLB  0
35A6:  MOVWF  xE8
35A8:  CALL   04C4
....................                   } 
....................                } 
....................             } 
....................          } 
....................       }else{  
35AC:  BRA    35FC
....................          if(RIGHT){ 
35AE:  BSF    F92.4
35B0:  BTFSC  F80.4
35B2:  BRA    35C6
....................             if(Flanco == 0){ 
35B4:  BTFSC  17.3
35B6:  BRA    35C4
....................                estadoagua=!estadoagua;Flanco = 1;delay_ms(30); 
35B8:  BTG    17.2
35BA:  BSF    17.3
35BC:  MOVLW  1E
35BE:  MOVWF  xE8
35C0:  CALL   04C4
....................             } 
....................          }else{ 
35C4:  BRA    35C8
....................             Flanco = 0; 
35C6:  BCF    17.3
....................          } 
....................           
....................          if(DOWN){ 
35C8:  BSF    F92.3
35CA:  BTFSC  F80.3
35CC:  BRA    35E0
....................             if(Flanco1 == 0){ 
35CE:  BTFSC  17.4
35D0:  BRA    35DE
....................                estadoba=!estadoba;Flanco1 = 1;delay_ms(30); 
35D2:  BTG    17.1
35D4:  BSF    17.4
35D6:  MOVLW  1E
35D8:  MOVWF  xE8
35DA:  CALL   04C4
....................             } 
....................          }else{ 
35DE:  BRA    35E2
....................             Flanco1 = 0; 
35E0:  BCF    17.4
....................          } 
....................           
....................          if(LEFT){ 
35E2:  BSF    F92.5
35E4:  BTFSC  F80.5
35E6:  BRA    35FA
....................             if(Flanco2 == 0){ 
35E8:  BTFSC  17.5
35EA:  BRA    35F8
....................                estadobp=!estadobp;Flanco2 = 1;delay_ms(30); 
35EC:  BTG    17.0
35EE:  BSF    17.5
35F0:  MOVLW  1E
35F2:  MOVWF  xE8
35F4:  CALL   04C4
....................             } 
....................          }else{ 
35F8:  BRA    35FC
....................             Flanco2 = 0; 
35FA:  BCF    17.5
....................          } 
....................       } 
....................    }else{ 
35FC:  BRA    3622
....................       renovar=0; 
35FE:  BCF    18.2
....................       adicionBase=0; 
3600:  BCF    18.3
....................       if(tRenovacion<1800) 
3602:  MOVF   42,W
3604:  SUBLW  07
3606:  BNC   3614
3608:  BNZ   3610
360A:  MOVF   41,W
360C:  SUBLW  07
360E:  BNC   3614
....................          tRenovacion=0; 
3610:  CLRF   42
3612:  CLRF   41
....................       estadode=0; 
3614:  BCF    18.4
....................       estadobp=0; 
3616:  BCF    17.0
....................       Desague_off; 
3618:  BCF    F8C.4
361A:  BCF    F95.4
....................       Peristaltica_off; 
361C:  BCF    F8B.2
361E:  BCF    F94.2
....................       activo=1; 
3620:  BSF    18.5
....................    } 
....................     
.................... // Monitoreo Nivel de Agua//-------------------------------------- 
....................    if(!LOW){//Si no sensa agua en el nivel alto y no se ha llenado el calderin          
3622:  BSF    F96.0
3624:  BTFSS  F84.0
3626:  BRA    3658
....................       estadoba=0; 
3628:  BCF    17.1
....................       ApagaBomba(); 
362A:  CALL   173C
....................       lcd_gotoxy(1,1); 
362E:  MOVLW  01
3630:  MOVWF  xE3
3632:  MOVWF  xE4
3634:  CALL   05BE
....................       printf(lcd_putc,"!NIVEL DE AGUA BAJO!"); 
3638:  MOVLW  98
363A:  MOVWF  FF6
363C:  MOVLW  04
363E:  MOVWF  FF7
3640:  CALL   10B4
....................       if(AUX){ 
3644:  BSF    F96.2
3646:  BTFSC  F84.2
3648:  BRA    3650
....................          Agua_on; 
364A:  BSF    F8C.2
364C:  BCF    F95.2
....................          estadoagua=1; 
364E:  BSF    17.2
....................       } 
....................       SensadoNivelL=0; 
3650:  BCF    18.0
....................       TiempoSensadoNivelL=0; 
3652:  CLRF   3C
3654:  CLRF   3B
....................    }else{ 
3656:  BRA    36D2
....................       lcd_gotoxy(1,1); 
3658:  MOVLW  01
365A:  MOVWF  xE3
365C:  MOVWF  xE4
365E:  CALL   05BE
....................       printf(lcd_putc,"JP SCRUBBER TR:%03u h",tiempoRenovacion); 
3662:  MOVLW  AE
3664:  MOVWF  FF6
3666:  MOVLW  04
3668:  MOVWF  FF7
366A:  MOVLW  0F
366C:  MOVWF  xD5
366E:  CALL   117E
3672:  MOVFF  2C,D5
3676:  MOVLW  03
3678:  MOVWF  xD6
367A:  CALL   1530
367E:  MOVLW  20
3680:  MOVWF  xE2
3682:  CALL   0620
3686:  MOVLW  68
3688:  MOVWF  xE2
368A:  CALL   0620
....................       Alarma_off; 
368E:  BCF    F8C.3
3690:  BCF    F95.3
....................       if(TiempoSensadoNivelL>3){ 
3692:  MOVF   3C,F
3694:  BNZ   369C
3696:  MOVF   3B,W
3698:  SUBLW  03
369A:  BC    36D0
....................          SensadoNivelL=0; 
369C:  BCF    18.0
....................          if(AUX){ 
369E:  BSF    F96.2
36A0:  BTFSC  F84.2
36A2:  BRA    36AA
....................             EnciendeBomba(); 
36A4:  CALL   171A
....................             estadoba=1; 
36A8:  BSF    17.1
....................          } 
....................          if(HIGH){          
36AA:  BSF    F96.1
36AC:  BTFSC  F84.1
36AE:  BRA    36C8
....................             if(TiempoSensadoNivelH>3){ 
36B0:  MOVF   3E,F
36B2:  BNZ   36BA
36B4:  MOVF   3D,W
36B6:  SUBLW  03
36B8:  BC    36C4
....................                SensadoNivelH=0; 
36BA:  BCF    18.6
....................                estadoagua=0; 
36BC:  BCF    17.2
....................                Agua_off; 
36BE:  BCF    F8C.2
36C0:  BCF    F95.2
....................             }else{ 
36C2:  BRA    36C6
....................                SensadoNivelH=1; 
36C4:  BSF    18.6
....................             } 
....................          }else{ 
36C6:  BRA    36CE
....................             SensadoNivelH=0; 
36C8:  BCF    18.6
....................             TiempoSensadoNivelH=0; 
36CA:  CLRF   3E
36CC:  CLRF   3D
....................          } 
....................       }else{ 
36CE:  BRA    36D2
....................          SensadoNivelL=1; 
36D0:  BSF    18.0
....................       } 
....................    } 
.................... // Monitoreo Nivel de Agua//-------------------------------------- 
....................  
....................    if(UP){ 
36D2:  BSF    F92.2
36D4:  BTFSC  F80.2
36D6:  BRA    372C
....................       delay_ms(100); 
36D8:  MOVLW  64
36DA:  MOVWF  xE8
36DC:  CALL   04C4
....................       if(UP){ 
36E0:  BSF    F92.2
36E2:  BTFSC  F80.2
36E4:  BRA    372C
....................          delay_ms(2000); 
36E6:  MOVLW  08
36E8:  MOVWF  xD1
36EA:  MOVLW  FA
36EC:  MOVWF  xE8
36EE:  CALL   04C4
36F2:  DECFSZ xD1,F
36F4:  BRA    36EA
....................          if(UP){ 
36F6:  BSF    F92.2
36F8:  BTFSC  F80.2
36FA:  BRA    371C
....................             printf(lcd_putc,"\f");delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;Flanco=1; 
36FC:  MOVLW  0C
36FE:  MOVWF  xE2
3700:  CALL   0620
3704:  MOVLW  1E
3706:  MOVWF  xE8
3708:  CALL   04C4
370C:  MOVLW  01
370E:  MOVWF  19
3710:  CLRF   35
3712:  MOVLW  02
3714:  MOVWF  1C
3716:  MOVWF  1E
3718:  BSF    17.3
....................          }else if(!AUX){ 
371A:  BRA    372C
371C:  BSF    F96.2
371E:  BTFSS  F84.2
3720:  BRA    372C
....................             estadode=!estadode; 
3722:  BTG    18.4
....................             delay_ms(100); 
3724:  MOVLW  64
3726:  MOVWF  xE8
3728:  CALL   04C4
....................          } 
....................       } 
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................  
....................    if(treset>=30){ 
372C:  MOVF   29,W
372E:  SUBLW  1D
3730:  BC    3738
....................       lcd_init(); 
3732:  CALL   0568
....................       treset=0; 
3736:  CLRF   29
....................    } 
....................     
....................    if(tcontrol>10) 
3738:  MOVF   2A,W
373A:  SUBLW  0A
373C:  BC    3740
....................       tcontrol=0; 
373E:  CLRF   2A
....................     
....................    if(Lectura==1){ 
3740:  BTFSS  17.6
3742:  BRA    3768
....................       if(!LOW) 
3744:  BSF    F96.0
3746:  BTFSS  F84.0
3748:  BRA    374E
....................          output_toggle(PIN_D3); 
374A:  BCF    F95.3
374C:  BTG    F8C.3
....................       pVpH=Leer_Sensor_ph(MediaMovil); 
374E:  MOVFF  26,D1
3752:  GOTO   17FE
3756:  MOVFF  03,B4
375A:  MOVFF  02,B3
375E:  MOVFF  01,B2
3762:  MOVFF  00,B1
....................       Lectura=0; 
3766:  BCF    17.6
....................    } 
....................     
....................    } 
3768:  GOTO   1DF6
.................... } 
....................  
376C:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

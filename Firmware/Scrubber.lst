CCS PCH C Compiler, Version 4.104, 5967               07-oct-15 11:00

               Filename: E:\JP\JP\Laboratorio\Scrubber\Firmware\Scrubber.lst

               ROM used: 16768 bytes (51%)
                         Largest free fragment is 15996
               RAM used: 213 (10%) at main() level
                         240 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1684
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
066E:  CLRF   FEA
0670:  MOVLW  E3
0672:  MOVWF  FE9
0674:  MOVF   FEF,W
0676:  BZ    0694
0678:  MOVLW  0F
067A:  MOVWF  01
067C:  CLRF   00
067E:  DECFSZ 00,F
0680:  BRA    067E
0682:  DECFSZ 01,F
0684:  BRA    067C
0686:  MOVLW  8F
0688:  MOVWF  00
068A:  DECFSZ 00,F
068C:  BRA    068A
068E:  NOP   
0690:  DECFSZ FEF,F
0692:  BRA    0678
0694:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
06BC:  MOVLW  F0
06BE:  MOVWF  F93
....................       lcd.rw = 1; 
06C0:  BSF    F81.2
....................       delay_cycles(25); 
06C2:  MOVLW  08
06C4:  MOVWF  00
06C6:  DECFSZ 00,F
06C8:  BRA    06C6
....................       lcd.enable = 1; 
06CA:  BSF    F81.3
....................       delay_cycles(25); 
06CC:  MOVLW  08
06CE:  MOVWF  00
06D0:  DECFSZ 00,F
06D2:  BRA    06D0
....................       high = lcd.data; 
06D4:  SWAPF  F81,W
06D6:  ANDLW  0F
06D8:  MOVWF  xE9
....................       lcd.enable = 0; 
06DA:  BCF    F81.3
....................       delay_cycles(25); 
06DC:  MOVLW  08
06DE:  MOVWF  00
06E0:  DECFSZ 00,F
06E2:  BRA    06E0
....................       lcd.enable = 1; 
06E4:  BSF    F81.3
....................       delay_us(25); 
06E6:  MOVLW  63
06E8:  MOVWF  00
06EA:  DECFSZ 00,F
06EC:  BRA    06EA
06EE:  BRA    06F0
....................       low = lcd.data; 
06F0:  SWAPF  F81,W
06F2:  ANDLW  0F
06F4:  MOVWF  xE8
....................       lcd.enable = 0; 
06F6:  BCF    F81.3
....................       set_tris_b(LCD_WRITE); 
06F8:  MOVLW  00
06FA:  MOVWF  F93
....................       return( (high<<4) | low); 
06FC:  SWAPF  xE9,W
06FE:  MOVWF  00
0700:  MOVLW  F0
0702:  ANDWF  00,F
0704:  MOVF   00,W
0706:  IORWF  xE8,W
0708:  MOVWF  01
.................... } 
070A:  GOTO   0712 (RETURN)
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0696:  SWAPF  xE9,W
0698:  ANDLW  F0
069A:  MOVWF  00
069C:  MOVLW  0F
069E:  ANDWF  F81,W
06A0:  IORWF  00,W
06A2:  MOVWF  F81
....................       delay_cycles(25); 
06A4:  MOVLW  08
06A6:  MOVWF  00
06A8:  DECFSZ 00,F
06AA:  BRA    06A8
....................       lcd.enable = 1; 
06AC:  BSF    F81.3
....................       delay_us(55); 
06AE:  MOVLW  DB
06B0:  MOVWF  00
06B2:  DECFSZ 00,F
06B4:  BRA    06B2
06B6:  BRA    06B8
....................       lcd.enable = 0; 
06B8:  BCF    F81.3
.................... } 
06BA:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
070E:  BCF    F81.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0710:  BRA    06BC
0712:  MOVFF  01,E8
0716:  BTFSC  01.7
0718:  BRA    0710
....................       lcd.rs = address; 
071A:  BTFSS  xE6.0
071C:  BCF    F81.1
071E:  BTFSC  xE6.0
0720:  BSF    F81.1
....................       delay_cycles(25); 
0722:  MOVLW  08
0724:  MOVWF  00
0726:  DECFSZ 00,F
0728:  BRA    0726
....................       lcd.rw = 0; 
072A:  BCF    F81.2
....................       delay_cycles(25); 
072C:  MOVLW  08
072E:  MOVWF  00
0730:  DECFSZ 00,F
0732:  BRA    0730
....................       lcd.enable = 0; 
0734:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0736:  SWAPF  xE7,W
0738:  MOVWF  xE8
073A:  MOVLW  0F
073C:  ANDWF  xE8,F
073E:  MOVFF  E8,E9
0742:  RCALL  0696
....................       lcd_send_nibble(n & 0xf); 
0744:  MOVF   xE7,W
0746:  ANDLW  0F
0748:  MOVWF  xE8
074A:  MOVWF  xE9
074C:  RCALL  0696
.................... } 
074E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0750:  MOVLW  00
0752:  MOVWF  F93
....................     lcd.rs = 0; 
0754:  BCF    F81.1
....................     lcd.rw = 0; 
0756:  BCF    F81.2
....................     lcd.enable = 0; 
0758:  BCF    F81.3
....................     delay_ms(15); 
075A:  MOVLW  0F
075C:  MOVWF  xE3
075E:  RCALL  066E
....................     for(i=1;i<=3;++i) { 
0760:  MOVLW  01
0762:  MOVWF  xD1
0764:  MOVF   xD1,W
0766:  SUBLW  03
0768:  BNC   077A
....................        lcd_send_nibble(3); 
076A:  MOVLW  03
076C:  MOVWF  xE9
076E:  RCALL  0696
....................        delay_ms(5); 
0770:  MOVLW  05
0772:  MOVWF  xE3
0774:  RCALL  066E
....................     } 
0776:  INCF   xD1,F
0778:  BRA    0764
....................     lcd_send_nibble(2); 
077A:  MOVLW  02
077C:  MOVWF  xE9
077E:  RCALL  0696
....................     for(i=0;i<=3;++i) 
0780:  CLRF   xD1
0782:  MOVF   xD1,W
0784:  SUBLW  03
0786:  BNC   07A4
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0788:  CLRF   03
078A:  MOVF   xD1,W
078C:  MOVFF  FF2,D2
0790:  BCF    FF2.7
0792:  RCALL  0096
0794:  BTFSC  xD2.7
0796:  BSF    FF2.7
0798:  MOVWF  xD2
079A:  CLRF   xE6
079C:  MOVWF  xE7
079E:  RCALL  070E
07A0:  INCF   xD1,F
07A2:  BRA    0782
.................... } 
07A4:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0828:  MOVLW  01
082A:  SUBWF  xE4,W
082C:  ADDLW  FC
082E:  BC    084E
0830:  ADDLW  04
0832:  GOTO   085E
....................      case 1 : address=0x80;break; 
0836:  MOVLW  80
0838:  MOVWF  xE5
083A:  BRA    084E
....................      case 2 : address=0xc0;break; 
083C:  MOVLW  C0
083E:  MOVWF  xE5
0840:  BRA    084E
....................      case 3 : address=0x94;break; 
0842:  MOVLW  94
0844:  MOVWF  xE5
0846:  BRA    084E
....................      case 4 : address=0xd4;break; 
0848:  MOVLW  D4
084A:  MOVWF  xE5
084C:  BRA    084E
....................    } 
....................    address+=x-1; 
084E:  MOVLW  01
0850:  SUBWF  xE3,W
0852:  ADDWF  xE5,F
....................    lcd_send_byte(0,address); 
0854:  CLRF   xE6
0856:  MOVFF  E5,E7
085A:  RCALL  070E
.................... } 
085C:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
088A:  MOVF   xE2,W
088C:  SUBLW  F1
088E:  BNZ   0894
....................    { 
....................       c=238; 
0890:  MOVLW  EE
0892:  MOVWF  xE2
....................    } 
....................    if(c=='Ñ') 
0894:  MOVF   xE2,W
0896:  SUBLW  D1
0898:  BNZ   089E
....................    { 
....................       c=255; 
089A:  MOVLW  FF
089C:  MOVWF  xE2
....................    } 
....................     
....................    switch (c) { 
089E:  MOVF   xE2,W
08A0:  XORLW  0C
08A2:  BZ    08AE
08A4:  XORLW  06
08A6:  BZ    08C2
08A8:  XORLW  02
08AA:  BZ    08D0
08AC:  BRA    08DA
....................      case '\f'   : lcd_send_byte(0,1); 
08AE:  CLRF   xE6
08B0:  MOVLW  01
08B2:  MOVWF  xE7
08B4:  RCALL  070E
....................                    lcdline=1; 
08B6:  MOVLW  01
08B8:  MOVWF  16
....................                    delay_ms(2); 
08BA:  MOVLW  02
08BC:  MOVWF  xE3
08BE:  RCALL  066E
....................                                            break; 
08C0:  BRA    08E6
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
08C2:  INCF   16,F
08C4:  MOVLW  01
08C6:  MOVWF  xE3
08C8:  MOVFF  16,E4
08CC:  RCALL  0828
08CE:  BRA    08E6
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08D0:  CLRF   xE6
08D2:  MOVLW  10
08D4:  MOVWF  xE7
08D6:  RCALL  070E
08D8:  BRA    08E6
....................      default     : lcd_send_byte(1,c);     break; 
08DA:  MOVLW  01
08DC:  MOVWF  xE6
08DE:  MOVFF  E2,E7
08E2:  RCALL  070E
08E4:  BRA    08E6
....................    } 
.................... } 
08E6:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Bomba_on            output_bit(PIN_D1,1) 
.................... #define   Bomba_off           output_bit(PIN_D1,0) 
.................... #define   Alarma_on           output_bit(PIN_D2,1) 
.................... #define   Alarma_off          output_bit(PIN_D2,0) 
.................... #define   Peristaltica_on     output_bit(PIN_C1,1) 
.................... #define   Peristaltica_off    output_bit(PIN_C1,0) 
....................  
.................... short estadobp=0,estadoba=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,Lectura=0,Grabar=0; 
.................... int8 Menu=0, n_opcionH=8,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horas=0; 
.................... int8 r=0,q=0,i=0,MediaMovil=6,punto=1,negativo=10,treset=0,tcontrol=0,tpulso=3; 
.................... int8 BandaInt=0,BandaDec=0,sPpHInt=0,sPpHDec=0,bInt=0,bDec=0,Y0Int=0,Y0Dec=0,Y1Int=0,Y1Dec=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
....................  
.................... int16 tiempos; 
.................... float PromPH[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,PH=0.0,X0=0.0,Y0=0.0,X1=0.0,Y1=0.0,pHpoint=0.0,pVpH=0.0,sPpH=7.0,m=0.0,b=0.0,Banda=0.0,tmp=0.0,sPH=0.0,sPL=0.0; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   43,F
00BE:  BTFSC  FD8.2
00C0:  INCF   44,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   44,F
00C4:  BNZ   00CC
00C6:  MOVF   43,W
00C8:  SUBLW  C7
00CA:  BC    00F0
....................    {tiempos=0;Lectura=1;treset++;tcontrol++; 
00CC:  CLRF   44
00CE:  CLRF   43
00D0:  BSF    17.6
00D2:  INCF   2A,F
00D4:  INCF   2B,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadoba==1) 
00D6:  BTFSS  17.1
00D8:  BRA    00F0
....................    { 
....................       segundos++; 
00DA:  INCF   21,F
....................       if(segundos==60) 
00DC:  MOVF   21,W
00DE:  SUBLW  3C
00E0:  BNZ   00E6
....................       { 
....................          segundos=0;minutos++; 
00E2:  CLRF   21
00E4:  INCF   22,F
....................       } 
....................       if(minutos==60) 
00E6:  MOVF   22,W
00E8:  SUBLW  3C
00EA:  BNZ   00F0
....................       { 
....................          minutos=0;horas++; 
00EC:  CLRF   22
00EE:  INCF   23,F
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
00F0:  BCF    F9E.0
00F2:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0DDA:  DECFSZ xD2,W
0DDC:  BRA    0DF2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. un Punto      ");} 
0DDE:  MOVLW  02
0DE0:  MOVWF  xE3
0DE2:  MOVFF  D3,E4
0DE6:  RCALL  0828
0DE8:  MOVLW  F6
0DEA:  MOVWF  FF6
0DEC:  MOVLW  00
0DEE:  MOVWF  FF7
0DF0:  RCALL  08E8
....................    if(x==2) 
0DF2:  MOVF   xD2,W
0DF4:  SUBLW  02
0DF6:  BNZ   0E0C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cal. dos Puntos    ");} 
0DF8:  MOVLW  02
0DFA:  MOVWF  xE3
0DFC:  MOVFF  D3,E4
0E00:  RCALL  0828
0E02:  MOVLW  0A
0E04:  MOVWF  FF6
0E06:  MOVLW  01
0E08:  MOVWF  FF7
0E0A:  RCALL  08E8
....................    if(x==3) 
0E0C:  MOVF   xD2,W
0E0E:  SUBLW  03
0E10:  BNZ   0E26
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0E12:  MOVLW  02
0E14:  MOVWF  xE3
0E16:  MOVFF  D3,E4
0E1A:  RCALL  0828
0E1C:  MOVLW  1E
0E1E:  MOVWF  FF6
0E20:  MOVLW  01
0E22:  MOVWF  FF7
0E24:  RCALL  08E8
....................    if(x==4) 
0E26:  MOVF   xD2,W
0E28:  SUBLW  04
0E2A:  BNZ   0E40
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
0E2C:  MOVLW  02
0E2E:  MOVWF  xE3
0E30:  MOVFF  D3,E4
0E34:  RCALL  0828
0E36:  MOVLW  32
0E38:  MOVWF  FF6
0E3A:  MOVLW  01
0E3C:  MOVWF  FF7
0E3E:  RCALL  08E8
....................    if(x==5) 
0E40:  MOVF   xD2,W
0E42:  SUBLW  05
0E44:  BNZ   0E5A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Banda Muerta       ");} 
0E46:  MOVLW  02
0E48:  MOVWF  xE3
0E4A:  MOVFF  D3,E4
0E4E:  RCALL  0828
0E50:  MOVLW  46
0E52:  MOVWF  FF6
0E54:  MOVLW  01
0E56:  MOVWF  FF7
0E58:  RCALL  08E8
....................    if(x==6) 
0E5A:  MOVF   xD2,W
0E5C:  SUBLW  06
0E5E:  BNZ   0E74
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
0E60:  MOVLW  02
0E62:  MOVWF  xE3
0E64:  MOVFF  D3,E4
0E68:  RCALL  0828
0E6A:  MOVLW  5A
0E6C:  MOVWF  FF6
0E6E:  MOVLW  01
0E70:  MOVWF  FF7
0E72:  RCALL  08E8
....................    if(x==7) 
0E74:  MOVF   xD2,W
0E76:  SUBLW  07
0E78:  BNZ   0E8E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
0E7A:  MOVLW  02
0E7C:  MOVWF  xE3
0E7E:  MOVFF  D3,E4
0E82:  RCALL  0828
0E84:  MOVLW  6E
0E86:  MOVWF  FF6
0E88:  MOVLW  01
0E8A:  MOVWF  FF7
0E8C:  RCALL  08E8
.................... } 
0E8E:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
07DC:  RLCF   xD6,W
07DE:  MOVWF  00
07E0:  RLCF   00,F
07E2:  MOVLW  FC
07E4:  ANDWF  00,F
07E6:  MOVFF  00,01
07EA:  MOVF   FC2,W
07EC:  ANDLW  C3
07EE:  IORWF  00,W
07F0:  MOVWF  FC2
07F2:  MOVLW  0A
07F4:  MOVWF  xE3
07F6:  RCALL  066E
07F8:  BSF    FC2.1
07FA:  BTFSC  FC2.1
07FC:  BRA    07FA
07FE:  MOVF   FC4,W
0800:  CLRF   xDC
0802:  MOVWF  xDB
0804:  RCALL  07A6
0806:  MOVFF  03,DA
080A:  MOVFF  02,D9
080E:  MOVFF  01,D8
0812:  MOVFF  00,D7
0816:  MOVFF  D7,00
081A:  MOVFF  D8,01
081E:  MOVFF  D9,02
0822:  MOVFF  DA,03
.................... } 
0826:  RETLW  00
....................  
.................... float Leer_Sensor_pH(int media){ 
*
12DC:  CLRF   xD5
12DE:  CLRF   xD4
12E0:  CLRF   xD3
12E2:  CLRF   xD2
....................    float promediopH=0.0; 
....................    V1 = sensores(0);   //Lectura de ADC de 10 bit 
12E4:  CLRF   xD6
12E6:  CALL   07DC
12EA:  MOVFF  03,98
12EE:  MOVFF  02,97
12F2:  MOVFF  01,96
12F6:  MOVFF  00,95
....................    m=(Y1-Y0)/(X1-X0); //Y1=pH ingresado, Y0=pH ingresado, X0=ADC de Y0, X1=ADC de Y1 
12FA:  BSF    FD8.1
12FC:  MOVFF  AC,DD
1300:  MOVFF  AB,DC
1304:  MOVFF  AA,DB
1308:  MOVFF  A9,DA
130C:  MOVFF  A4,E1
1310:  MOVFF  A3,E0
1314:  MOVFF  A2,DF
1318:  MOVFF  A1,DE
131C:  CALL   0A62
1320:  MOVFF  00,D6
1324:  MOVFF  01,D7
1328:  MOVFF  02,D8
132C:  MOVFF  03,D9
1330:  BSF    FD8.1
1332:  MOVFF  A8,DD
1336:  MOVFF  A7,DC
133A:  MOVFF  A6,DB
133E:  MOVFF  A5,DA
1342:  MOVFF  A0,E1
1346:  MOVFF  9F,E0
134A:  MOVFF  9E,DF
134E:  MOVFF  9D,DE
1352:  CALL   0A62
1356:  MOVFF  D9,DD
135A:  MOVFF  D8,DC
135E:  MOVFF  D7,DB
1362:  MOVFF  D6,DA
1366:  MOVFF  03,E1
136A:  MOVFF  02,E0
136E:  MOVFF  01,DF
1372:  MOVFF  00,DE
1376:  CALL   0908
137A:  MOVFF  03,BC
137E:  MOVFF  02,BB
1382:  MOVFF  01,BA
1386:  MOVFF  00,B9
....................    if(negativo==10) 
138A:  MOVF   29,W
138C:  SUBLW  0A
138E:  BNZ   13F8
....................    { 
....................       PH=(m*V1)+b;// PH=mx+b 
1390:  MOVFF  BC,E5
1394:  MOVFF  BB,E4
1398:  MOVFF  BA,E3
139C:  MOVFF  B9,E2
13A0:  MOVFF  98,E9
13A4:  MOVFF  97,E8
13A8:  MOVFF  96,E7
13AC:  MOVFF  95,E6
13B0:  RCALL  0E90
13B2:  MOVFF  00,D6
13B6:  MOVFF  01,D7
13BA:  MOVFF  02,D8
13BE:  MOVFF  03,D9
13C2:  BCF    FD8.1
13C4:  MOVFF  03,DD
13C8:  MOVFF  02,DC
13CC:  MOVFF  01,DB
13D0:  MOVFF  00,DA
13D4:  MOVFF  C0,E1
13D8:  MOVFF  BF,E0
13DC:  MOVFF  BE,DF
13E0:  MOVFF  BD,DE
13E4:  CALL   0A62
13E8:  MOVFF  03,9C
13EC:  MOVFF  02,9B
13F0:  MOVFF  01,9A
13F4:  MOVFF  00,99
....................    } 
....................    if(negativo==20) 
13F8:  MOVF   29,W
13FA:  SUBLW  14
13FC:  BNZ   1466
....................    { 
....................       PH=(m*V1)-b;// PH=mx+b 
13FE:  MOVFF  BC,E5
1402:  MOVFF  BB,E4
1406:  MOVFF  BA,E3
140A:  MOVFF  B9,E2
140E:  MOVFF  98,E9
1412:  MOVFF  97,E8
1416:  MOVFF  96,E7
141A:  MOVFF  95,E6
141E:  RCALL  0E90
1420:  MOVFF  00,D6
1424:  MOVFF  01,D7
1428:  MOVFF  02,D8
142C:  MOVFF  03,D9
1430:  BSF    FD8.1
1432:  MOVFF  03,DD
1436:  MOVFF  02,DC
143A:  MOVFF  01,DB
143E:  MOVFF  00,DA
1442:  MOVFF  C0,E1
1446:  MOVFF  BF,E0
144A:  MOVFF  BE,DF
144E:  MOVFF  BD,DE
1452:  CALL   0A62
1456:  MOVFF  03,9C
145A:  MOVFF  02,9B
145E:  MOVFF  01,9A
1462:  MOVFF  00,99
....................    }   
....................     
....................    if(PH<0.0) 
1466:  MOVFF  9C,D9
146A:  MOVFF  9B,D8
146E:  MOVFF  9A,D7
1472:  MOVFF  99,D6
1476:  CLRF   xDD
1478:  CLRF   xDC
147A:  CLRF   xDB
147C:  CLRF   xDA
147E:  RCALL  11C2
1480:  BNC   148A
....................    { 
....................       PH=0.0; 
1482:  CLRF   x9C
1484:  CLRF   x9B
1486:  CLRF   x9A
1488:  CLRF   x99
....................    } 
....................  
....................    if(r>media-1) 
148A:  MOVLW  01
148C:  SUBWF  xD1,W
148E:  SUBWF  24,W
1490:  BZ    1496
1492:  BNC   1496
....................    {r=0;} 
1494:  CLRF   24
....................    PromPH[r]=PH;r++; 
1496:  MOVF   24,W
1498:  MULLW  04
149A:  MOVF   FF3,W
149C:  CLRF   03
149E:  ADDLW  45
14A0:  MOVWF  FE9
14A2:  MOVLW  00
14A4:  ADDWFC 03,W
14A6:  MOVWF  FEA
14A8:  MOVFF  99,FEF
14AC:  MOVFF  9A,FEC
14B0:  MOVFF  9B,FEC
14B4:  MOVFF  9C,FEC
14B8:  INCF   24,F
....................           
....................    for(q=0;q<=(media-1);q++) 
14BA:  CLRF   25
14BC:  MOVLW  01
14BE:  SUBWF  xD1,W
14C0:  SUBWF  25,W
14C2:  BZ    14C6
14C4:  BC    1532
....................    { 
....................       promediopH+=PromPH[q]; 
14C6:  MOVF   25,W
14C8:  MULLW  04
14CA:  MOVF   FF3,W
14CC:  CLRF   03
14CE:  ADDLW  45
14D0:  MOVWF  FE9
14D2:  MOVLW  00
14D4:  ADDWFC 03,W
14D6:  MOVWF  FEA
14D8:  MOVFF  FEF,00
14DC:  MOVFF  FEC,01
14E0:  MOVFF  FEC,02
14E4:  MOVFF  FEC,03
14E8:  MOVFF  FEA,D7
14EC:  MOVFF  FE9,D6
14F0:  BCF    FD8.1
14F2:  MOVFF  D5,DD
14F6:  MOVFF  D4,DC
14FA:  MOVFF  D3,DB
14FE:  MOVFF  D2,DA
1502:  MOVFF  03,E1
1506:  MOVFF  02,E0
150A:  MOVFF  01,DF
150E:  MOVFF  00,DE
1512:  CALL   0A62
1516:  MOVFF  D7,FEA
151A:  MOVFF  D6,FE9
151E:  MOVFF  03,D5
1522:  MOVFF  02,D4
1526:  MOVFF  01,D3
152A:  MOVFF  00,D2
....................    }  
152E:  INCF   25,F
1530:  BRA    14BC
....................    promediopH=promediopH/media;    
1532:  CLRF   xDC
1534:  MOVFF  D1,DB
1538:  CALL   07A6
153C:  MOVFF  D5,DD
1540:  MOVFF  D4,DC
1544:  MOVFF  D3,DB
1548:  MOVFF  D2,DA
154C:  MOVFF  03,E1
1550:  MOVFF  02,E0
1554:  MOVFF  01,DF
1558:  MOVFF  00,DE
155C:  CALL   0908
1560:  MOVFF  03,D5
1564:  MOVFF  02,D4
1568:  MOVFF  01,D3
156C:  MOVFF  00,D2
....................     
....................    return promediopH; 
1570:  MOVFF  D2,00
1574:  MOVFF  D3,01
1578:  MOVFF  D4,02
157C:  MOVFF  D5,03
.................... } 
1580:  GOTO   4164 (RETURN)
....................  
.................... void Controla(void){ 
....................    sPH=sPpH+Banda; 
1584:  BCF    FD8.1
1586:  MOVFF  B8,DD
158A:  MOVFF  B7,DC
158E:  MOVFF  B6,DB
1592:  MOVFF  B5,DA
1596:  MOVFF  C4,E1
159A:  MOVFF  C3,E0
159E:  MOVFF  C2,DF
15A2:  MOVFF  C1,DE
15A6:  CALL   0A62
15AA:  MOVFF  03,CC
15AE:  MOVFF  02,CB
15B2:  MOVFF  01,CA
15B6:  MOVFF  00,C9
....................    sPL=sPpH-Banda; 
15BA:  BSF    FD8.1
15BC:  MOVFF  B8,DD
15C0:  MOVFF  B7,DC
15C4:  MOVFF  B6,DB
15C8:  MOVFF  B5,DA
15CC:  MOVFF  C4,E1
15D0:  MOVFF  C3,E0
15D4:  MOVFF  C2,DF
15D8:  MOVFF  C1,DE
15DC:  CALL   0A62
15E0:  MOVFF  03,D0
15E4:  MOVFF  02,CF
15E8:  MOVFF  01,CE
15EC:  MOVFF  00,CD
....................    if(pVpH>sPL && pVpH<sPH) 
15F0:  MOVFF  D0,D9
15F4:  MOVFF  CF,D8
15F8:  MOVFF  CE,D7
15FC:  MOVFF  CD,D6
1600:  MOVFF  B4,DD
1604:  MOVFF  B3,DC
1608:  MOVFF  B2,DB
160C:  MOVFF  B1,DA
1610:  RCALL  11C2
1612:  BNC   1640
1614:  MOVFF  B4,D9
1618:  MOVFF  B3,D8
161C:  MOVFF  B2,D7
1620:  MOVFF  B1,D6
1624:  MOVFF  CC,DD
1628:  MOVFF  CB,DC
162C:  MOVFF  CA,DB
1630:  MOVFF  C9,DA
1634:  RCALL  11C2
1636:  BNC   1640
....................    { 
....................       Peristaltica_off; 
1638:  BCF    F8B.1
163A:  BCF    F94.1
....................       estadobp=0; 
163C:  BCF    17.0
....................    } 
....................    else 
163E:  BRA    1680
....................    { 
....................       if(pVpH<sPL) 
1640:  MOVFF  B4,D9
1644:  MOVFF  B3,D8
1648:  MOVFF  B2,D7
164C:  MOVFF  B1,D6
1650:  MOVFF  D0,DD
1654:  MOVFF  CF,DC
1658:  MOVFF  CE,DB
165C:  MOVFF  CD,DA
1660:  RCALL  11C2
1662:  BNC   167A
....................       { 
....................          if(tcontrol<tpulso) 
1664:  MOVF   2C,W
1666:  SUBWF  2B,W
1668:  BC    1672
....................          { 
....................             Peristaltica_on; 
166A:  BSF    F8B.1
166C:  BCF    F94.1
....................             estadobp=1; 
166E:  BSF    17.0
....................          } 
....................          else 
1670:  BRA    1678
....................          { 
....................             Peristaltica_off; 
1672:  BCF    F8B.1
1674:  BCF    F94.1
....................             estadobp=0; 
1676:  BCF    17.0
....................          } 
....................       } 
....................       else 
1678:  BRA    1680
....................       { 
....................          Peristaltica_off; 
167A:  BCF    F8B.1
167C:  BCF    F94.1
....................          estadobp=0; 
167E:  BCF    17.0
....................       } 
....................    } 
.................... } 
1680:  GOTO   417C (RETURN)
....................  
.................... void main () 
.................... { 
1684:  CLRF   FF8
1686:  BCF    FD0.7
1688:  BSF    07.7
168A:  CLRF   FEA
168C:  CLRF   FE9
168E:  BCF    17.0
1690:  BCF    17.1
1692:  BCF    17.2
1694:  BCF    17.3
1696:  BCF    17.4
1698:  BCF    17.5
169A:  BCF    17.6
169C:  BCF    17.7
169E:  CLRF   18
16A0:  MOVLW  08
16A2:  MOVWF  19
16A4:  MOVLW  02
16A6:  MOVWF  1A
16A8:  MOVLW  0B
16AA:  MOVWF  1B
16AC:  MOVLW  02
16AE:  MOVWF  1C
16B0:  MOVLW  03
16B2:  MOVWF  1D
16B4:  MOVLW  02
16B6:  MOVWF  1E
16B8:  MOVWF  1F
16BA:  MOVLW  04
16BC:  MOVWF  20
16BE:  CLRF   21
16C0:  CLRF   22
16C2:  CLRF   23
16C4:  CLRF   24
16C6:  CLRF   25
16C8:  CLRF   26
16CA:  MOVLW  06
16CC:  MOVWF  27
16CE:  MOVLW  01
16D0:  MOVWF  28
16D2:  MOVLW  0A
16D4:  MOVWF  29
16D6:  CLRF   2A
16D8:  CLRF   2B
16DA:  MOVLW  03
16DC:  MOVWF  2C
16DE:  CLRF   2D
16E0:  CLRF   2E
16E2:  CLRF   2F
16E4:  CLRF   30
16E6:  CLRF   31
16E8:  CLRF   32
16EA:  CLRF   33
16EC:  CLRF   34
16EE:  CLRF   35
16F0:  CLRF   36
16F2:  CLRF   37
16F4:  CLRF   x98
16F6:  CLRF   x97
16F8:  CLRF   x96
16FA:  CLRF   x95
16FC:  CLRF   x9C
16FE:  CLRF   x9B
1700:  CLRF   x9A
1702:  CLRF   x99
1704:  CLRF   xA0
1706:  CLRF   x9F
1708:  CLRF   x9E
170A:  CLRF   x9D
170C:  CLRF   xA4
170E:  CLRF   xA3
1710:  CLRF   xA2
1712:  CLRF   xA1
1714:  CLRF   xA8
1716:  CLRF   xA7
1718:  CLRF   xA6
171A:  CLRF   xA5
171C:  CLRF   xAC
171E:  CLRF   xAB
1720:  CLRF   xAA
1722:  CLRF   xA9
1724:  CLRF   xB0
1726:  CLRF   xAF
1728:  CLRF   xAE
172A:  CLRF   xAD
172C:  CLRF   xB4
172E:  CLRF   xB3
1730:  CLRF   xB2
1732:  CLRF   xB1
1734:  CLRF   xB8
1736:  CLRF   xB7
1738:  MOVLW  60
173A:  MOVWF  xB6
173C:  MOVLW  81
173E:  MOVWF  xB5
1740:  CLRF   xBC
1742:  CLRF   xBB
1744:  CLRF   xBA
1746:  CLRF   xB9
1748:  CLRF   xC0
174A:  CLRF   xBF
174C:  CLRF   xBE
174E:  CLRF   xBD
1750:  CLRF   xC4
1752:  CLRF   xC3
1754:  CLRF   xC2
1756:  CLRF   xC1
1758:  CLRF   xC8
175A:  CLRF   xC7
175C:  CLRF   xC6
175E:  CLRF   xC5
1760:  CLRF   xCC
1762:  CLRF   xCB
1764:  CLRF   xCA
1766:  CLRF   xC9
1768:  CLRF   xD0
176A:  CLRF   xCF
176C:  CLRF   xCE
176E:  CLRF   xCD
1770:  MOVF   FC1,W
1772:  ANDLW  C0
1774:  IORLW  0F
1776:  MOVWF  FC1
1778:  MOVLW  07
177A:  MOVWF  FB4
177C:  MOVLW  3E
177E:  MOVWF  38
1780:  MOVLW  20
1782:  MOVWF  39
1784:  MOVLW  5E
1786:  MOVWF  3A
1788:  CLRF   3B
178A:  CLRF   3C
178C:  CLRF   3D
178E:  CLRF   3E
1790:  CLRF   3F
1792:  CLRF   40
1794:  CLRF   41
1796:  CLRF   42
1798:  CLRF   45
179A:  CLRF   46
179C:  CLRF   47
179E:  CLRF   48
17A0:  CLRF   49
17A2:  CLRF   4A
17A4:  CLRF   4B
17A6:  CLRF   4C
17A8:  CLRF   4D
17AA:  CLRF   4E
17AC:  CLRF   4F
17AE:  CLRF   50
17B0:  CLRF   51
17B2:  CLRF   52
17B4:  CLRF   53
17B6:  CLRF   54
17B8:  CLRF   55
17BA:  CLRF   56
17BC:  CLRF   57
17BE:  CLRF   58
17C0:  CLRF   59
17C2:  CLRF   5A
17C4:  CLRF   5B
17C6:  CLRF   5C
17C8:  CLRF   5D
17CA:  CLRF   5E
17CC:  CLRF   5F
17CE:  CLRF   x60
17D0:  CLRF   x61
17D2:  CLRF   x62
17D4:  CLRF   x63
17D6:  CLRF   x64
17D8:  CLRF   x65
17DA:  CLRF   x66
17DC:  CLRF   x67
17DE:  CLRF   x68
17E0:  CLRF   x69
17E2:  CLRF   x6A
17E4:  CLRF   x6B
17E6:  CLRF   x6C
17E8:  CLRF   x6D
17EA:  CLRF   x6E
17EC:  CLRF   x6F
17EE:  CLRF   x70
17F0:  CLRF   x71
17F2:  CLRF   x72
17F4:  CLRF   x73
17F6:  CLRF   x74
17F8:  CLRF   x75
17FA:  CLRF   x76
17FC:  CLRF   x77
17FE:  CLRF   x78
1800:  CLRF   x79
1802:  CLRF   x7A
1804:  CLRF   x7B
1806:  CLRF   x7C
1808:  CLRF   x7D
180A:  CLRF   x7E
180C:  CLRF   x7F
180E:  CLRF   x80
1810:  CLRF   x81
1812:  CLRF   x82
1814:  CLRF   x83
1816:  CLRF   x84
1818:  CLRF   x85
181A:  CLRF   x86
181C:  CLRF   x87
181E:  CLRF   x88
1820:  CLRF   x89
1822:  CLRF   x8A
1824:  CLRF   x8B
1826:  CLRF   x8C
1828:  CLRF   x8D
182A:  CLRF   x8E
182C:  CLRF   x8F
182E:  CLRF   x90
1830:  CLRF   x91
1832:  CLRF   x92
1834:  CLRF   x93
1836:  CLRF   x94
....................    output_d(0); 
1838:  CLRF   F95
183A:  CLRF   F8C
....................    lcd_init(); 
183C:  CALL   0750
....................    enable_interrupts(global); 
1840:  MOVLW  C0
1842:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1844:  MOVLW  85
1846:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1848:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
184A:  MOVF   FC1,W
184C:  ANDLW  C0
184E:  IORLW  0D
1850:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1852:  BCF    FC0.0
1854:  BSF    FC0.1
1856:  BCF    FC0.2
1858:  BCF    FC0.7
185A:  BSF    FC2.0
....................    sensores(0); 
185C:  CLRF   xD6
185E:  CALL   07DC
....................    lcd_gotoxy(1,1); 
1862:  MOVLW  01
1864:  MOVWF  xE3
1866:  MOVWF  xE4
1868:  CALL   0828
....................    printf(lcd_putc,"     SCRUBBER       "); 
186C:  MOVLW  82
186E:  MOVWF  FF6
1870:  MOVLW  01
1872:  MOVWF  FF7
1874:  CALL   08E8
....................    lcd_gotoxy(1,2); 
1878:  MOVLW  01
187A:  MOVWF  xE3
187C:  MOVLW  02
187E:  MOVWF  xE4
1880:  CALL   0828
....................    printf(lcd_putc,"                    "); 
1884:  MOVLW  98
1886:  MOVWF  FF6
1888:  MOVLW  01
188A:  MOVWF  FF7
188C:  CALL   08E8
....................    lcd_gotoxy(1,3); 
1890:  MOVLW  01
1892:  MOVWF  xE3
1894:  MOVLW  03
1896:  MOVWF  xE4
1898:  CALL   0828
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
189C:  MOVLW  AE
189E:  MOVWF  FF6
18A0:  MOVLW  01
18A2:  MOVWF  FF7
18A4:  CALL   08E8
....................    lcd_gotoxy(1,4); 
18A8:  MOVLW  01
18AA:  MOVWF  xE3
18AC:  MOVLW  04
18AE:  MOVWF  xE4
18B0:  CALL   0828
....................    printf(lcd_putc,"   REF: JPSCR-15    "); 
18B4:  MOVLW  C4
18B6:  MOVWF  FF6
18B8:  MOVLW  01
18BA:  MOVWF  FF7
18BC:  CALL   08E8
....................    delay_ms(2000); 
18C0:  MOVLW  08
18C2:  MOVWF  xD1
18C4:  MOVLW  FA
18C6:  MOVWF  xE3
18C8:  CALL   066E
18CC:  DECFSZ xD1,F
18CE:  BRA    18C4
....................    printf(lcd_putc,"\f"); 
18D0:  MOVLW  0C
18D2:  MOVWF  xE2
18D4:  CALL   088A
....................     
....................    if(UP) 
18D8:  BSF    F92.5
18DA:  BTFSS  F80.5
18DC:  BRA    196C
....................    { 
....................       delay_ms(1000); 
18DE:  MOVLW  04
18E0:  MOVWF  xD1
18E2:  MOVLW  FA
18E4:  MOVWF  xE3
18E6:  CALL   066E
18EA:  DECFSZ xD1,F
18EC:  BRA    18E2
....................       if(UP) 
18EE:  BSF    F92.5
18F0:  BTFSS  F80.5
18F2:  BRA    196C
....................       { 
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
18F4:  MOVLW  32
18F6:  MOVWF  FA9
18F8:  CLRF   FA8
18FA:  BCF    FA6.6
18FC:  BCF    FA6.7
18FE:  BSF    FA6.2
1900:  MOVF   FF2,W
1902:  MOVWF  00
1904:  BCF    FF2.7
1906:  MOVLB  F
1908:  MOVLW  55
190A:  MOVWF  FA7
190C:  MOVLW  AA
190E:  MOVWF  FA7
1910:  BSF    FA6.1
1912:  BTFSC  FA6.1
1914:  BRA    1912
1916:  BCF    FA6.2
1918:  MOVF   00,W
191A:  IORWF  FF2,F
191C:  MOVLW  33
191E:  MOVWF  FA9
1920:  CLRF   FA8
1922:  BCF    FA6.6
1924:  BCF    FA6.7
1926:  BSF    FA6.2
1928:  MOVF   FF2,W
192A:  MOVWF  00
192C:  BCF    FF2.7
192E:  MOVLW  55
1930:  MOVWF  FA7
1932:  MOVLW  AA
1934:  MOVWF  FA7
1936:  BSF    FA6.1
1938:  BTFSC  FA6.1
193A:  BRA    1938
193C:  BCF    FA6.2
193E:  MOVF   00,W
1940:  IORWF  FF2,F
1942:  MOVLW  34
1944:  MOVWF  FA9
1946:  CLRF   FA8
1948:  BCF    FA6.6
194A:  BCF    FA6.7
194C:  BSF    FA6.2
194E:  MOVF   FF2,W
1950:  MOVWF  00
1952:  BCF    FF2.7
1954:  MOVLW  55
1956:  MOVWF  FA7
1958:  MOVLW  AA
195A:  MOVWF  FA7
195C:  BSF    FA6.1
195E:  BTFSC  FA6.1
1960:  BRA    195E
1962:  BCF    FA6.2
1964:  MOVF   00,W
1966:  IORWF  FF2,F
....................          reset_cpu(); 
1968:  RESET
196A:  MOVLB  0
....................       } 
....................    } 
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
196C:  MOVFF  FF2,D1
1970:  BCF    FF2.7
1972:  CLRF   FA9
1974:  BCF    FA6.6
1976:  BCF    FA6.7
1978:  BSF    FA6.0
197A:  MOVF   FA8,W
197C:  BTFSC  xD1.7
197E:  BSF    FF2.7
1980:  MOVWF  3F
1982:  MOVLW  14
1984:  MOVWF  xE3
1986:  CALL   066E
198A:  MOVFF  FF2,D1
198E:  BCF    FF2.7
1990:  MOVLW  01
1992:  MOVWF  FA9
1994:  BCF    FA6.6
1996:  BCF    FA6.7
1998:  BSF    FA6.0
199A:  MOVF   FA8,W
199C:  BTFSC  xD1.7
199E:  BSF    FF2.7
19A0:  MOVWF  40
19A2:  MOVLW  14
19A4:  MOVWF  xE3
19A6:  CALL   066E
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
19AA:  MOVFF  FF2,D1
19AE:  BCF    FF2.7
19B0:  MOVLW  02
19B2:  MOVWF  FA9
19B4:  BCF    FA6.6
19B6:  BCF    FA6.7
19B8:  BSF    FA6.0
19BA:  MOVF   FA8,W
19BC:  BTFSC  xD1.7
19BE:  BSF    FF2.7
19C0:  MOVWF  41
19C2:  MOVLW  14
19C4:  MOVWF  xE3
19C6:  CALL   066E
19CA:  MOVFF  FF2,D1
19CE:  BCF    FF2.7
19D0:  MOVLW  03
19D2:  MOVWF  FA9
19D4:  BCF    FA6.6
19D6:  BCF    FA6.7
19D8:  BSF    FA6.0
19DA:  MOVF   FA8,W
19DC:  BTFSC  xD1.7
19DE:  BSF    FF2.7
19E0:  MOVWF  42
19E2:  MOVLW  14
19E4:  MOVWF  xE3
19E6:  CALL   066E
....................    MediaMovil=read_eeprom(5); 
19EA:  MOVFF  FF2,D1
19EE:  BCF    FF2.7
19F0:  MOVLW  05
19F2:  MOVWF  FA9
19F4:  BCF    FA6.6
19F6:  BCF    FA6.7
19F8:  BSF    FA6.0
19FA:  MOVF   FA8,W
19FC:  BTFSC  xD1.7
19FE:  BSF    FF2.7
1A00:  MOVWF  27
....................    BandaInt=read_eeprom(6);BandaDec=read_eeprom(7); 
1A02:  MOVFF  FF2,D1
1A06:  BCF    FF2.7
1A08:  MOVLW  06
1A0A:  MOVWF  FA9
1A0C:  BCF    FA6.6
1A0E:  BCF    FA6.7
1A10:  BSF    FA6.0
1A12:  MOVF   FA8,W
1A14:  BTFSC  xD1.7
1A16:  BSF    FF2.7
1A18:  MOVWF  2D
1A1A:  MOVFF  FF2,D1
1A1E:  BCF    FF2.7
1A20:  MOVLW  07
1A22:  MOVWF  FA9
1A24:  BCF    FA6.6
1A26:  BCF    FA6.7
1A28:  BSF    FA6.0
1A2A:  MOVF   FA8,W
1A2C:  BTFSC  xD1.7
1A2E:  BSF    FF2.7
1A30:  MOVWF  2E
....................    sPpHInt=read_eeprom(8);sPpHDec=read_eeprom(9);  
1A32:  MOVFF  FF2,D1
1A36:  BCF    FF2.7
1A38:  MOVLW  08
1A3A:  MOVWF  FA9
1A3C:  BCF    FA6.6
1A3E:  BCF    FA6.7
1A40:  BSF    FA6.0
1A42:  MOVF   FA8,W
1A44:  BTFSC  xD1.7
1A46:  BSF    FF2.7
1A48:  MOVWF  2F
1A4A:  MOVFF  FF2,D1
1A4E:  BCF    FF2.7
1A50:  MOVLW  09
1A52:  MOVWF  FA9
1A54:  BCF    FA6.6
1A56:  BCF    FA6.7
1A58:  BSF    FA6.0
1A5A:  MOVF   FA8,W
1A5C:  BTFSC  xD1.7
1A5E:  BSF    FF2.7
1A60:  MOVWF  30
....................    bInt=read_eeprom(20);bDec=read_eeprom(21); 
1A62:  MOVFF  FF2,D1
1A66:  BCF    FF2.7
1A68:  MOVLW  14
1A6A:  MOVWF  FA9
1A6C:  BCF    FA6.6
1A6E:  BCF    FA6.7
1A70:  BSF    FA6.0
1A72:  MOVF   FA8,W
1A74:  BTFSC  xD1.7
1A76:  BSF    FF2.7
1A78:  MOVWF  31
1A7A:  MOVFF  FF2,D1
1A7E:  BCF    FF2.7
1A80:  MOVLW  15
1A82:  MOVWF  FA9
1A84:  BCF    FA6.6
1A86:  BCF    FA6.7
1A88:  BSF    FA6.0
1A8A:  MOVF   FA8,W
1A8C:  BTFSC  xD1.7
1A8E:  BSF    FF2.7
1A90:  MOVWF  32
....................    X0=read_eeprom(30);X1=read_eeprom(31); 
1A92:  MOVFF  FF2,D1
1A96:  BCF    FF2.7
1A98:  MOVLW  1E
1A9A:  MOVWF  FA9
1A9C:  BCF    FA6.6
1A9E:  BCF    FA6.7
1AA0:  BSF    FA6.0
1AA2:  MOVF   FA8,W
1AA4:  BTFSC  xD1.7
1AA6:  BSF    FF2.7
1AA8:  CLRF   xDC
1AAA:  MOVWF  xDB
1AAC:  CALL   07A6
1AB0:  MOVFF  03,A0
1AB4:  MOVFF  02,9F
1AB8:  MOVFF  01,9E
1ABC:  MOVFF  00,9D
1AC0:  MOVFF  FF2,D1
1AC4:  BCF    FF2.7
1AC6:  MOVLW  1F
1AC8:  MOVWF  FA9
1ACA:  BCF    FA6.6
1ACC:  BCF    FA6.7
1ACE:  BSF    FA6.0
1AD0:  MOVF   FA8,W
1AD2:  BTFSC  xD1.7
1AD4:  BSF    FF2.7
1AD6:  CLRF   xDC
1AD8:  MOVWF  xDB
1ADA:  CALL   07A6
1ADE:  MOVFF  03,A8
1AE2:  MOVFF  02,A7
1AE6:  MOVFF  01,A6
1AEA:  MOVFF  00,A5
....................    Y0Int=read_eeprom(32);Y0Dec=read_eeprom(33); 
1AEE:  MOVFF  FF2,D1
1AF2:  BCF    FF2.7
1AF4:  MOVLW  20
1AF6:  MOVWF  FA9
1AF8:  BCF    FA6.6
1AFA:  BCF    FA6.7
1AFC:  BSF    FA6.0
1AFE:  MOVF   FA8,W
1B00:  BTFSC  xD1.7
1B02:  BSF    FF2.7
1B04:  MOVWF  33
1B06:  MOVFF  FF2,D1
1B0A:  BCF    FF2.7
1B0C:  MOVLW  21
1B0E:  MOVWF  FA9
1B10:  BCF    FA6.6
1B12:  BCF    FA6.7
1B14:  BSF    FA6.0
1B16:  MOVF   FA8,W
1B18:  BTFSC  xD1.7
1B1A:  BSF    FF2.7
1B1C:  MOVWF  34
....................    Y1Int=read_eeprom(34);Y1Dec=read_eeprom(35); 
1B1E:  MOVFF  FF2,D1
1B22:  BCF    FF2.7
1B24:  MOVLW  22
1B26:  MOVWF  FA9
1B28:  BCF    FA6.6
1B2A:  BCF    FA6.7
1B2C:  BSF    FA6.0
1B2E:  MOVF   FA8,W
1B30:  BTFSC  xD1.7
1B32:  BSF    FF2.7
1B34:  MOVWF  35
1B36:  MOVFF  FF2,D1
1B3A:  BCF    FF2.7
1B3C:  MOVLW  23
1B3E:  MOVWF  FA9
1B40:  BCF    FA6.6
1B42:  BCF    FA6.7
1B44:  BSF    FA6.0
1B46:  MOVF   FA8,W
1B48:  BTFSC  xD1.7
1B4A:  BSF    FF2.7
1B4C:  MOVWF  36
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
1B4E:  MOVFF  FF2,D1
1B52:  BCF    FF2.7
1B54:  MOVLW  32
1B56:  MOVWF  FA9
1B58:  BCF    FA6.6
1B5A:  BCF    FA6.7
1B5C:  BSF    FA6.0
1B5E:  MOVF   FA8,W
1B60:  BTFSC  xD1.7
1B62:  BSF    FF2.7
1B64:  MOVWF  21
1B66:  MOVFF  FF2,D1
1B6A:  BCF    FF2.7
1B6C:  MOVLW  33
1B6E:  MOVWF  FA9
1B70:  BCF    FA6.6
1B72:  BCF    FA6.7
1B74:  BSF    FA6.0
1B76:  MOVF   FA8,W
1B78:  BTFSC  xD1.7
1B7A:  BSF    FF2.7
1B7C:  MOVWF  22
1B7E:  MOVFF  FF2,D1
1B82:  BCF    FF2.7
1B84:  MOVLW  34
1B86:  MOVWF  FA9
1B88:  BCF    FA6.6
1B8A:  BCF    FA6.7
1B8C:  BSF    FA6.0
1B8E:  MOVF   FA8,W
1B90:  BTFSC  xD1.7
1B92:  BSF    FF2.7
1B94:  MOVWF  23
....................    negativo=read_eeprom(60); 
1B96:  MOVFF  FF2,D1
1B9A:  BCF    FF2.7
1B9C:  MOVLW  3C
1B9E:  MOVWF  FA9
1BA0:  BCF    FA6.6
1BA2:  BCF    FA6.7
1BA4:  BSF    FA6.0
1BA6:  MOVF   FA8,W
1BA8:  BTFSC  xD1.7
1BAA:  BSF    FF2.7
1BAC:  MOVWF  29
....................    tpulso=read_eeprom(70); 
1BAE:  MOVFF  FF2,D1
1BB2:  BCF    FF2.7
1BB4:  MOVLW  46
1BB6:  MOVWF  FA9
1BB8:  BCF    FA6.6
1BBA:  BCF    FA6.7
1BBC:  BSF    FA6.0
1BBE:  MOVF   FA8,W
1BC0:  BTFSC  xD1.7
1BC2:  BSF    FF2.7
1BC4:  MOVWF  2C
....................     
....................    tmp=Y0Dec/10.0; 
1BC6:  CLRF   xDC
1BC8:  MOVFF  34,DB
1BCC:  CALL   07A6
1BD0:  MOVFF  03,DD
1BD4:  MOVFF  02,DC
1BD8:  MOVFF  01,DB
1BDC:  MOVFF  00,DA
1BE0:  CLRF   xE1
1BE2:  CLRF   xE0
1BE4:  MOVLW  20
1BE6:  MOVWF  xDF
1BE8:  MOVLW  82
1BEA:  MOVWF  xDE
1BEC:  CALL   0908
1BF0:  MOVFF  03,C8
1BF4:  MOVFF  02,C7
1BF8:  MOVFF  01,C6
1BFC:  MOVFF  00,C5
....................    Y0=Y0Int+tmp; 
1C00:  CLRF   xDC
1C02:  MOVFF  33,DB
1C06:  CALL   07A6
1C0A:  BCF    FD8.1
1C0C:  MOVFF  03,DD
1C10:  MOVFF  02,DC
1C14:  MOVFF  01,DB
1C18:  MOVFF  00,DA
1C1C:  MOVFF  C8,E1
1C20:  MOVFF  C7,E0
1C24:  MOVFF  C6,DF
1C28:  MOVFF  C5,DE
1C2C:  CALL   0A62
1C30:  MOVFF  03,A4
1C34:  MOVFF  02,A3
1C38:  MOVFF  01,A2
1C3C:  MOVFF  00,A1
....................     
....................    tmp=Y1Dec/10.0; 
1C40:  CLRF   xDC
1C42:  MOVFF  36,DB
1C46:  CALL   07A6
1C4A:  MOVFF  03,DD
1C4E:  MOVFF  02,DC
1C52:  MOVFF  01,DB
1C56:  MOVFF  00,DA
1C5A:  CLRF   xE1
1C5C:  CLRF   xE0
1C5E:  MOVLW  20
1C60:  MOVWF  xDF
1C62:  MOVLW  82
1C64:  MOVWF  xDE
1C66:  CALL   0908
1C6A:  MOVFF  03,C8
1C6E:  MOVFF  02,C7
1C72:  MOVFF  01,C6
1C76:  MOVFF  00,C5
....................    Y1=Y1Int+tmp; 
1C7A:  CLRF   xDC
1C7C:  MOVFF  35,DB
1C80:  CALL   07A6
1C84:  BCF    FD8.1
1C86:  MOVFF  03,DD
1C8A:  MOVFF  02,DC
1C8E:  MOVFF  01,DB
1C92:  MOVFF  00,DA
1C96:  MOVFF  C8,E1
1C9A:  MOVFF  C7,E0
1C9E:  MOVFF  C6,DF
1CA2:  MOVFF  C5,DE
1CA6:  CALL   0A62
1CAA:  MOVFF  03,AC
1CAE:  MOVFF  02,AB
1CB2:  MOVFF  01,AA
1CB6:  MOVFF  00,A9
....................     
....................    tmp=bDec/100.0; 
1CBA:  CLRF   xDC
1CBC:  MOVFF  32,DB
1CC0:  CALL   07A6
1CC4:  MOVFF  03,DD
1CC8:  MOVFF  02,DC
1CCC:  MOVFF  01,DB
1CD0:  MOVFF  00,DA
1CD4:  CLRF   xE1
1CD6:  CLRF   xE0
1CD8:  MOVLW  48
1CDA:  MOVWF  xDF
1CDC:  MOVLW  85
1CDE:  MOVWF  xDE
1CE0:  CALL   0908
1CE4:  MOVFF  03,C8
1CE8:  MOVFF  02,C7
1CEC:  MOVFF  01,C6
1CF0:  MOVFF  00,C5
....................    b=bInt+tmp; 
1CF4:  CLRF   xDC
1CF6:  MOVFF  31,DB
1CFA:  CALL   07A6
1CFE:  BCF    FD8.1
1D00:  MOVFF  03,DD
1D04:  MOVFF  02,DC
1D08:  MOVFF  01,DB
1D0C:  MOVFF  00,DA
1D10:  MOVFF  C8,E1
1D14:  MOVFF  C7,E0
1D18:  MOVFF  C6,DF
1D1C:  MOVFF  C5,DE
1D20:  CALL   0A62
1D24:  MOVFF  03,C0
1D28:  MOVFF  02,BF
1D2C:  MOVFF  01,BE
1D30:  MOVFF  00,BD
....................     
....................    tmp=sPpHDec/10.0; 
1D34:  CLRF   xDC
1D36:  MOVFF  30,DB
1D3A:  CALL   07A6
1D3E:  MOVFF  03,DD
1D42:  MOVFF  02,DC
1D46:  MOVFF  01,DB
1D4A:  MOVFF  00,DA
1D4E:  CLRF   xE1
1D50:  CLRF   xE0
1D52:  MOVLW  20
1D54:  MOVWF  xDF
1D56:  MOVLW  82
1D58:  MOVWF  xDE
1D5A:  CALL   0908
1D5E:  MOVFF  03,C8
1D62:  MOVFF  02,C7
1D66:  MOVFF  01,C6
1D6A:  MOVFF  00,C5
....................    sPpH=sPpHInt+tmp; 
1D6E:  CLRF   xDC
1D70:  MOVFF  2F,DB
1D74:  CALL   07A6
1D78:  BCF    FD8.1
1D7A:  MOVFF  03,DD
1D7E:  MOVFF  02,DC
1D82:  MOVFF  01,DB
1D86:  MOVFF  00,DA
1D8A:  MOVFF  C8,E1
1D8E:  MOVFF  C7,E0
1D92:  MOVFF  C6,DF
1D96:  MOVFF  C5,DE
1D9A:  CALL   0A62
1D9E:  MOVFF  03,B8
1DA2:  MOVFF  02,B7
1DA6:  MOVFF  01,B6
1DAA:  MOVFF  00,B5
....................     
....................    tmp=BandaDec/10.0; 
1DAE:  CLRF   xDC
1DB0:  MOVFF  2E,DB
1DB4:  CALL   07A6
1DB8:  MOVFF  03,DD
1DBC:  MOVFF  02,DC
1DC0:  MOVFF  01,DB
1DC4:  MOVFF  00,DA
1DC8:  CLRF   xE1
1DCA:  CLRF   xE0
1DCC:  MOVLW  20
1DCE:  MOVWF  xDF
1DD0:  MOVLW  82
1DD2:  MOVWF  xDE
1DD4:  CALL   0908
1DD8:  MOVFF  03,C8
1DDC:  MOVFF  02,C7
1DE0:  MOVFF  01,C6
1DE4:  MOVFF  00,C5
....................    Banda=BandaInt+tmp; 
1DE8:  CLRF   xDC
1DEA:  MOVFF  2D,DB
1DEE:  CALL   07A6
1DF2:  BCF    FD8.1
1DF4:  MOVFF  03,DD
1DF8:  MOVFF  02,DC
1DFC:  MOVFF  01,DB
1E00:  MOVFF  00,DA
1E04:  MOVFF  C8,E1
1E08:  MOVFF  C7,E0
1E0C:  MOVFF  C6,DF
1E10:  MOVFF  C5,DE
1E14:  CALL   0A62
1E18:  MOVFF  03,C4
1E1C:  MOVFF  02,C3
1E20:  MOVFF  01,C2
1E24:  MOVFF  00,C1
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1E28:  MOVF   18,F
1E2A:  BTFSS  FD8.2
1E2C:  BRA    21D6
....................    lcd_gotoxy(1,1); 
1E2E:  MOVLW  01
1E30:  MOVWF  xE3
1E32:  MOVWF  xE4
1E34:  CALL   0828
....................    printf(lcd_putc,"     Ingrese        "); 
1E38:  MOVLW  DA
1E3A:  MOVWF  FF6
1E3C:  MOVLW  01
1E3E:  MOVWF  FF7
1E40:  CALL   08E8
....................    lcd_gotoxy(1,2); 
1E44:  MOVLW  01
1E46:  MOVWF  xE3
1E48:  MOVLW  02
1E4A:  MOVWF  xE4
1E4C:  CALL   0828
....................    printf(lcd_putc,"    Contraseña      "); 
1E50:  MOVLW  F0
1E52:  MOVWF  FF6
1E54:  MOVLW  01
1E56:  MOVWF  FF7
1E58:  CALL   08E8
....................    lcd_gotoxy(1,3); 
1E5C:  MOVLW  01
1E5E:  MOVWF  xE3
1E60:  MOVLW  03
1E62:  MOVWF  xE4
1E64:  CALL   0828
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1E68:  MOVLW  06
1E6A:  MOVWF  FF6
1E6C:  MOVLW  02
1E6E:  MOVWF  FF7
1E70:  MOVLW  0A
1E72:  MOVWF  xD5
1E74:  CALL   0CCC
1E78:  MOVFF  3B,D1
1E7C:  MOVLW  1F
1E7E:  MOVWF  xD2
1E80:  CALL   0D12
1E84:  MOVFF  3C,D1
1E88:  MOVLW  1F
1E8A:  MOVWF  xD2
1E8C:  CALL   0D12
1E90:  MOVFF  3D,D1
1E94:  MOVLW  1F
1E96:  MOVWF  xD2
1E98:  CALL   0D12
1E9C:  MOVFF  3E,D1
1EA0:  MOVLW  1F
1EA2:  MOVWF  xD2
1EA4:  CALL   0D12
1EA8:  MOVLW  20
1EAA:  MOVWF  xE2
1EAC:  CALL   088A
1EB0:  MOVLW  20
1EB2:  MOVWF  xE2
1EB4:  CALL   088A
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
1EB8:  BSF    F92.5
1EBA:  BTFSS  F80.5
1EBC:  BRA    1EE0
....................       { 
....................          if(Flanco == 0) 
1EBE:  BTFSC  17.2
1EC0:  BRA    1EDE
....................          { 
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
1EC2:  MOVLW  0B
1EC4:  SUBWF  1B,W
1EC6:  CLRF   03
1EC8:  ADDLW  3B
1ECA:  MOVWF  FE9
1ECC:  MOVLW  00
1ECE:  ADDWFC 03,W
1ED0:  MOVWF  FEA
1ED2:  INCF   FEF,F
1ED4:  BSF    17.2
1ED6:  MOVLW  1E
1ED8:  MOVWF  xE3
1EDA:  CALL   066E
....................          } 
....................       } 
....................       else 
1EDE:  BRA    1EE2
....................       { 
....................          Flanco = 0; 
1EE0:  BCF    17.2
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1EE2:  BSF    F96.0
1EE4:  BTFSS  F84.0
1EE6:  BRA    1F0A
....................       { 
....................          if(Flanco2 == 0) 
1EE8:  BTFSC  17.4
1EEA:  BRA    1F08
....................          { 
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
1EEC:  MOVLW  0B
1EEE:  SUBWF  1B,W
1EF0:  CLRF   03
1EF2:  ADDLW  3B
1EF4:  MOVWF  FE9
1EF6:  MOVLW  00
1EF8:  ADDWFC 03,W
1EFA:  MOVWF  FEA
1EFC:  DECF   FEF,F
1EFE:  BSF    17.4
1F00:  MOVLW  1E
1F02:  MOVWF  xE3
1F04:  CALL   066E
....................          } 
....................       } 
....................       else 
1F08:  BRA    1F0C
....................       { 
....................          Flanco2 = 0; 
1F0A:  BCF    17.4
....................       } 
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1F0C:  BSF    F96.1
1F0E:  BTFSS  F84.1
1F10:  BRA    1F2C
....................       { 
....................          if(Flanco1 == 0) 
1F12:  BTFSC  17.3
1F14:  BRA    1F2A
....................          { 
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
1F16:  BSF    17.3
1F18:  INCF   1B,F
1F1A:  MOVLW  1E
1F1C:  MOVWF  xE3
1F1E:  CALL   066E
1F22:  MOVLW  0C
1F24:  MOVWF  xE2
1F26:  CALL   088A
....................          } 
....................       } 
....................       else 
1F2A:  BRA    1F2E
....................       { 
....................          Flanco1 = 0; 
1F2C:  BCF    17.3
....................       } 
....................              
....................       if(LEFT)// Si Oprime izquierda 
1F2E:  BSF    F96.2
1F30:  BTFSS  F84.2
1F32:  BRA    1F4E
....................       { 
....................          if(Flanco3 == 0) 
1F34:  BTFSC  17.5
1F36:  BRA    1F4C
....................          { 
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
1F38:  BSF    17.5
1F3A:  DECF   1B,F
1F3C:  MOVLW  1E
1F3E:  MOVWF  xE3
1F40:  CALL   066E
1F44:  MOVLW  0C
1F46:  MOVWF  xE2
1F48:  CALL   088A
....................          } 
....................       } 
....................       else 
1F4C:  BRA    1F50
....................       { 
....................          Flanco3 = 0; 
1F4E:  BCF    17.5
....................       } 
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1F50:  MOVLW  0B
1F52:  SUBWF  1B,W
1F54:  CLRF   03
1F56:  ADDLW  3B
1F58:  MOVWF  FE9
1F5A:  MOVLW  00
1F5C:  ADDWFC 03,W
1F5E:  MOVWF  FEA
1F60:  BTFSC  FEF.7
1F62:  BRA    1F66
1F64:  BRA    1F7A
....................        {clave[unidad-11]=9;} 
1F66:  MOVLW  0B
1F68:  SUBWF  1B,W
1F6A:  CLRF   03
1F6C:  ADDLW  3B
1F6E:  MOVWF  FE9
1F70:  MOVLW  00
1F72:  ADDWFC 03,W
1F74:  MOVWF  FEA
1F76:  MOVLW  09
1F78:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1F7A:  MOVLW  0B
1F7C:  SUBWF  1B,W
1F7E:  CLRF   03
1F80:  ADDLW  3B
1F82:  MOVWF  FE9
1F84:  MOVLW  00
1F86:  ADDWFC 03,W
1F88:  MOVWF  FEA
1F8A:  BTFSC  FEF.7
1F8C:  BRA    1FA6
1F8E:  MOVF   FEF,W
1F90:  SUBLW  09
1F92:  BC    1FA6
....................        {clave[unidad-11]=0;} 
1F94:  MOVLW  0B
1F96:  SUBWF  1B,W
1F98:  CLRF   03
1F9A:  ADDLW  3B
1F9C:  MOVWF  FE9
1F9E:  MOVLW  00
1FA0:  ADDWFC 03,W
1FA2:  MOVWF  FEA
1FA4:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1FA6:  MOVF   1B,W
1FA8:  SUBLW  0A
1FAA:  BNC   1FB0
....................        {unidad=11;} 
1FAC:  MOVLW  0B
1FAE:  MOVWF  1B
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1FB0:  MOVFF  1B,E3
1FB4:  MOVLW  04
1FB6:  MOVWF  xE4
1FB8:  CALL   0828
....................        lcd_putc(t[2]); 
1FBC:  MOVFF  3A,E2
1FC0:  CALL   088A
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1FC4:  MOVF   1B,W
1FC6:  SUBLW  0E
1FC8:  BTFSC  FD8.0
1FCA:  BRA    21B2
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1FCC:  MOVF   3B,W
1FCE:  SUBLW  03
1FD0:  BNZ   20AC
1FD2:  MOVF   3C,W
1FD4:  SUBLW  08
1FD6:  BNZ   20AC
1FD8:  MOVF   3D,W
1FDA:  SUBLW  09
1FDC:  BNZ   20AC
1FDE:  MOVF   3E,W
1FE0:  SUBLW  02
1FE2:  BNZ   20AC
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1FE4:  CLRF   FA9
1FE6:  CLRF   FA8
1FE8:  BCF    FA6.6
1FEA:  BCF    FA6.7
1FEC:  BSF    FA6.2
1FEE:  MOVF   FF2,W
1FF0:  MOVWF  00
1FF2:  BCF    FF2.7
1FF4:  MOVLB  F
1FF6:  MOVLW  55
1FF8:  MOVWF  FA7
1FFA:  MOVLW  AA
1FFC:  MOVWF  FA7
1FFE:  BSF    FA6.1
2000:  BTFSC  FA6.1
2002:  BRA    2000
2004:  BCF    FA6.2
2006:  MOVF   00,W
2008:  IORWF  FF2,F
200A:  MOVLW  14
200C:  MOVLB  0
200E:  MOVWF  xE3
2010:  CALL   066E
2014:  MOVLW  01
2016:  MOVWF  FA9
2018:  CLRF   FA8
201A:  BCF    FA6.6
201C:  BCF    FA6.7
201E:  BSF    FA6.2
2020:  MOVF   FF2,W
2022:  MOVWF  00
2024:  BCF    FF2.7
2026:  MOVLB  F
2028:  MOVLW  55
202A:  MOVWF  FA7
202C:  MOVLW  AA
202E:  MOVWF  FA7
2030:  BSF    FA6.1
2032:  BTFSC  FA6.1
2034:  BRA    2032
2036:  BCF    FA6.2
2038:  MOVF   00,W
203A:  IORWF  FF2,F
203C:  MOVLW  14
203E:  MOVLB  0
2040:  MOVWF  xE3
2042:  CALL   066E
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2046:  MOVLW  02
2048:  MOVWF  FA9
204A:  CLRF   FA8
204C:  BCF    FA6.6
204E:  BCF    FA6.7
2050:  BSF    FA6.2
2052:  MOVF   FF2,W
2054:  MOVWF  00
2056:  BCF    FF2.7
2058:  MOVLB  F
205A:  MOVLW  55
205C:  MOVWF  FA7
205E:  MOVLW  AA
2060:  MOVWF  FA7
2062:  BSF    FA6.1
2064:  BTFSC  FA6.1
2066:  BRA    2064
2068:  BCF    FA6.2
206A:  MOVF   00,W
206C:  IORWF  FF2,F
206E:  MOVLW  14
2070:  MOVLB  0
2072:  MOVWF  xE3
2074:  CALL   066E
2078:  MOVLW  03
207A:  MOVWF  FA9
207C:  CLRF   FA8
207E:  BCF    FA6.6
2080:  BCF    FA6.7
2082:  BSF    FA6.2
2084:  MOVF   FF2,W
2086:  MOVWF  00
2088:  BCF    FF2.7
208A:  MOVLB  F
208C:  MOVLW  55
208E:  MOVWF  FA7
2090:  MOVLW  AA
2092:  MOVWF  FA7
2094:  BSF    FA6.1
2096:  BTFSC  FA6.1
2098:  BRA    2096
209A:  BCF    FA6.2
209C:  MOVF   00,W
209E:  IORWF  FF2,F
20A0:  MOVLW  14
20A2:  MOVLB  0
20A4:  MOVWF  xE3
20A6:  CALL   066E
....................              reset_cpu();} 
20AA:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
20AC:  MOVF   3F,W
20AE:  SUBWF  3B,W
20B0:  BNZ   2144
20B2:  MOVF   40,W
20B4:  SUBWF  3C,W
20B6:  BNZ   2144
20B8:  MOVF   41,W
20BA:  SUBWF  3D,W
20BC:  BNZ   2144
20BE:  MOVF   42,W
20C0:  SUBWF  3E,W
20C2:  BNZ   2144
....................             {lcd_gotoxy(1,1); 
20C4:  MOVLW  01
20C6:  MOVWF  xE3
20C8:  MOVWF  xE4
20CA:  CALL   0828
....................             printf(lcd_putc,"                   "); 
20CE:  MOVLW  1C
20D0:  MOVWF  FF6
20D2:  MOVLW  02
20D4:  MOVWF  FF7
20D6:  CALL   08E8
....................             lcd_gotoxy(1,2); 
20DA:  MOVLW  01
20DC:  MOVWF  xE3
20DE:  MOVLW  02
20E0:  MOVWF  xE4
20E2:  CALL   0828
....................             printf(lcd_putc,"     Contraseña    "); 
20E6:  MOVLW  30
20E8:  MOVWF  FF6
20EA:  MOVLW  02
20EC:  MOVWF  FF7
20EE:  CALL   08E8
....................             lcd_gotoxy(1,3); 
20F2:  MOVLW  01
20F4:  MOVWF  xE3
20F6:  MOVLW  03
20F8:  MOVWF  xE4
20FA:  CALL   0828
....................             printf(lcd_putc,"      Correcta     "); 
20FE:  MOVLW  44
2100:  MOVWF  FF6
2102:  MOVLW  02
2104:  MOVWF  FF7
2106:  CALL   08E8
....................             lcd_gotoxy(1,4); 
210A:  MOVLW  01
210C:  MOVWF  xE3
210E:  MOVLW  04
2110:  MOVWF  xE4
2112:  CALL   0828
....................             printf(lcd_putc,"                   "); 
2116:  MOVLW  58
2118:  MOVWF  FF6
211A:  MOVLW  02
211C:  MOVWF  FF7
211E:  CALL   08E8
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
2122:  MOVLW  04
2124:  MOVWF  xD1
2126:  MOVLW  FA
2128:  MOVWF  xE3
212A:  CALL   066E
212E:  DECFSZ xD1,F
2130:  BRA    2126
2132:  MOVLW  64
2134:  MOVWF  18
2136:  MOVLW  0B
2138:  MOVWF  1B
213A:  MOVLW  0C
213C:  MOVWF  xE2
213E:  CALL   088A
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2142:  BRA    21B2
....................          {lcd_gotoxy(1,1); 
2144:  MOVLW  01
2146:  MOVWF  xE3
2148:  MOVWF  xE4
214A:  CALL   0828
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
214E:  MOVLW  01
2150:  MOVWF  xE3
2152:  MOVLW  02
2154:  MOVWF  xE4
2156:  CALL   0828
....................             printf(lcd_putc,"     Contraseña    "); 
215A:  MOVLW  6C
215C:  MOVWF  FF6
215E:  MOVLW  02
2160:  MOVWF  FF7
2162:  CALL   08E8
....................             lcd_gotoxy(1,3); 
2166:  MOVLW  01
2168:  MOVWF  xE3
216A:  MOVLW  03
216C:  MOVWF  xE4
216E:  CALL   0828
....................             printf(lcd_putc,"     Incorrecta    "); 
2172:  MOVLW  80
2174:  MOVWF  FF6
2176:  MOVLW  02
2178:  MOVWF  FF7
217A:  CALL   08E8
....................             lcd_gotoxy(1,4); 
217E:  MOVLW  01
2180:  MOVWF  xE3
2182:  MOVLW  04
2184:  MOVWF  xE4
2186:  CALL   0828
....................             printf(lcd_putc,"                   "); 
218A:  MOVLW  94
218C:  MOVWF  FF6
218E:  MOVLW  02
2190:  MOVWF  FF7
2192:  CALL   08E8
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
2196:  MOVLW  04
2198:  MOVWF  xD1
219A:  MOVLW  FA
219C:  MOVWF  xE3
219E:  CALL   066E
21A2:  DECFSZ xD1,F
21A4:  BRA    219A
21A6:  MOVLW  0B
21A8:  MOVWF  1B
21AA:  MOVLW  0C
21AC:  MOVWF  xE2
21AE:  CALL   088A
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
21B2:  MOVF   1B,W
21B4:  SUBLW  0B
21B6:  BC    21D6
21B8:  MOVF   1B,W
21BA:  SUBLW  0D
21BC:  BNC   21D6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
21BE:  MOVLW  01
21C0:  SUBWF  1B,W
21C2:  MOVWF  xD1
21C4:  MOVWF  xE3
21C6:  MOVLW  04
21C8:  MOVWF  xE4
21CA:  CALL   0828
....................             lcd_putc(t[1]); 
21CE:  MOVFF  39,E2
21D2:  CALL   088A
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
21D6:  DECFSZ 18,W
21D8:  BRA    23CA
....................    lcd_gotoxy(1,1); 
21DA:  MOVLW  01
21DC:  MOVWF  xE3
21DE:  MOVWF  xE4
21E0:  CALL   0828
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
21E4:  MOVLW  A8
21E6:  MOVWF  FF6
21E8:  MOVLW  02
21EA:  MOVWF  FF7
21EC:  CALL   08E8
....................       if(paso<0) 
21F0:  BTFSC  37.7
21F2:  BRA    21F6
21F4:  BRA    21F8
....................         {paso=0;} 
21F6:  CLRF   37
....................          
....................       if(UP)//Si oprime hacia arriba 
21F8:  BSF    F92.5
21FA:  BTFSS  F80.5
21FC:  BRA    2218
....................       { 
....................          if(Flanco == 0) 
21FE:  BTFSC  17.2
2200:  BRA    2216
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2202:  DECF   1E,F
2204:  DECF   1C,F
2206:  MOVLW  01
2208:  ADDWF  1C,W
220A:  MOVWF  1D
220C:  BSF    17.2
220E:  MOVLW  1E
2210:  MOVWF  xE3
2212:  CALL   066E
....................          } 
....................       } 
....................       else 
2216:  BRA    221A
....................       { 
....................          Flanco = 0; 
2218:  BCF    17.2
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
221A:  BSF    F96.0
221C:  BTFSS  F84.0
221E:  BRA    223A
....................       { 
....................          if(Flanco2 == 0) 
2220:  BTFSC  17.4
2222:  BRA    2238
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
2224:  INCF   1E,F
2226:  INCF   1C,F
2228:  MOVLW  01
222A:  SUBWF  1C,W
222C:  MOVWF  1D
222E:  BSF    17.4
2230:  MOVLW  1E
2232:  MOVWF  xE3
2234:  CALL   066E
....................          } 
....................       } 
....................       else 
2238:  BRA    223C
....................       { 
....................          Flanco2 = 0; 
223A:  BCF    17.4
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
223C:  MOVF   1E,W
223E:  SUBWF  20,W
2240:  BC    2252
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2242:  INCF   37,F
2244:  MOVFF  1E,20
2248:  MOVLW  02
224A:  SUBWF  20,W
224C:  MOVWF  1F
224E:  MOVLW  04
2250:  MOVWF  1C
....................          
....................         if(Flecha2<nMenuL) 
2252:  MOVF   1F,W
2254:  SUBWF  1E,W
2256:  BC    2268
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2258:  DECF   37,F
225A:  MOVFF  1E,1F
225E:  MOVLW  02
2260:  ADDWF  1F,W
2262:  MOVWF  20
2264:  MOVLW  02
2266:  MOVWF  1C
....................          
....................         if(Flecha2>n_opcionH) 
2268:  MOVF   1E,W
226A:  SUBWF  19,W
226C:  BC    2280
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
226E:  MOVFF  1A,1E
2272:  MOVLW  02
2274:  MOVWF  1C
2276:  CLRF   37
2278:  MOVFF  1E,1F
227C:  ADDWF  1F,W
227E:  MOVWF  20
....................          
....................         if(Flecha2<n_opcionL) 
2280:  MOVF   1A,W
2282:  SUBWF  1E,W
2284:  BC    229C
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
2286:  MOVFF  19,1E
228A:  MOVLW  04
228C:  MOVWF  1C
228E:  SUBWF  19,W
2290:  MOVWF  37
2292:  MOVFF  1E,20
2296:  MOVLW  02
2298:  SUBWF  20,W
229A:  MOVWF  1F
....................          
....................         mensajes(1+paso,2); 
229C:  MOVLW  01
229E:  ADDWF  37,W
22A0:  MOVWF  xD1
22A2:  MOVWF  xD2
22A4:  MOVLW  02
22A6:  MOVWF  xD3
22A8:  CALL   0DDA
....................         mensajes(2+paso,3); 
22AC:  MOVLW  02
22AE:  ADDWF  37,W
22B0:  MOVWF  xD1
22B2:  MOVWF  xD2
22B4:  MOVLW  03
22B6:  MOVWF  xD3
22B8:  CALL   0DDA
....................         mensajes(3+paso,4); 
22BC:  MOVLW  03
22BE:  ADDWF  37,W
22C0:  MOVWF  xD1
22C2:  MOVWF  xD2
22C4:  MOVLW  04
22C6:  MOVWF  xD3
22C8:  CALL   0DDA
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
22CC:  MOVLW  01
22CE:  MOVWF  xE3
22D0:  MOVFF  1C,E4
22D4:  CALL   0828
....................         lcd_putc(t[0]); 
22D8:  MOVFF  38,E2
22DC:  CALL   088A
....................  
....................         if(Flecha==2) 
22E0:  MOVF   1C,W
22E2:  SUBLW  02
22E4:  BNZ   230E
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
22E6:  MOVLW  01
22E8:  MOVWF  xE3
22EA:  MOVLW  04
22EC:  MOVWF  xE4
22EE:  CALL   0828
....................             lcd_putc(t[1]); 
22F2:  MOVFF  39,E2
22F6:  CALL   088A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
22FA:  MOVLW  01
22FC:  MOVWF  xE3
22FE:  MOVLW  03
2300:  MOVWF  xE4
2302:  CALL   0828
....................             lcd_putc(t[1]); 
2306:  MOVFF  39,E2
230A:  CALL   088A
....................           } 
....................          
....................         if(Flecha==4) 
230E:  MOVF   1C,W
2310:  SUBLW  04
2312:  BNZ   233C
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2314:  MOVLW  01
2316:  MOVWF  xE3
2318:  MOVLW  02
231A:  MOVWF  xE4
231C:  CALL   0828
....................             lcd_putc(t[1]); 
2320:  MOVFF  39,E2
2324:  CALL   088A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2328:  MOVLW  01
232A:  MOVWF  xE3
232C:  MOVLW  03
232E:  MOVWF  xE4
2330:  CALL   0828
....................             lcd_putc(t[1]); 
2334:  MOVFF  39,E2
2338:  CALL   088A
....................           } 
....................          
....................         if(Flecha==3) 
233C:  MOVF   1C,W
233E:  SUBLW  03
2340:  BNZ   236A
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2342:  MOVLW  01
2344:  MOVWF  xE3
2346:  MOVLW  04
2348:  MOVWF  xE4
234A:  CALL   0828
....................             lcd_putc(t[1]); 
234E:  MOVFF  39,E2
2352:  CALL   088A
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2356:  MOVLW  01
2358:  MOVWF  xE3
235A:  MOVLW  02
235C:  MOVWF  xE4
235E:  CALL   0828
....................             lcd_putc(t[1]); 
2362:  MOVFF  39,E2
2366:  CALL   088A
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
236A:  BSF    F96.1
236C:  BTFSS  F84.1
236E:  BRA    23A6
....................        { 
....................          if(Flanco1 == 0) 
2370:  BTFSC  17.3
2372:  BRA    23A4
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2374:  BSF    17.3
2376:  MOVFF  1E,18
237A:  MOVLW  03
237C:  MOVWF  1C
237E:  MOVLW  02
2380:  MOVWF  xD1
2382:  MOVLW  96
2384:  MOVWF  xE3
2386:  CALL   066E
238A:  DECFSZ xD1,F
238C:  BRA    2382
238E:  MOVLW  0C
2390:  MOVWF  xE2
2392:  CALL   088A
....................             if(Menu==6) 
2396:  MOVF   18,W
2398:  SUBLW  06
239A:  BNZ   23A4
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
239C:  CLRF   3B
239E:  CLRF   3C
23A0:  CLRF   3D
23A2:  CLRF   3E
....................             } 
....................          } 
....................        } 
....................        else 
23A4:  BRA    23A8
....................        { 
....................          Flanco1 = 0; 
23A6:  BCF    17.3
....................        } 
....................              
....................        if(LEFT) 
23A8:  BSF    F96.2
23AA:  BTFSS  F84.2
23AC:  BRA    23CA
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
23AE:  MOVLW  64
23B0:  MOVWF  18
23B2:  MOVLW  0C
23B4:  MOVWF  xE2
23B6:  CALL   088A
23BA:  MOVLW  02
23BC:  MOVWF  xD1
23BE:  MOVLW  FA
23C0:  MOVWF  xE3
23C2:  CALL   066E
23C6:  DECFSZ xD1,F
23C8:  BRA    23BE
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de Calibracion en un punto 
23CA:  MOVF   18,W
23CC:  SUBLW  02
23CE:  BTFSS  FD8.2
23D0:  BRA    27CE
....................     
....................    lcd_gotoxy(1,1); 
23D2:  MOVLW  01
23D4:  MOVWF  xE3
23D6:  MOVWF  xE4
23D8:  CALL   0828
....................    printf(lcd_putc,"Calibracion un Punto"); 
23DC:  MOVLW  BE
23DE:  MOVWF  FF6
23E0:  MOVLW  02
23E2:  MOVWF  FF7
23E4:  CALL   08E8
....................    lcd_gotoxy(1,2); 
23E8:  MOVLW  01
23EA:  MOVWF  xE3
23EC:  MOVLW  02
23EE:  MOVWF  xE4
23F0:  CALL   0828
....................    printf(lcd_putc," Ingrese valor  pH  "); 
23F4:  MOVLW  D4
23F6:  MOVWF  FF6
23F8:  MOVLW  02
23FA:  MOVWF  FF7
23FC:  CALL   08E8
....................    lcd_gotoxy(1,3); 
2400:  MOVLW  01
2402:  MOVWF  xE3
2404:  MOVLW  03
2406:  MOVWF  xE4
2408:  CALL   0828
....................    printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
240C:  MOVLW  EA
240E:  MOVWF  FF6
2410:  MOVLW  02
2412:  MOVWF  FF7
2414:  MOVLW  05
2416:  MOVWF  xD5
2418:  CALL   0CCC
241C:  MOVLW  01
241E:  MOVWF  FE9
2420:  MOVFF  B0,D8
2424:  MOVFF  AF,D7
2428:  MOVFF  AE,D6
242C:  MOVFF  AD,D5
2430:  MOVWF  xD9
2432:  CALL   103C
2436:  MOVLW  F4
2438:  MOVWF  FF6
243A:  MOVLW  02
243C:  MOVWF  FF7
243E:  MOVLW  05
2440:  MOVWF  xD5
2442:  CALL   0CCC
....................     
....................           
....................    if(pHpoint<0.5) 
2446:  MOVFF  B0,D9
244A:  MOVFF  AF,D8
244E:  MOVFF  AE,D7
2452:  MOVFF  AD,D6
2456:  CLRF   xDD
2458:  CLRF   xDC
245A:  CLRF   xDB
245C:  MOVLW  7E
245E:  MOVWF  xDA
2460:  CALL   11C2
2464:  BNC   2470
....................    { 
....................       pHpoint=0.5; 
2466:  CLRF   xB0
2468:  CLRF   xAF
246A:  CLRF   xAE
246C:  MOVLW  7E
246E:  MOVWF  xAD
....................    } 
....................    if(pHpoint>14.0) 
2470:  CLRF   xD9
2472:  CLRF   xD8
2474:  MOVLW  60
2476:  MOVWF  xD7
2478:  MOVLW  82
247A:  MOVWF  xD6
247C:  MOVFF  B0,DD
2480:  MOVFF  AF,DC
2484:  MOVFF  AE,DB
2488:  MOVFF  AD,DA
248C:  CALL   11C2
2490:  BNC   249E
....................    { 
....................       pHpoint=14.0; 
2492:  CLRF   xB0
2494:  CLRF   xAF
2496:  MOVLW  60
2498:  MOVWF  xAE
249A:  MOVLW  82
249C:  MOVWF  xAD
....................    } 
....................     
....................    if(UP) 
249E:  BSF    F92.5
24A0:  BTFSS  F80.5
24A2:  BRA    2504
....................    { 
....................       if(pHpoint<14.0) 
24A4:  MOVFF  B0,D9
24A8:  MOVFF  AF,D8
24AC:  MOVFF  AE,D7
24B0:  MOVFF  AD,D6
24B4:  CLRF   xDD
24B6:  CLRF   xDC
24B8:  MOVLW  60
24BA:  MOVWF  xDB
24BC:  MOVLW  82
24BE:  MOVWF  xDA
24C0:  CALL   11C2
24C4:  BNC   2504
....................       { 
....................          pHpoint+=0.1;delay_ms(200); 
24C6:  BCF    FD8.1
24C8:  MOVFF  B0,DD
24CC:  MOVFF  AF,DC
24D0:  MOVFF  AE,DB
24D4:  MOVFF  AD,DA
24D8:  MOVLW  CD
24DA:  MOVWF  xE1
24DC:  MOVLW  CC
24DE:  MOVWF  xE0
24E0:  MOVLW  4C
24E2:  MOVWF  xDF
24E4:  MOVLW  7B
24E6:  MOVWF  xDE
24E8:  CALL   0A62
24EC:  MOVFF  03,B0
24F0:  MOVFF  02,AF
24F4:  MOVFF  01,AE
24F8:  MOVFF  00,AD
24FC:  MOVLW  C8
24FE:  MOVWF  xE3
2500:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2504:  BSF    F96.0
2506:  BTFSS  F84.0
2508:  BRA    2568
....................    { 
....................       if(pHpoint>0.5) 
250A:  CLRF   xD9
250C:  CLRF   xD8
250E:  CLRF   xD7
2510:  MOVLW  7E
2512:  MOVWF  xD6
2514:  MOVFF  B0,DD
2518:  MOVFF  AF,DC
251C:  MOVFF  AE,DB
2520:  MOVFF  AD,DA
2524:  CALL   11C2
2528:  BNC   2568
....................       { 
....................          pHpoint-=0.1;delay_ms(200); 
252A:  BSF    FD8.1
252C:  MOVFF  B0,DD
2530:  MOVFF  AF,DC
2534:  MOVFF  AE,DB
2538:  MOVFF  AD,DA
253C:  MOVLW  CD
253E:  MOVWF  xE1
2540:  MOVLW  CC
2542:  MOVWF  xE0
2544:  MOVLW  4C
2546:  MOVWF  xDF
2548:  MOVLW  7B
254A:  MOVWF  xDE
254C:  CALL   0A62
2550:  MOVFF  03,B0
2554:  MOVFF  02,AF
2558:  MOVFF  01,AE
255C:  MOVFF  00,AD
2560:  MOVLW  C8
2562:  MOVWF  xE3
2564:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2568:  BSF    F96.1
256A:  BTFSS  F84.1
256C:  BRA    27A4
....................    { 
....................       b=pHpoint-pVpH; 
256E:  BSF    FD8.1
2570:  MOVFF  B0,DD
2574:  MOVFF  AF,DC
2578:  MOVFF  AE,DB
257C:  MOVFF  AD,DA
2580:  MOVFF  B4,E1
2584:  MOVFF  B3,E0
2588:  MOVFF  B2,DF
258C:  MOVFF  B1,DE
2590:  CALL   0A62
2594:  MOVFF  03,C0
2598:  MOVFF  02,BF
259C:  MOVFF  01,BE
25A0:  MOVFF  00,BD
....................       if(b>=0) 
25A4:  CLRF   xD9
25A6:  CLRF   xD8
25A8:  CLRF   xD7
25AA:  CLRF   xD6
25AC:  MOVFF  C0,DD
25B0:  MOVFF  BF,DC
25B4:  MOVFF  BE,DB
25B8:  MOVFF  BD,DA
25BC:  CALL   11C2
25C0:  BC    25C4
25C2:  BNZ   25F4
....................       { 
....................          negativo=10;write_eeprom(60,negativo); 
25C4:  MOVLW  0A
25C6:  MOVWF  29
25C8:  MOVLW  3C
25CA:  MOVWF  FA9
25CC:  MOVFF  29,FA8
25D0:  BCF    FA6.6
25D2:  BCF    FA6.7
25D4:  BSF    FA6.2
25D6:  MOVF   FF2,W
25D8:  MOVWF  00
25DA:  BCF    FF2.7
25DC:  MOVLB  F
25DE:  MOVLW  55
25E0:  MOVWF  FA7
25E2:  MOVLW  AA
25E4:  MOVWF  FA7
25E6:  BSF    FA6.1
25E8:  BTFSC  FA6.1
25EA:  BRA    25E8
25EC:  BCF    FA6.2
25EE:  MOVF   00,W
25F0:  IORWF  FF2,F
25F2:  MOVLB  0
....................       } 
....................       if(b<0) 
25F4:  MOVFF  C0,D9
25F8:  MOVFF  BF,D8
25FC:  MOVFF  BE,D7
2600:  MOVFF  BD,D6
2604:  CLRF   xDD
2606:  CLRF   xDC
2608:  CLRF   xDB
260A:  CLRF   xDA
260C:  CALL   11C2
2610:  BNC   2642
....................       { 
....................          negativo=20;write_eeprom(60,negativo); 
2612:  MOVLW  14
2614:  MOVWF  29
2616:  MOVLW  3C
2618:  MOVWF  FA9
261A:  MOVFF  29,FA8
261E:  BCF    FA6.6
2620:  BCF    FA6.7
2622:  BSF    FA6.2
2624:  MOVF   FF2,W
2626:  MOVWF  00
2628:  BCF    FF2.7
262A:  MOVLB  F
262C:  MOVLW  55
262E:  MOVWF  FA7
2630:  MOVLW  AA
2632:  MOVWF  FA7
2634:  BSF    FA6.1
2636:  BTFSC  FA6.1
2638:  BRA    2636
263A:  BCF    FA6.2
263C:  MOVF   00,W
263E:  IORWF  FF2,F
2640:  MOVLB  0
....................       } 
....................       b=abs(b); 
2642:  MOVFF  BD,00
2646:  MOVFF  BE,01
264A:  MOVFF  BF,02
264E:  MOVFF  C0,03
2652:  BCF    01.7
2654:  MOVFF  C0,C0
2658:  MOVFF  BF,BF
265C:  MOVFF  01,BE
2660:  MOVFF  BD,BD
....................       bInt=(int8)b; 
2664:  MOVFF  C0,D4
2668:  MOVFF  BF,D3
266C:  MOVFF  BE,D2
2670:  MOVFF  BD,D1
2674:  CALL   1238
2678:  MOVFF  01,31
....................       tmp=b-bInt; 
267C:  CLRF   xDC
267E:  MOVFF  31,DB
2682:  CALL   07A6
2686:  BSF    FD8.1
2688:  MOVFF  C0,DD
268C:  MOVFF  BF,DC
2690:  MOVFF  BE,DB
2694:  MOVFF  BD,DA
2698:  MOVFF  03,E1
269C:  MOVFF  02,E0
26A0:  MOVFF  01,DF
26A4:  MOVFF  00,DE
26A8:  CALL   0A62
26AC:  MOVFF  03,C8
26B0:  MOVFF  02,C7
26B4:  MOVFF  01,C6
26B8:  MOVFF  00,C5
....................       bDec=tmp*100; 
26BC:  MOVFF  C8,E5
26C0:  MOVFF  C7,E4
26C4:  MOVFF  C6,E3
26C8:  MOVFF  C5,E2
26CC:  CLRF   xE9
26CE:  CLRF   xE8
26D0:  MOVLW  48
26D2:  MOVWF  xE7
26D4:  MOVLW  85
26D6:  MOVWF  xE6
26D8:  CALL   0E90
26DC:  MOVFF  03,D4
26E0:  MOVFF  02,D3
26E4:  MOVFF  01,D2
26E8:  MOVFF  00,D1
26EC:  CALL   1238
26F0:  MOVFF  01,32
....................       write_eeprom(20,bInt); 
26F4:  MOVLW  14
26F6:  MOVWF  FA9
26F8:  MOVFF  31,FA8
26FC:  BCF    FA6.6
26FE:  BCF    FA6.7
2700:  BSF    FA6.2
2702:  MOVF   FF2,W
2704:  MOVWF  00
2706:  BCF    FF2.7
2708:  MOVLB  F
270A:  MOVLW  55
270C:  MOVWF  FA7
270E:  MOVLW  AA
2710:  MOVWF  FA7
2712:  BSF    FA6.1
2714:  BTFSC  FA6.1
2716:  BRA    2714
2718:  BCF    FA6.2
271A:  MOVF   00,W
271C:  IORWF  FF2,F
....................       write_eeprom(21,bDec); 
271E:  MOVLW  15
2720:  MOVWF  FA9
2722:  MOVFF  32,FA8
2726:  BCF    FA6.6
2728:  BCF    FA6.7
272A:  BSF    FA6.2
272C:  MOVFF  FF2,00
2730:  BCF    FF2.7
2732:  MOVLW  55
2734:  MOVWF  FA7
2736:  MOVLW  AA
2738:  MOVWF  FA7
273A:  BSF    FA6.1
273C:  BTFSC  FA6.1
273E:  BRA    273C
2740:  BCF    FA6.2
2742:  MOVF   00,W
2744:  IORWF  FF2,F
....................       delay_ms(200); 
2746:  MOVLW  C8
2748:  MOVLB  0
274A:  MOVWF  xE3
274C:  CALL   066E
....................       printf(lcd_putc,"\f"); 
2750:  MOVLW  0C
2752:  MOVWF  xE2
2754:  CALL   088A
....................       lcd_gotoxy(1,2); 
2758:  MOVLW  01
275A:  MOVWF  xE3
275C:  MOVLW  02
275E:  MOVWF  xE4
2760:  CALL   0828
....................       printf(lcd_putc,"   Calibracion   "); 
2764:  MOVLW  FA
2766:  MOVWF  FF6
2768:  MOVLW  02
276A:  MOVWF  FF7
276C:  CALL   08E8
....................       lcd_gotoxy(1,3); 
2770:  MOVLW  01
2772:  MOVWF  xE3
2774:  MOVLW  03
2776:  MOVWF  xE4
2778:  CALL   0828
....................       printf(lcd_putc,"     Exitosa     "); 
277C:  MOVLW  0C
277E:  MOVWF  FF6
2780:  MOVLW  03
2782:  MOVWF  FF7
2784:  CALL   08E8
....................       delay_ms(500); 
2788:  MOVLW  02
278A:  MOVWF  xD1
278C:  MOVLW  FA
278E:  MOVWF  xE3
2790:  CALL   066E
2794:  DECFSZ xD1,F
2796:  BRA    278C
....................       printf(lcd_putc,"\f"); 
2798:  MOVLW  0C
279A:  MOVWF  xE2
279C:  CALL   088A
....................       Menu=100; 
27A0:  MOVLW  64
27A2:  MOVWF  18
....................    } 
....................     
....................    if(LEFT) 
27A4:  BSF    F96.2
27A6:  BTFSS  F84.2
27A8:  BRA    27CE
....................    { 
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
27AA:  MOVLW  01
27AC:  MOVWF  18
27AE:  CLRF   37
27B0:  MOVLW  04
27B2:  MOVWF  xD1
27B4:  MOVLW  FA
27B6:  MOVWF  xE3
27B8:  CALL   066E
27BC:  DECFSZ xD1,F
27BE:  BRA    27B4
27C0:  MOVLW  02
27C2:  MOVWF  1C
27C4:  MOVWF  1E
27C6:  MOVLW  0C
27C8:  MOVWF  xE2
27CA:  CALL   088A
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de calibracion en dos puntos 
27CE:  MOVF   18,W
27D0:  SUBLW  03
27D2:  BTFSS  FD8.2
27D4:  GOTO   301C
....................     
....................       lcd_gotoxy(1,1); 
27D8:  MOVLW  01
27DA:  MOVWF  xE3
27DC:  MOVWF  xE4
27DE:  CALL   0828
....................       printf(lcd_putc,"Calibracion dos Punt"); 
27E2:  MOVLW  1E
27E4:  MOVWF  FF6
27E6:  MOVLW  03
27E8:  MOVWF  FF7
27EA:  CALL   08E8
....................       lcd_gotoxy(1,2); 
27EE:  MOVLW  01
27F0:  MOVWF  xE3
27F2:  MOVLW  02
27F4:  MOVWF  xE4
27F6:  CALL   0828
....................       printf(lcd_putc,"Ingrese valor  pH %u",punto); 
27FA:  MOVLW  34
27FC:  MOVWF  FF6
27FE:  MOVLW  03
2800:  MOVWF  FF7
2802:  MOVLW  12
2804:  MOVWF  xD5
2806:  CALL   0CCC
280A:  MOVFF  28,D5
280E:  MOVLW  1B
2810:  MOVWF  xD6
2812:  CALL   1270
....................       lcd_gotoxy(1,3); 
2816:  MOVLW  01
2818:  MOVWF  xE3
281A:  MOVLW  03
281C:  MOVWF  xE4
281E:  CALL   0828
....................       printf(lcd_putc,"     %2.1f pH  ",pHpoint);  
2822:  MOVLW  4A
2824:  MOVWF  FF6
2826:  MOVLW  03
2828:  MOVWF  FF7
282A:  MOVLW  05
282C:  MOVWF  xD5
282E:  CALL   0CCC
2832:  MOVLW  01
2834:  MOVWF  FE9
2836:  MOVFF  B0,D8
283A:  MOVFF  AF,D7
283E:  MOVFF  AE,D6
2842:  MOVFF  AD,D5
2846:  MOVWF  xD9
2848:  CALL   103C
284C:  MOVLW  54
284E:  MOVWF  FF6
2850:  MOVLW  03
2852:  MOVWF  FF7
2854:  MOVLW  05
2856:  MOVWF  xD5
2858:  CALL   0CCC
....................       //lcd_gotoxy(1,4); 
....................       //printf(lcd_putc,"     %2.1f  ",sensores(0));  
....................              
....................       if(pHpoint<0.5) 
285C:  MOVFF  B0,D9
2860:  MOVFF  AF,D8
2864:  MOVFF  AE,D7
2868:  MOVFF  AD,D6
286C:  CLRF   xDD
286E:  CLRF   xDC
2870:  CLRF   xDB
2872:  MOVLW  7E
2874:  MOVWF  xDA
2876:  CALL   11C2
287A:  BNC   2886
....................       { 
....................          pHpoint=0.5; 
287C:  CLRF   xB0
287E:  CLRF   xAF
2880:  CLRF   xAE
2882:  MOVLW  7E
2884:  MOVWF  xAD
....................       } 
....................       if(pHpoint>14.0) 
2886:  CLRF   xD9
2888:  CLRF   xD8
288A:  MOVLW  60
288C:  MOVWF  xD7
288E:  MOVLW  82
2890:  MOVWF  xD6
2892:  MOVFF  B0,DD
2896:  MOVFF  AF,DC
289A:  MOVFF  AE,DB
289E:  MOVFF  AD,DA
28A2:  CALL   11C2
28A6:  BNC   28B4
....................       { 
....................          pHpoint=14.0; 
28A8:  CLRF   xB0
28AA:  CLRF   xAF
28AC:  MOVLW  60
28AE:  MOVWF  xAE
28B0:  MOVLW  82
28B2:  MOVWF  xAD
....................       } 
....................        
....................       if(UP) 
28B4:  BSF    F92.5
28B6:  BTFSS  F80.5
28B8:  BRA    291A
....................       { 
....................          if(pHpoint<14.0) 
28BA:  MOVFF  B0,D9
28BE:  MOVFF  AF,D8
28C2:  MOVFF  AE,D7
28C6:  MOVFF  AD,D6
28CA:  CLRF   xDD
28CC:  CLRF   xDC
28CE:  MOVLW  60
28D0:  MOVWF  xDB
28D2:  MOVLW  82
28D4:  MOVWF  xDA
28D6:  CALL   11C2
28DA:  BNC   291A
....................          { 
....................             pHpoint+=0.1;delay_ms(200); 
28DC:  BCF    FD8.1
28DE:  MOVFF  B0,DD
28E2:  MOVFF  AF,DC
28E6:  MOVFF  AE,DB
28EA:  MOVFF  AD,DA
28EE:  MOVLW  CD
28F0:  MOVWF  xE1
28F2:  MOVLW  CC
28F4:  MOVWF  xE0
28F6:  MOVLW  4C
28F8:  MOVWF  xDF
28FA:  MOVLW  7B
28FC:  MOVWF  xDE
28FE:  CALL   0A62
2902:  MOVFF  03,B0
2906:  MOVFF  02,AF
290A:  MOVFF  01,AE
290E:  MOVFF  00,AD
2912:  MOVLW  C8
2914:  MOVWF  xE3
2916:  CALL   066E
....................          } 
....................       } 
....................        
....................       if(DOWN) 
291A:  BSF    F96.0
291C:  BTFSS  F84.0
291E:  BRA    297E
....................       { 
....................          if(pHpoint>0.5) 
2920:  CLRF   xD9
2922:  CLRF   xD8
2924:  CLRF   xD7
2926:  MOVLW  7E
2928:  MOVWF  xD6
292A:  MOVFF  B0,DD
292E:  MOVFF  AF,DC
2932:  MOVFF  AE,DB
2936:  MOVFF  AD,DA
293A:  CALL   11C2
293E:  BNC   297E
....................          { 
....................             pHpoint-=0.1;delay_ms(200); 
2940:  BSF    FD8.1
2942:  MOVFF  B0,DD
2946:  MOVFF  AF,DC
294A:  MOVFF  AE,DB
294E:  MOVFF  AD,DA
2952:  MOVLW  CD
2954:  MOVWF  xE1
2956:  MOVLW  CC
2958:  MOVWF  xE0
295A:  MOVLW  4C
295C:  MOVWF  xDF
295E:  MOVLW  7B
2960:  MOVWF  xDE
2962:  CALL   0A62
2966:  MOVFF  03,B0
296A:  MOVFF  02,AF
296E:  MOVFF  01,AE
2972:  MOVFF  00,AD
2976:  MOVLW  C8
2978:  MOVWF  xE3
297A:  CALL   066E
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
297E:  BSF    F96.1
2980:  BTFSS  F84.1
2982:  BRA    2F16
....................       { 
....................          if(punto==1) 
2984:  DECFSZ 28,W
2986:  BRA    29C2
....................          { 
....................             X0=sensores(0); 
2988:  CLRF   xD6
298A:  CALL   07DC
298E:  MOVFF  03,A0
2992:  MOVFF  02,9F
2996:  MOVFF  01,9E
299A:  MOVFF  00,9D
....................             Y0=pHpoint; 
299E:  MOVFF  B0,A4
29A2:  MOVFF  AF,A3
29A6:  MOVFF  AE,A2
29AA:  MOVFF  AD,A1
....................             punto++; 
29AE:  INCF   28,F
....................             delay_ms(1000); 
29B0:  MOVLW  04
29B2:  MOVWF  xD1
29B4:  MOVLW  FA
29B6:  MOVWF  xE3
29B8:  CALL   066E
29BC:  DECFSZ xD1,F
29BE:  BRA    29B4
....................          } 
....................          else 
29C0:  BRA    2F16
....................          { 
....................             if(punto==2) 
29C2:  MOVF   28,W
29C4:  SUBLW  02
29C6:  BTFSS  FD8.2
29C8:  BRA    2F16
....................             { 
....................                X1=sensores(0); 
29CA:  CLRF   xD6
29CC:  CALL   07DC
29D0:  MOVFF  03,A8
29D4:  MOVFF  02,A7
29D8:  MOVFF  01,A6
29DC:  MOVFF  00,A5
....................                Y1=pHpoint; 
29E0:  MOVFF  B0,AC
29E4:  MOVFF  AF,AB
29E8:  MOVFF  AE,AA
29EC:  MOVFF  AD,A9
....................                 
....................                Y0Int=(int8)Y0; 
29F0:  MOVFF  A4,D4
29F4:  MOVFF  A3,D3
29F8:  MOVFF  A2,D2
29FC:  MOVFF  A1,D1
2A00:  CALL   1238
2A04:  MOVFF  01,33
....................                tmp=Y0-Y0Int; 
2A08:  CLRF   xDC
2A0A:  MOVFF  33,DB
2A0E:  CALL   07A6
2A12:  BSF    FD8.1
2A14:  MOVFF  A4,DD
2A18:  MOVFF  A3,DC
2A1C:  MOVFF  A2,DB
2A20:  MOVFF  A1,DA
2A24:  MOVFF  03,E1
2A28:  MOVFF  02,E0
2A2C:  MOVFF  01,DF
2A30:  MOVFF  00,DE
2A34:  CALL   0A62
2A38:  MOVFF  03,C8
2A3C:  MOVFF  02,C7
2A40:  MOVFF  01,C6
2A44:  MOVFF  00,C5
....................                Y0Dec=tmp*10; 
2A48:  MOVFF  C8,E5
2A4C:  MOVFF  C7,E4
2A50:  MOVFF  C6,E3
2A54:  MOVFF  C5,E2
2A58:  CLRF   xE9
2A5A:  CLRF   xE8
2A5C:  MOVLW  20
2A5E:  MOVWF  xE7
2A60:  MOVLW  82
2A62:  MOVWF  xE6
2A64:  CALL   0E90
2A68:  MOVFF  03,D4
2A6C:  MOVFF  02,D3
2A70:  MOVFF  01,D2
2A74:  MOVFF  00,D1
2A78:  CALL   1238
2A7C:  MOVFF  01,34
....................                 
....................                Y1Int=(int8)Y1; 
2A80:  MOVFF  AC,D4
2A84:  MOVFF  AB,D3
2A88:  MOVFF  AA,D2
2A8C:  MOVFF  A9,D1
2A90:  CALL   1238
2A94:  MOVFF  01,35
....................                tmp=Y1-Y1Int; 
2A98:  CLRF   xDC
2A9A:  MOVFF  35,DB
2A9E:  CALL   07A6
2AA2:  BSF    FD8.1
2AA4:  MOVFF  AC,DD
2AA8:  MOVFF  AB,DC
2AAC:  MOVFF  AA,DB
2AB0:  MOVFF  A9,DA
2AB4:  MOVFF  03,E1
2AB8:  MOVFF  02,E0
2ABC:  MOVFF  01,DF
2AC0:  MOVFF  00,DE
2AC4:  CALL   0A62
2AC8:  MOVFF  03,C8
2ACC:  MOVFF  02,C7
2AD0:  MOVFF  01,C6
2AD4:  MOVFF  00,C5
....................                Y1Dec=tmp*10; 
2AD8:  MOVFF  C8,E5
2ADC:  MOVFF  C7,E4
2AE0:  MOVFF  C6,E3
2AE4:  MOVFF  C5,E2
2AE8:  CLRF   xE9
2AEA:  CLRF   xE8
2AEC:  MOVLW  20
2AEE:  MOVWF  xE7
2AF0:  MOVLW  82
2AF2:  MOVWF  xE6
2AF4:  CALL   0E90
2AF8:  MOVFF  03,D4
2AFC:  MOVFF  02,D3
2B00:  MOVFF  01,D2
2B04:  MOVFF  00,D1
2B08:  CALL   1238
2B0C:  MOVFF  01,36
....................                 
....................                write_eeprom(30,(int8)X0); 
2B10:  MOVFF  A0,D4
2B14:  MOVFF  9F,D3
2B18:  MOVFF  9E,D2
2B1C:  MOVFF  9D,D1
2B20:  CALL   1238
2B24:  MOVFF  01,D1
2B28:  MOVLW  1E
2B2A:  MOVWF  FA9
2B2C:  MOVFF  D1,FA8
2B30:  BCF    FA6.6
2B32:  BCF    FA6.7
2B34:  BSF    FA6.2
2B36:  MOVF   FF2,W
2B38:  MOVWF  00
2B3A:  BCF    FF2.7
2B3C:  MOVLB  F
2B3E:  MOVLW  55
2B40:  MOVWF  FA7
2B42:  MOVLW  AA
2B44:  MOVWF  FA7
2B46:  BSF    FA6.1
2B48:  BTFSC  FA6.1
2B4A:  BRA    2B48
2B4C:  BCF    FA6.2
2B4E:  MOVF   00,W
2B50:  IORWF  FF2,F
....................                write_eeprom(31,(int8)X1); 
2B52:  MOVFF  A8,D4
2B56:  MOVFF  A7,D3
2B5A:  MOVFF  A6,D2
2B5E:  MOVFF  A5,D1
2B62:  MOVLB  0
2B64:  CALL   1238
2B68:  MOVFF  01,D1
2B6C:  MOVLW  1F
2B6E:  MOVWF  FA9
2B70:  MOVFF  D1,FA8
2B74:  BCF    FA6.6
2B76:  BCF    FA6.7
2B78:  BSF    FA6.2
2B7A:  MOVF   FF2,W
2B7C:  MOVWF  00
2B7E:  BCF    FF2.7
2B80:  MOVLB  F
2B82:  MOVLW  55
2B84:  MOVWF  FA7
2B86:  MOVLW  AA
2B88:  MOVWF  FA7
2B8A:  BSF    FA6.1
2B8C:  BTFSC  FA6.1
2B8E:  BRA    2B8C
2B90:  BCF    FA6.2
2B92:  MOVF   00,W
2B94:  IORWF  FF2,F
....................                write_eeprom(32,Y0Int); 
2B96:  MOVLW  20
2B98:  MOVWF  FA9
2B9A:  MOVFF  33,FA8
2B9E:  BCF    FA6.6
2BA0:  BCF    FA6.7
2BA2:  BSF    FA6.2
2BA4:  MOVFF  FF2,00
2BA8:  BCF    FF2.7
2BAA:  MOVLW  55
2BAC:  MOVWF  FA7
2BAE:  MOVLW  AA
2BB0:  MOVWF  FA7
2BB2:  BSF    FA6.1
2BB4:  BTFSC  FA6.1
2BB6:  BRA    2BB4
2BB8:  BCF    FA6.2
2BBA:  MOVF   00,W
2BBC:  IORWF  FF2,F
....................                write_eeprom(33,Y0Dec); 
2BBE:  MOVLW  21
2BC0:  MOVWF  FA9
2BC2:  MOVFF  34,FA8
2BC6:  BCF    FA6.6
2BC8:  BCF    FA6.7
2BCA:  BSF    FA6.2
2BCC:  MOVFF  FF2,00
2BD0:  BCF    FF2.7
2BD2:  MOVLW  55
2BD4:  MOVWF  FA7
2BD6:  MOVLW  AA
2BD8:  MOVWF  FA7
2BDA:  BSF    FA6.1
2BDC:  BTFSC  FA6.1
2BDE:  BRA    2BDC
2BE0:  BCF    FA6.2
2BE2:  MOVF   00,W
2BE4:  IORWF  FF2,F
....................                write_eeprom(34,Y1Int); 
2BE6:  MOVLW  22
2BE8:  MOVWF  FA9
2BEA:  MOVFF  35,FA8
2BEE:  BCF    FA6.6
2BF0:  BCF    FA6.7
2BF2:  BSF    FA6.2
2BF4:  MOVFF  FF2,00
2BF8:  BCF    FF2.7
2BFA:  MOVLW  55
2BFC:  MOVWF  FA7
2BFE:  MOVLW  AA
2C00:  MOVWF  FA7
2C02:  BSF    FA6.1
2C04:  BTFSC  FA6.1
2C06:  BRA    2C04
2C08:  BCF    FA6.2
2C0A:  MOVF   00,W
2C0C:  IORWF  FF2,F
....................                write_eeprom(35,Y1Dec); 
2C0E:  MOVLW  23
2C10:  MOVWF  FA9
2C12:  MOVFF  36,FA8
2C16:  BCF    FA6.6
2C18:  BCF    FA6.7
2C1A:  BSF    FA6.2
2C1C:  MOVFF  FF2,00
2C20:  BCF    FF2.7
2C22:  MOVLW  55
2C24:  MOVWF  FA7
2C26:  MOVLW  AA
2C28:  MOVWF  FA7
2C2A:  BSF    FA6.1
2C2C:  BTFSC  FA6.1
2C2E:  BRA    2C2C
2C30:  BCF    FA6.2
2C32:  MOVF   00,W
2C34:  IORWF  FF2,F
....................                 
....................                b=Y1-(X1*(Y1-Y0)/(X1-X0)); 
2C36:  BSF    FD8.1
2C38:  MOVFF  AC,DD
2C3C:  MOVFF  AB,DC
2C40:  MOVFF  AA,DB
2C44:  MOVFF  A9,DA
2C48:  MOVFF  A4,E1
2C4C:  MOVFF  A3,E0
2C50:  MOVFF  A2,DF
2C54:  MOVFF  A1,DE
2C58:  MOVLB  0
2C5A:  CALL   0A62
2C5E:  MOVFF  A8,E5
2C62:  MOVFF  A7,E4
2C66:  MOVFF  A6,E3
2C6A:  MOVFF  A5,E2
2C6E:  MOVFF  03,E9
2C72:  MOVFF  02,E8
2C76:  MOVFF  01,E7
2C7A:  MOVFF  00,E6
2C7E:  CALL   0E90
2C82:  MOVFF  00,D1
2C86:  MOVFF  01,D2
2C8A:  MOVFF  02,D3
2C8E:  MOVFF  03,D4
2C92:  BSF    FD8.1
2C94:  MOVFF  A8,DD
2C98:  MOVFF  A7,DC
2C9C:  MOVFF  A6,DB
2CA0:  MOVFF  A5,DA
2CA4:  MOVFF  A0,E1
2CA8:  MOVFF  9F,E0
2CAC:  MOVFF  9E,DF
2CB0:  MOVFF  9D,DE
2CB4:  CALL   0A62
2CB8:  MOVFF  D4,DD
2CBC:  MOVFF  D3,DC
2CC0:  MOVFF  D2,DB
2CC4:  MOVFF  D1,DA
2CC8:  MOVFF  03,E1
2CCC:  MOVFF  02,E0
2CD0:  MOVFF  01,DF
2CD4:  MOVFF  00,DE
2CD8:  CALL   0908
2CDC:  BSF    FD8.1
2CDE:  MOVFF  AC,DD
2CE2:  MOVFF  AB,DC
2CE6:  MOVFF  AA,DB
2CEA:  MOVFF  A9,DA
2CEE:  MOVFF  03,E1
2CF2:  MOVFF  02,E0
2CF6:  MOVFF  01,DF
2CFA:  MOVFF  00,DE
2CFE:  CALL   0A62
2D02:  MOVFF  03,C0
2D06:  MOVFF  02,BF
2D0A:  MOVFF  01,BE
2D0E:  MOVFF  00,BD
....................                if(b>=0) 
2D12:  CLRF   xD9
2D14:  CLRF   xD8
2D16:  CLRF   xD7
2D18:  CLRF   xD6
2D1A:  MOVFF  C0,DD
2D1E:  MOVFF  BF,DC
2D22:  MOVFF  BE,DB
2D26:  MOVFF  BD,DA
2D2A:  CALL   11C2
2D2E:  BC    2D32
2D30:  BNZ   2D62
....................                { 
....................                   negativo=10;write_eeprom(60,negativo); 
2D32:  MOVLW  0A
2D34:  MOVWF  29
2D36:  MOVLW  3C
2D38:  MOVWF  FA9
2D3A:  MOVFF  29,FA8
2D3E:  BCF    FA6.6
2D40:  BCF    FA6.7
2D42:  BSF    FA6.2
2D44:  MOVF   FF2,W
2D46:  MOVWF  00
2D48:  BCF    FF2.7
2D4A:  MOVLB  F
2D4C:  MOVLW  55
2D4E:  MOVWF  FA7
2D50:  MOVLW  AA
2D52:  MOVWF  FA7
2D54:  BSF    FA6.1
2D56:  BTFSC  FA6.1
2D58:  BRA    2D56
2D5A:  BCF    FA6.2
2D5C:  MOVF   00,W
2D5E:  IORWF  FF2,F
2D60:  MOVLB  0
....................                } 
....................                if(b<0) 
2D62:  MOVFF  C0,D9
2D66:  MOVFF  BF,D8
2D6A:  MOVFF  BE,D7
2D6E:  MOVFF  BD,D6
2D72:  CLRF   xDD
2D74:  CLRF   xDC
2D76:  CLRF   xDB
2D78:  CLRF   xDA
2D7A:  CALL   11C2
2D7E:  BNC   2DB0
....................                { 
....................                   negativo=20;write_eeprom(60,negativo); 
2D80:  MOVLW  14
2D82:  MOVWF  29
2D84:  MOVLW  3C
2D86:  MOVWF  FA9
2D88:  MOVFF  29,FA8
2D8C:  BCF    FA6.6
2D8E:  BCF    FA6.7
2D90:  BSF    FA6.2
2D92:  MOVF   FF2,W
2D94:  MOVWF  00
2D96:  BCF    FF2.7
2D98:  MOVLB  F
2D9A:  MOVLW  55
2D9C:  MOVWF  FA7
2D9E:  MOVLW  AA
2DA0:  MOVWF  FA7
2DA2:  BSF    FA6.1
2DA4:  BTFSC  FA6.1
2DA6:  BRA    2DA4
2DA8:  BCF    FA6.2
2DAA:  MOVF   00,W
2DAC:  IORWF  FF2,F
2DAE:  MOVLB  0
....................                } 
....................                b=abs(b); 
2DB0:  MOVFF  BD,00
2DB4:  MOVFF  BE,01
2DB8:  MOVFF  BF,02
2DBC:  MOVFF  C0,03
2DC0:  BCF    01.7
2DC2:  MOVFF  C0,C0
2DC6:  MOVFF  BF,BF
2DCA:  MOVFF  01,BE
2DCE:  MOVFF  BD,BD
....................                bInt=(int8)b; 
2DD2:  MOVFF  C0,D4
2DD6:  MOVFF  BF,D3
2DDA:  MOVFF  BE,D2
2DDE:  MOVFF  BD,D1
2DE2:  CALL   1238
2DE6:  MOVFF  01,31
....................                tmp=b-bInt; 
2DEA:  CLRF   xDC
2DEC:  MOVFF  31,DB
2DF0:  CALL   07A6
2DF4:  BSF    FD8.1
2DF6:  MOVFF  C0,DD
2DFA:  MOVFF  BF,DC
2DFE:  MOVFF  BE,DB
2E02:  MOVFF  BD,DA
2E06:  MOVFF  03,E1
2E0A:  MOVFF  02,E0
2E0E:  MOVFF  01,DF
2E12:  MOVFF  00,DE
2E16:  CALL   0A62
2E1A:  MOVFF  03,C8
2E1E:  MOVFF  02,C7
2E22:  MOVFF  01,C6
2E26:  MOVFF  00,C5
....................                bDec=tmp*100; 
2E2A:  MOVFF  C8,E5
2E2E:  MOVFF  C7,E4
2E32:  MOVFF  C6,E3
2E36:  MOVFF  C5,E2
2E3A:  CLRF   xE9
2E3C:  CLRF   xE8
2E3E:  MOVLW  48
2E40:  MOVWF  xE7
2E42:  MOVLW  85
2E44:  MOVWF  xE6
2E46:  CALL   0E90
2E4A:  MOVFF  03,D4
2E4E:  MOVFF  02,D3
2E52:  MOVFF  01,D2
2E56:  MOVFF  00,D1
2E5A:  CALL   1238
2E5E:  MOVFF  01,32
....................                write_eeprom(20,bInt); 
2E62:  MOVLW  14
2E64:  MOVWF  FA9
2E66:  MOVFF  31,FA8
2E6A:  BCF    FA6.6
2E6C:  BCF    FA6.7
2E6E:  BSF    FA6.2
2E70:  MOVF   FF2,W
2E72:  MOVWF  00
2E74:  BCF    FF2.7
2E76:  MOVLB  F
2E78:  MOVLW  55
2E7A:  MOVWF  FA7
2E7C:  MOVLW  AA
2E7E:  MOVWF  FA7
2E80:  BSF    FA6.1
2E82:  BTFSC  FA6.1
2E84:  BRA    2E82
2E86:  BCF    FA6.2
2E88:  MOVF   00,W
2E8A:  IORWF  FF2,F
....................                write_eeprom(21,bDec); 
2E8C:  MOVLW  15
2E8E:  MOVWF  FA9
2E90:  MOVFF  32,FA8
2E94:  BCF    FA6.6
2E96:  BCF    FA6.7
2E98:  BSF    FA6.2
2E9A:  MOVFF  FF2,00
2E9E:  BCF    FF2.7
2EA0:  MOVLW  55
2EA2:  MOVWF  FA7
2EA4:  MOVLW  AA
2EA6:  MOVWF  FA7
2EA8:  BSF    FA6.1
2EAA:  BTFSC  FA6.1
2EAC:  BRA    2EAA
2EAE:  BCF    FA6.2
2EB0:  MOVF   00,W
2EB2:  IORWF  FF2,F
....................                delay_ms(200); 
2EB4:  MOVLW  C8
2EB6:  MOVLB  0
2EB8:  MOVWF  xE3
2EBA:  CALL   066E
....................                printf(lcd_putc,"\f"); 
2EBE:  MOVLW  0C
2EC0:  MOVWF  xE2
2EC2:  CALL   088A
....................                lcd_gotoxy(1,2); 
2EC6:  MOVLW  01
2EC8:  MOVWF  xE3
2ECA:  MOVLW  02
2ECC:  MOVWF  xE4
2ECE:  CALL   0828
....................                printf(lcd_putc,"   Calibracion   "); 
2ED2:  MOVLW  5A
2ED4:  MOVWF  FF6
2ED6:  MOVLW  03
2ED8:  MOVWF  FF7
2EDA:  CALL   08E8
....................                lcd_gotoxy(1,3); 
2EDE:  MOVLW  01
2EE0:  MOVWF  xE3
2EE2:  MOVLW  03
2EE4:  MOVWF  xE4
2EE6:  CALL   0828
....................                printf(lcd_putc,"     Exitosa     "); 
2EEA:  MOVLW  6C
2EEC:  MOVWF  FF6
2EEE:  MOVLW  03
2EF0:  MOVWF  FF7
2EF2:  CALL   08E8
....................                delay_ms(500); 
2EF6:  MOVLW  02
2EF8:  MOVWF  xD1
2EFA:  MOVLW  FA
2EFC:  MOVWF  xE3
2EFE:  CALL   066E
2F02:  DECFSZ xD1,F
2F04:  BRA    2EFA
....................                printf(lcd_putc,"\f");  
2F06:  MOVLW  0C
2F08:  MOVWF  xE2
2F0A:  CALL   088A
....................                punto=1; 
2F0E:  MOVLW  01
2F10:  MOVWF  28
....................                Menu=100; 
2F12:  MOVLW  64
2F14:  MOVWF  18
....................             } 
....................          } 
....................       } 
....................        
....................       if(LEFT) 
2F16:  BSF    F96.2
2F18:  BTFSS  F84.2
2F1A:  BRA    301C
....................       { 
....................          Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");punto=1; 
2F1C:  MOVLW  01
2F1E:  MOVWF  18
2F20:  CLRF   37
2F22:  MOVLW  04
2F24:  MOVWF  xD1
2F26:  MOVLW  FA
2F28:  MOVWF  xE3
2F2A:  CALL   066E
2F2E:  DECFSZ xD1,F
2F30:  BRA    2F26
2F32:  MOVLW  02
2F34:  MOVWF  1C
2F36:  MOVWF  1E
2F38:  MOVLW  0C
2F3A:  MOVWF  xE2
2F3C:  CALL   088A
2F40:  MOVLW  01
2F42:  MOVWF  28
....................          X0=read_eeprom(30); 
2F44:  MOVFF  FF2,D1
2F48:  BCF    FF2.7
2F4A:  MOVLW  1E
2F4C:  MOVWF  FA9
2F4E:  BCF    FA6.6
2F50:  BCF    FA6.7
2F52:  BSF    FA6.0
2F54:  MOVF   FA8,W
2F56:  BTFSC  xD1.7
2F58:  BSF    FF2.7
2F5A:  CLRF   xDC
2F5C:  MOVWF  xDB
2F5E:  CALL   07A6
2F62:  MOVFF  03,A0
2F66:  MOVFF  02,9F
2F6A:  MOVFF  01,9E
2F6E:  MOVFF  00,9D
....................          Y0Int=read_eeprom(32);Y0Dec=read_eeprom(33); 
2F72:  MOVFF  FF2,D1
2F76:  BCF    FF2.7
2F78:  MOVLW  20
2F7A:  MOVWF  FA9
2F7C:  BCF    FA6.6
2F7E:  BCF    FA6.7
2F80:  BSF    FA6.0
2F82:  MOVF   FA8,W
2F84:  BTFSC  xD1.7
2F86:  BSF    FF2.7
2F88:  MOVWF  33
2F8A:  MOVFF  FF2,D1
2F8E:  BCF    FF2.7
2F90:  MOVLW  21
2F92:  MOVWF  FA9
2F94:  BCF    FA6.6
2F96:  BCF    FA6.7
2F98:  BSF    FA6.0
2F9A:  MOVF   FA8,W
2F9C:  BTFSC  xD1.7
2F9E:  BSF    FF2.7
2FA0:  MOVWF  34
....................          tmp=Y0Dec/10.0; 
2FA2:  CLRF   xDC
2FA4:  MOVFF  34,DB
2FA8:  CALL   07A6
2FAC:  MOVFF  03,DD
2FB0:  MOVFF  02,DC
2FB4:  MOVFF  01,DB
2FB8:  MOVFF  00,DA
2FBC:  CLRF   xE1
2FBE:  CLRF   xE0
2FC0:  MOVLW  20
2FC2:  MOVWF  xDF
2FC4:  MOVLW  82
2FC6:  MOVWF  xDE
2FC8:  CALL   0908
2FCC:  MOVFF  03,C8
2FD0:  MOVFF  02,C7
2FD4:  MOVFF  01,C6
2FD8:  MOVFF  00,C5
....................          Y0=Y0Int+tmp; 
2FDC:  CLRF   xDC
2FDE:  MOVFF  33,DB
2FE2:  CALL   07A6
2FE6:  BCF    FD8.1
2FE8:  MOVFF  03,DD
2FEC:  MOVFF  02,DC
2FF0:  MOVFF  01,DB
2FF4:  MOVFF  00,DA
2FF8:  MOVFF  C8,E1
2FFC:  MOVFF  C7,E0
3000:  MOVFF  C6,DF
3004:  MOVFF  C5,DE
3008:  CALL   0A62
300C:  MOVFF  03,A4
3010:  MOVFF  02,A3
3014:  MOVFF  01,A2
3018:  MOVFF  00,A1
....................       }   
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
301C:  MOVF   18,W
301E:  SUBLW  04
3020:  BTFSS  FD8.2
3022:  BRA    331C
....................    lcd_gotoxy(1,1); 
3024:  MOVLW  01
3026:  MOVWF  xE3
3028:  MOVWF  xE4
302A:  CALL   0828
....................    printf(lcd_putc,"      Ingrese       "); 
302E:  MOVLW  7E
3030:  MOVWF  FF6
3032:  MOVLW  03
3034:  MOVWF  FF7
3036:  CALL   08E8
....................    lcd_gotoxy(1,2); 
303A:  MOVLW  01
303C:  MOVWF  xE3
303E:  MOVLW  02
3040:  MOVWF  xE4
3042:  CALL   0828
....................    printf(lcd_putc," Contraseña Actual  "); 
3046:  MOVLW  94
3048:  MOVWF  FF6
304A:  MOVLW  03
304C:  MOVWF  FF7
304E:  CALL   08E8
....................    lcd_gotoxy(1,3); 
3052:  MOVLW  01
3054:  MOVWF  xE3
3056:  MOVLW  03
3058:  MOVWF  xE4
305A:  CALL   0828
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
305E:  MOVLW  AA
3060:  MOVWF  FF6
3062:  MOVLW  03
3064:  MOVWF  FF7
3066:  MOVLW  0A
3068:  MOVWF  xD5
306A:  CALL   0CCC
306E:  MOVFF  3B,D1
3072:  MOVLW  1F
3074:  MOVWF  xD2
3076:  CALL   0D12
307A:  MOVFF  3C,D1
307E:  MOVLW  1F
3080:  MOVWF  xD2
3082:  CALL   0D12
3086:  MOVFF  3D,D1
308A:  MOVLW  1F
308C:  MOVWF  xD2
308E:  CALL   0D12
3092:  MOVFF  3E,D1
3096:  MOVLW  1F
3098:  MOVWF  xD2
309A:  CALL   0D12
309E:  MOVLW  20
30A0:  MOVWF  xE2
30A2:  CALL   088A
30A6:  MOVLW  20
30A8:  MOVWF  xE2
30AA:  CALL   088A
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
30AE:  BSF    F92.5
30B0:  BTFSS  F80.5
30B2:  BRA    30D6
....................       {  if(Flanco == 0)  
30B4:  BTFSC  17.2
30B6:  BRA    30D4
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
30B8:  MOVLW  0B
30BA:  SUBWF  1B,W
30BC:  CLRF   03
30BE:  ADDLW  3B
30C0:  MOVWF  FE9
30C2:  MOVLW  00
30C4:  ADDWFC 03,W
30C6:  MOVWF  FEA
30C8:  INCF   FEF,F
30CA:  BSF    17.2
30CC:  MOVLW  1E
30CE:  MOVWF  xE3
30D0:  CALL   066E
....................          else 
30D4:  BRA    30D8
....................             {Flanco = 0;} 
30D6:  BCF    17.2
....................              
....................       if(DOWN)//Si oprime hacia abajo 
30D8:  BSF    F96.0
30DA:  BTFSS  F84.0
30DC:  BRA    3100
....................       {  if(Flanco2 == 0)  
30DE:  BTFSC  17.4
30E0:  BRA    30FE
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
30E2:  MOVLW  0B
30E4:  SUBWF  1B,W
30E6:  CLRF   03
30E8:  ADDLW  3B
30EA:  MOVWF  FE9
30EC:  MOVLW  00
30EE:  ADDWFC 03,W
30F0:  MOVWF  FEA
30F2:  DECF   FEF,F
30F4:  BSF    17.4
30F6:  MOVLW  1E
30F8:  MOVWF  xE3
30FA:  CALL   066E
....................          else 
30FE:  BRA    3102
....................             {Flanco2 = 0;} 
3100:  BCF    17.4
....................     
....................       if(RIGHT)// Si oprime derecha 
3102:  BSF    F96.1
3104:  BTFSS  F84.1
3106:  BRA    3122
....................       {  if(Flanco1 == 0)  
3108:  BTFSC  17.3
310A:  BRA    3120
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
310C:  BSF    17.3
310E:  INCF   1B,F
3110:  MOVLW  1E
3112:  MOVWF  xE3
3114:  CALL   066E
3118:  MOVLW  0C
311A:  MOVWF  xE2
311C:  CALL   088A
....................          else 
3120:  BRA    3124
....................             {Flanco1 = 0;}    
3122:  BCF    17.3
....................              
....................        if(LEFT)// Si oprime Izquierda 
3124:  BSF    F96.2
3126:  BTFSS  F84.2
3128:  BRA    3144
....................       {  if(Flanco3 == 0)  
312A:  BTFSC  17.5
312C:  BRA    3142
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
312E:  BSF    17.5
3130:  DECF   1B,F
3132:  MOVLW  1E
3134:  MOVWF  xE3
3136:  CALL   066E
313A:  MOVLW  0C
313C:  MOVWF  xE2
313E:  CALL   088A
....................          else 
3142:  BRA    3146
....................             {Flanco3 = 0;}     
3144:  BCF    17.5
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3146:  MOVLW  0B
3148:  SUBWF  1B,W
314A:  CLRF   03
314C:  ADDLW  3B
314E:  MOVWF  FE9
3150:  MOVLW  00
3152:  ADDWFC 03,W
3154:  MOVWF  FEA
3156:  BTFSC  FEF.7
3158:  BRA    315C
315A:  BRA    3170
....................        {clave[unidad-11]=9;} 
315C:  MOVLW  0B
315E:  SUBWF  1B,W
3160:  CLRF   03
3162:  ADDLW  3B
3164:  MOVWF  FE9
3166:  MOVLW  00
3168:  ADDWFC 03,W
316A:  MOVWF  FEA
316C:  MOVLW  09
316E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3170:  MOVLW  0B
3172:  SUBWF  1B,W
3174:  CLRF   03
3176:  ADDLW  3B
3178:  MOVWF  FE9
317A:  MOVLW  00
317C:  ADDWFC 03,W
317E:  MOVWF  FEA
3180:  BTFSC  FEF.7
3182:  BRA    319C
3184:  MOVF   FEF,W
3186:  SUBLW  09
3188:  BC    319C
....................        {clave[unidad-11]=0;} 
318A:  MOVLW  0B
318C:  SUBWF  1B,W
318E:  CLRF   03
3190:  ADDLW  3B
3192:  MOVWF  FE9
3194:  MOVLW  00
3196:  ADDWFC 03,W
3198:  MOVWF  FEA
319A:  CLRF   FEF
....................        if(unidad<11) 
319C:  MOVF   1B,W
319E:  SUBLW  0A
31A0:  BNC   31C2
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
31A2:  MOVLW  01
31A4:  MOVWF  18
31A6:  CLRF   37
31A8:  MOVLW  02
31AA:  MOVWF  1C
31AC:  MOVWF  1E
31AE:  MOVLW  0B
31B0:  MOVWF  1B
31B2:  MOVLW  02
31B4:  MOVWF  xD1
31B6:  MOVLW  FA
31B8:  MOVWF  xE3
31BA:  CALL   066E
31BE:  DECFSZ xD1,F
31C0:  BRA    31B6
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
31C2:  MOVFF  1B,E3
31C6:  MOVLW  04
31C8:  MOVWF  xE4
31CA:  CALL   0828
....................        lcd_putc(t[2]); 
31CE:  MOVFF  3A,E2
31D2:  CALL   088A
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
31D6:  MOVF   1B,W
31D8:  SUBLW  0E
31DA:  BTFSC  FD8.0
31DC:  BRA    32F8
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
31DE:  MOVF   3F,W
31E0:  SUBWF  3B,W
31E2:  BNZ   327E
31E4:  MOVF   40,W
31E6:  SUBWF  3C,W
31E8:  BNZ   327E
31EA:  MOVF   41,W
31EC:  SUBWF  3D,W
31EE:  BNZ   327E
31F0:  MOVF   42,W
31F2:  SUBWF  3E,W
31F4:  BNZ   327E
....................             {lcd_gotoxy(1,1); 
31F6:  MOVLW  01
31F8:  MOVWF  xE3
31FA:  MOVWF  xE4
31FC:  CALL   0828
....................             printf(lcd_putc,"                    "); 
3200:  MOVLW  C0
3202:  MOVWF  FF6
3204:  MOVLW  03
3206:  MOVWF  FF7
3208:  CALL   08E8
....................             lcd_gotoxy(1,2); 
320C:  MOVLW  01
320E:  MOVWF  xE3
3210:  MOVLW  02
3212:  MOVWF  xE4
3214:  CALL   0828
....................             printf(lcd_putc,"     Contraseña     "); 
3218:  MOVLW  D6
321A:  MOVWF  FF6
321C:  MOVLW  03
321E:  MOVWF  FF7
3220:  CALL   08E8
....................             lcd_gotoxy(1,3); 
3224:  MOVLW  01
3226:  MOVWF  xE3
3228:  MOVLW  03
322A:  MOVWF  xE4
322C:  CALL   0828
....................             printf(lcd_putc,"      Correcta      "); 
3230:  MOVLW  EC
3232:  MOVWF  FF6
3234:  MOVLW  03
3236:  MOVWF  FF7
3238:  CALL   08E8
....................             lcd_gotoxy(1,4); 
323C:  MOVLW  01
323E:  MOVWF  xE3
3240:  MOVLW  04
3242:  MOVWF  xE4
3244:  CALL   0828
....................             printf(lcd_putc,"                    "); 
3248:  MOVLW  02
324A:  MOVWF  FF6
324C:  MOVLW  04
324E:  MOVWF  FF7
3250:  CALL   08E8
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
3254:  MOVLW  02
3256:  MOVWF  xD1
3258:  MOVLW  FA
325A:  MOVWF  xE3
325C:  CALL   066E
3260:  DECFSZ xD1,F
3262:  BRA    3258
3264:  MOVLW  3D
3266:  MOVWF  18
3268:  MOVLW  0B
326A:  MOVWF  1B
326C:  MOVLW  0C
326E:  MOVWF  xE2
3270:  CALL   088A
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3274:  CLRF   3B
3276:  CLRF   3C
3278:  CLRF   3D
327A:  CLRF   3E
....................          else 
327C:  BRA    32F8
....................          {lcd_gotoxy(1,1); 
327E:  MOVLW  01
3280:  MOVWF  xE3
3282:  MOVWF  xE4
3284:  CALL   0828
....................             printf(lcd_putc,"                    "); 
3288:  MOVLW  18
328A:  MOVWF  FF6
328C:  MOVLW  04
328E:  MOVWF  FF7
3290:  CALL   08E8
....................             lcd_gotoxy(1,2); 
3294:  MOVLW  01
3296:  MOVWF  xE3
3298:  MOVLW  02
329A:  MOVWF  xE4
329C:  CALL   0828
....................             printf(lcd_putc,"     Contraseña     "); 
32A0:  MOVLW  2E
32A2:  MOVWF  FF6
32A4:  MOVLW  04
32A6:  MOVWF  FF7
32A8:  CALL   08E8
....................             lcd_gotoxy(1,3); 
32AC:  MOVLW  01
32AE:  MOVWF  xE3
32B0:  MOVLW  03
32B2:  MOVWF  xE4
32B4:  CALL   0828
....................             printf(lcd_putc,"     Incorrecta     "); 
32B8:  MOVLW  44
32BA:  MOVWF  FF6
32BC:  MOVLW  04
32BE:  MOVWF  FF7
32C0:  CALL   08E8
....................             lcd_gotoxy(1,4); 
32C4:  MOVLW  01
32C6:  MOVWF  xE3
32C8:  MOVLW  04
32CA:  MOVWF  xE4
32CC:  CALL   0828
....................             printf(lcd_putc,"                    "); 
32D0:  MOVLW  5A
32D2:  MOVWF  FF6
32D4:  MOVLW  04
32D6:  MOVWF  FF7
32D8:  CALL   08E8
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
32DC:  MOVLW  02
32DE:  MOVWF  xD1
32E0:  MOVLW  FA
32E2:  MOVWF  xE3
32E4:  CALL   066E
32E8:  DECFSZ xD1,F
32EA:  BRA    32E0
32EC:  MOVLW  0B
32EE:  MOVWF  1B
32F0:  MOVLW  0C
32F2:  MOVWF  xE2
32F4:  CALL   088A
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
32F8:  MOVF   1B,W
32FA:  SUBLW  0B
32FC:  BC    331C
32FE:  MOVF   1B,W
3300:  SUBLW  0D
3302:  BNC   331C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3304:  MOVLW  01
3306:  SUBWF  1B,W
3308:  MOVWF  xD1
330A:  MOVWF  xE3
330C:  MOVLW  04
330E:  MOVWF  xE4
3310:  CALL   0828
....................             lcd_putc(t[1]); 
3314:  MOVFF  39,E2
3318:  CALL   088A
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
331C:  MOVF   18,W
331E:  SUBLW  3D
3320:  BTFSS  FD8.2
3322:  BRA    3632
....................    lcd_gotoxy(1,1); 
3324:  MOVLW  01
3326:  MOVWF  xE3
3328:  MOVWF  xE4
332A:  CALL   0828
....................    printf(lcd_putc,"     Ingrese        "); 
332E:  MOVLW  70
3330:  MOVWF  FF6
3332:  MOVLW  04
3334:  MOVWF  FF7
3336:  CALL   08E8
....................    lcd_gotoxy(1,2); 
333A:  MOVLW  01
333C:  MOVWF  xE3
333E:  MOVLW  02
3340:  MOVWF  xE4
3342:  CALL   0828
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
3346:  MOVLW  86
3348:  MOVWF  FF6
334A:  MOVLW  04
334C:  MOVWF  FF7
334E:  CALL   08E8
....................    lcd_gotoxy(1,3); 
3352:  MOVLW  01
3354:  MOVWF  xE3
3356:  MOVLW  03
3358:  MOVWF  xE4
335A:  CALL   0828
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
335E:  MOVLW  9C
3360:  MOVWF  FF6
3362:  MOVLW  04
3364:  MOVWF  FF7
3366:  MOVLW  0A
3368:  MOVWF  xD5
336A:  CALL   0CCC
336E:  MOVFF  3B,D1
3372:  MOVLW  1F
3374:  MOVWF  xD2
3376:  CALL   0D12
337A:  MOVFF  3C,D1
337E:  MOVLW  1F
3380:  MOVWF  xD2
3382:  CALL   0D12
3386:  MOVFF  3D,D1
338A:  MOVLW  1F
338C:  MOVWF  xD2
338E:  CALL   0D12
3392:  MOVFF  3E,D1
3396:  MOVLW  1F
3398:  MOVWF  xD2
339A:  CALL   0D12
339E:  MOVLW  20
33A0:  MOVWF  xE2
33A2:  CALL   088A
33A6:  MOVLW  20
33A8:  MOVWF  xE2
33AA:  CALL   088A
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
33AE:  BSF    F92.5
33B0:  BTFSS  F80.5
33B2:  BRA    33D6
....................       {  if(Flanco == 0)  
33B4:  BTFSC  17.2
33B6:  BRA    33D4
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
33B8:  MOVLW  0B
33BA:  SUBWF  1B,W
33BC:  CLRF   03
33BE:  ADDLW  3B
33C0:  MOVWF  FE9
33C2:  MOVLW  00
33C4:  ADDWFC 03,W
33C6:  MOVWF  FEA
33C8:  INCF   FEF,F
33CA:  BSF    17.2
33CC:  MOVLW  1E
33CE:  MOVWF  xE3
33D0:  CALL   066E
....................          else 
33D4:  BRA    33D8
....................             {Flanco = 0;} 
33D6:  BCF    17.2
....................              
....................       if(DOWN)//Si oprime hacia abajo 
33D8:  BSF    F96.0
33DA:  BTFSS  F84.0
33DC:  BRA    3400
....................       {  if(Flanco2 == 0)  
33DE:  BTFSC  17.4
33E0:  BRA    33FE
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
33E2:  MOVLW  0B
33E4:  SUBWF  1B,W
33E6:  CLRF   03
33E8:  ADDLW  3B
33EA:  MOVWF  FE9
33EC:  MOVLW  00
33EE:  ADDWFC 03,W
33F0:  MOVWF  FEA
33F2:  DECF   FEF,F
33F4:  BSF    17.4
33F6:  MOVLW  1E
33F8:  MOVWF  xE3
33FA:  CALL   066E
....................          else 
33FE:  BRA    3402
....................             {Flanco2 = 0;} 
3400:  BCF    17.4
....................     
....................       if(RIGHT)// Si oprime Derecha 
3402:  BSF    F96.1
3404:  BTFSS  F84.1
3406:  BRA    3422
....................       {  if(Flanco1 == 0)  
3408:  BTFSC  17.3
340A:  BRA    3420
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
340C:  BSF    17.3
340E:  INCF   1B,F
3410:  MOVLW  1E
3412:  MOVWF  xE3
3414:  CALL   066E
3418:  MOVLW  0C
341A:  MOVWF  xE2
341C:  CALL   088A
....................          else 
3420:  BRA    3424
....................             {Flanco1 = 0;}    
3422:  BCF    17.3
....................              
....................        if(LEFT)// Si oprime Izquierda 
3424:  BSF    F96.2
3426:  BTFSS  F84.2
3428:  BRA    3444
....................       {  if(Flanco3 == 0)  
342A:  BTFSC  17.5
342C:  BRA    3442
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
342E:  BSF    17.5
3430:  DECF   1B,F
3432:  MOVLW  1E
3434:  MOVWF  xE3
3436:  CALL   066E
343A:  MOVLW  0C
343C:  MOVWF  xE2
343E:  CALL   088A
....................          else 
3442:  BRA    3446
....................             {Flanco3 = 0;}     
3444:  BCF    17.5
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3446:  MOVLW  0B
3448:  SUBWF  1B,W
344A:  CLRF   03
344C:  ADDLW  3B
344E:  MOVWF  FE9
3450:  MOVLW  00
3452:  ADDWFC 03,W
3454:  MOVWF  FEA
3456:  BTFSC  FEF.7
3458:  BRA    345C
345A:  BRA    3470
....................        {clave[unidad-11]=9;} 
345C:  MOVLW  0B
345E:  SUBWF  1B,W
3460:  CLRF   03
3462:  ADDLW  3B
3464:  MOVWF  FE9
3466:  MOVLW  00
3468:  ADDWFC 03,W
346A:  MOVWF  FEA
346C:  MOVLW  09
346E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3470:  MOVLW  0B
3472:  SUBWF  1B,W
3474:  CLRF   03
3476:  ADDLW  3B
3478:  MOVWF  FE9
347A:  MOVLW  00
347C:  ADDWFC 03,W
347E:  MOVWF  FEA
3480:  BTFSC  FEF.7
3482:  BRA    349C
3484:  MOVF   FEF,W
3486:  SUBLW  09
3488:  BC    349C
....................        {clave[unidad-11]=0;} 
348A:  MOVLW  0B
348C:  SUBWF  1B,W
348E:  CLRF   03
3490:  ADDLW  3B
3492:  MOVWF  FE9
3494:  MOVLW  00
3496:  ADDWFC 03,W
3498:  MOVWF  FEA
349A:  CLRF   FEF
....................        if(unidad<11) 
349C:  MOVF   1B,W
349E:  SUBLW  0A
34A0:  BNC   34AA
....................        {Menu=5;unidad=11;} 
34A2:  MOVLW  05
34A4:  MOVWF  18
34A6:  MOVLW  0B
34A8:  MOVWF  1B
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
34AA:  MOVFF  1B,E3
34AE:  MOVLW  04
34B0:  MOVWF  xE4
34B2:  CALL   0828
....................        lcd_putc(t[2]); 
34B6:  MOVFF  3A,E2
34BA:  CALL   088A
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
34BE:  MOVF   1B,W
34C0:  SUBLW  0E
34C2:  BTFSC  FD8.0
34C4:  BRA    360E
....................        { 
....................             lcd_gotoxy(1,1); 
34C6:  MOVLW  01
34C8:  MOVWF  xE3
34CA:  MOVWF  xE4
34CC:  CALL   0828
....................             printf(lcd_putc,"                    "); 
34D0:  MOVLW  B2
34D2:  MOVWF  FF6
34D4:  MOVLW  04
34D6:  MOVWF  FF7
34D8:  CALL   08E8
....................             lcd_gotoxy(1,2); 
34DC:  MOVLW  01
34DE:  MOVWF  xE3
34E0:  MOVLW  02
34E2:  MOVWF  xE4
34E4:  CALL   0828
....................             printf(lcd_putc,"     Contraseña     "); 
34E8:  MOVLW  C8
34EA:  MOVWF  FF6
34EC:  MOVLW  04
34EE:  MOVWF  FF7
34F0:  CALL   08E8
....................             lcd_gotoxy(1,3); 
34F4:  MOVLW  01
34F6:  MOVWF  xE3
34F8:  MOVLW  03
34FA:  MOVWF  xE4
34FC:  CALL   0828
....................             printf(lcd_putc,"     Almacenada     "); 
3500:  MOVLW  DE
3502:  MOVWF  FF6
3504:  MOVLW  04
3506:  MOVWF  FF7
3508:  CALL   08E8
....................             lcd_gotoxy(1,4); 
350C:  MOVLW  01
350E:  MOVWF  xE3
3510:  MOVLW  04
3512:  MOVWF  xE4
3514:  CALL   0828
....................             printf(lcd_putc,"                    "); 
3518:  MOVLW  F4
351A:  MOVWF  FF6
351C:  MOVLW  04
351E:  MOVWF  FF7
3520:  CALL   08E8
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3524:  CLRF   FA9
3526:  MOVFF  3B,FA8
352A:  BCF    FA6.6
352C:  BCF    FA6.7
352E:  BSF    FA6.2
3530:  MOVF   FF2,W
3532:  MOVWF  00
3534:  BCF    FF2.7
3536:  MOVLB  F
3538:  MOVLW  55
353A:  MOVWF  FA7
353C:  MOVLW  AA
353E:  MOVWF  FA7
3540:  BSF    FA6.1
3542:  BTFSC  FA6.1
3544:  BRA    3542
3546:  BCF    FA6.2
3548:  MOVF   00,W
354A:  IORWF  FF2,F
354C:  MOVLW  14
354E:  MOVLB  0
3550:  MOVWF  xE3
3552:  CALL   066E
3556:  MOVLW  01
3558:  MOVWF  FA9
355A:  MOVFF  3C,FA8
355E:  BCF    FA6.6
3560:  BCF    FA6.7
3562:  BSF    FA6.2
3564:  MOVF   FF2,W
3566:  MOVWF  00
3568:  BCF    FF2.7
356A:  MOVLB  F
356C:  MOVLW  55
356E:  MOVWF  FA7
3570:  MOVLW  AA
3572:  MOVWF  FA7
3574:  BSF    FA6.1
3576:  BTFSC  FA6.1
3578:  BRA    3576
357A:  BCF    FA6.2
357C:  MOVF   00,W
357E:  IORWF  FF2,F
3580:  MOVLW  14
3582:  MOVLB  0
3584:  MOVWF  xE3
3586:  CALL   066E
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
358A:  MOVLW  02
358C:  MOVWF  FA9
358E:  MOVFF  3D,FA8
3592:  BCF    FA6.6
3594:  BCF    FA6.7
3596:  BSF    FA6.2
3598:  MOVF   FF2,W
359A:  MOVWF  00
359C:  BCF    FF2.7
359E:  MOVLB  F
35A0:  MOVLW  55
35A2:  MOVWF  FA7
35A4:  MOVLW  AA
35A6:  MOVWF  FA7
35A8:  BSF    FA6.1
35AA:  BTFSC  FA6.1
35AC:  BRA    35AA
35AE:  BCF    FA6.2
35B0:  MOVF   00,W
35B2:  IORWF  FF2,F
35B4:  MOVLW  14
35B6:  MOVLB  0
35B8:  MOVWF  xE3
35BA:  CALL   066E
35BE:  MOVLW  03
35C0:  MOVWF  FA9
35C2:  MOVFF  3E,FA8
35C6:  BCF    FA6.6
35C8:  BCF    FA6.7
35CA:  BSF    FA6.2
35CC:  MOVF   FF2,W
35CE:  MOVWF  00
35D0:  BCF    FF2.7
35D2:  MOVLB  F
35D4:  MOVLW  55
35D6:  MOVWF  FA7
35D8:  MOVLW  AA
35DA:  MOVWF  FA7
35DC:  BSF    FA6.1
35DE:  BTFSC  FA6.1
35E0:  BRA    35DE
35E2:  BCF    FA6.2
35E4:  MOVF   00,W
35E6:  IORWF  FF2,F
35E8:  MOVLW  14
35EA:  MOVLB  0
35EC:  MOVWF  xE3
35EE:  CALL   066E
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
35F2:  MOVLW  02
35F4:  MOVWF  xD1
35F6:  MOVLW  FA
35F8:  MOVWF  xE3
35FA:  CALL   066E
35FE:  DECFSZ xD1,F
3600:  BRA    35F6
3602:  MOVLW  01
3604:  MOVWF  18
3606:  CLRF   37
3608:  MOVLW  02
360A:  MOVWF  1C
360C:  MOVWF  1E
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
360E:  MOVF   1B,W
3610:  SUBLW  0B
3612:  BC    3632
3614:  MOVF   1B,W
3616:  SUBLW  0D
3618:  BNC   3632
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
361A:  MOVLW  01
361C:  SUBWF  1B,W
361E:  MOVWF  xD1
3620:  MOVWF  xE3
3622:  MOVLW  04
3624:  MOVWF  xE4
3626:  CALL   0828
....................             lcd_putc(t[1]); 
362A:  MOVFF  39,E2
362E:  CALL   088A
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Media Movil 
3632:  MOVF   18,W
3634:  SUBLW  05
3636:  BTFSS  FD8.2
3638:  BRA    3754
....................     
....................    lcd_gotoxy(1,1); 
363A:  MOVLW  01
363C:  MOVWF  xE3
363E:  MOVWF  xE4
3640:  CALL   0828
....................    printf(lcd_putc,"    Media   Movil    "); 
3644:  MOVLW  0A
3646:  MOVWF  FF6
3648:  MOVLW  05
364A:  MOVWF  FF7
364C:  CALL   08E8
....................    lcd_gotoxy(1,2); 
3650:  MOVLW  01
3652:  MOVWF  xE3
3654:  MOVLW  02
3656:  MOVWF  xE4
3658:  CALL   0828
....................    printf(lcd_putc,"    Ingrese valor    "); 
365C:  MOVLW  20
365E:  MOVWF  FF6
3660:  MOVLW  05
3662:  MOVWF  FF7
3664:  CALL   08E8
....................    lcd_gotoxy(1,3); 
3668:  MOVLW  01
366A:  MOVWF  xE3
366C:  MOVLW  03
366E:  MOVWF  xE4
3670:  CALL   0828
....................    printf(lcd_putc,"        %02u   ",MediaMovil);  
3674:  MOVLW  36
3676:  MOVWF  FF6
3678:  MOVLW  05
367A:  MOVWF  FF7
367C:  MOVLW  08
367E:  MOVWF  xD5
3680:  CALL   0CCC
3684:  MOVFF  27,D5
3688:  MOVLW  01
368A:  MOVWF  xD6
368C:  CALL   1270
3690:  MOVLW  20
3692:  MOVWF  xE2
3694:  CALL   088A
3698:  MOVLW  20
369A:  MOVWF  xE2
369C:  CALL   088A
36A0:  MOVLW  20
36A2:  MOVWF  xE2
36A4:  CALL   088A
....................     
....................           
....................    if(MediaMovil>16) 
36A8:  MOVF   27,W
36AA:  SUBLW  10
36AC:  BC    36B2
....................    { 
....................       MediaMovil=16; 
36AE:  MOVLW  10
36B0:  MOVWF  27
....................    } 
....................     
....................    if(UP) 
36B2:  BSF    F92.5
36B4:  BTFSS  F80.5
36B6:  BRA    36C8
....................    { 
....................       if(MediaMovil<16) 
36B8:  MOVF   27,W
36BA:  SUBLW  0F
36BC:  BNC   36C8
....................       { 
....................          MediaMovil++;delay_ms(200); 
36BE:  INCF   27,F
36C0:  MOVLW  C8
36C2:  MOVWF  xE3
36C4:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(DOWN) 
36C8:  BSF    F96.0
36CA:  BTFSS  F84.0
36CC:  BRA    36DC
....................    { 
....................       if(MediaMovil>0) 
36CE:  MOVF   27,F
36D0:  BZ    36DC
....................       { 
....................          MediaMovil--;delay_ms(200); 
36D2:  DECF   27,F
36D4:  MOVLW  C8
36D6:  MOVWF  xE3
36D8:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
36DC:  BSF    F96.1
36DE:  BTFSS  F84.1
36E0:  BRA    372A
....................    { 
....................       write_eeprom(5,MediaMovil); 
36E2:  MOVLW  05
36E4:  MOVWF  FA9
36E6:  MOVFF  27,FA8
36EA:  BCF    FA6.6
36EC:  BCF    FA6.7
36EE:  BSF    FA6.2
36F0:  MOVF   FF2,W
36F2:  MOVWF  00
36F4:  BCF    FF2.7
36F6:  MOVLB  F
36F8:  MOVLW  55
36FA:  MOVWF  FA7
36FC:  MOVLW  AA
36FE:  MOVWF  FA7
3700:  BSF    FA6.1
3702:  BTFSC  FA6.1
3704:  BRA    3702
3706:  BCF    FA6.2
3708:  MOVF   00,W
370A:  IORWF  FF2,F
....................       delay_ms(500); 
370C:  MOVLW  02
370E:  MOVLB  0
3710:  MOVWF  xD1
3712:  MOVLW  FA
3714:  MOVWF  xE3
3716:  CALL   066E
371A:  DECFSZ xD1,F
371C:  BRA    3712
....................       printf(lcd_putc,"\f"); 
371E:  MOVLW  0C
3720:  MOVWF  xE2
3722:  CALL   088A
....................       Menu=100; 
3726:  MOVLW  64
3728:  MOVWF  18
....................    } 
....................     
....................    if(LEFT) 
372A:  BSF    F96.2
372C:  BTFSS  F84.2
372E:  BRA    3754
....................    { 
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3730:  MOVLW  01
3732:  MOVWF  18
3734:  CLRF   37
3736:  MOVLW  04
3738:  MOVWF  xD1
373A:  MOVLW  FA
373C:  MOVWF  xE3
373E:  CALL   066E
3742:  DECFSZ xD1,F
3744:  BRA    373A
3746:  MOVLW  02
3748:  MOVWF  1C
374A:  MOVWF  1E
374C:  MOVLW  0C
374E:  MOVWF  xE2
3750:  CALL   088A
....................    }   
....................   } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Banda Muerta 
3754:  MOVF   18,W
3756:  SUBLW  06
3758:  BTFSS  FD8.2
375A:  BRA    3A06
....................     
....................    lcd_gotoxy(1,1); 
375C:  MOVLW  01
375E:  MOVWF  xE3
3760:  MOVWF  xE4
3762:  CALL   0828
....................    printf(lcd_putc,"    Banda Muerta     "); 
3766:  MOVLW  46
3768:  MOVWF  FF6
376A:  MOVLW  05
376C:  MOVWF  FF7
376E:  CALL   08E8
....................    lcd_gotoxy(1,2); 
3772:  MOVLW  01
3774:  MOVWF  xE3
3776:  MOVLW  02
3778:  MOVWF  xE4
377A:  CALL   0828
....................    printf(lcd_putc,"    Ingrese valor    "); 
377E:  MOVLW  5C
3780:  MOVWF  FF6
3782:  MOVLW  05
3784:  MOVWF  FF7
3786:  CALL   08E8
....................    lcd_gotoxy(1,3); 
378A:  MOVLW  01
378C:  MOVWF  xE3
378E:  MOVLW  03
3790:  MOVWF  xE4
3792:  CALL   0828
....................    printf(lcd_putc,"      +/-%2.1f   ",Banda);  
3796:  MOVLW  72
3798:  MOVWF  FF6
379A:  MOVLW  05
379C:  MOVWF  FF7
379E:  MOVLW  09
37A0:  MOVWF  xD5
37A2:  CALL   0CCC
37A6:  MOVLW  01
37A8:  MOVWF  FE9
37AA:  MOVFF  C4,D8
37AE:  MOVFF  C3,D7
37B2:  MOVFF  C2,D6
37B6:  MOVFF  C1,D5
37BA:  MOVWF  xD9
37BC:  CALL   103C
37C0:  MOVLW  20
37C2:  MOVWF  xE2
37C4:  CALL   088A
37C8:  MOVLW  20
37CA:  MOVWF  xE2
37CC:  CALL   088A
37D0:  MOVLW  20
37D2:  MOVWF  xE2
37D4:  CALL   088A
....................     
....................           
....................    if(Banda>10.0) 
37D8:  CLRF   xD9
37DA:  CLRF   xD8
37DC:  MOVLW  20
37DE:  MOVWF  xD7
37E0:  MOVLW  82
37E2:  MOVWF  xD6
37E4:  MOVFF  C4,DD
37E8:  MOVFF  C3,DC
37EC:  MOVFF  C2,DB
37F0:  MOVFF  C1,DA
37F4:  CALL   11C2
37F8:  BNC   3806
....................    { 
....................       Banda=10.0; 
37FA:  CLRF   xC4
37FC:  CLRF   xC3
37FE:  MOVLW  20
3800:  MOVWF  xC2
3802:  MOVLW  82
3804:  MOVWF  xC1
....................    } 
....................     
....................    if(UP) 
3806:  BSF    F92.5
3808:  BTFSS  F80.5
380A:  BRA    386C
....................    { 
....................       if(Banda<10.0) 
380C:  MOVFF  C4,D9
3810:  MOVFF  C3,D8
3814:  MOVFF  C2,D7
3818:  MOVFF  C1,D6
381C:  CLRF   xDD
381E:  CLRF   xDC
3820:  MOVLW  20
3822:  MOVWF  xDB
3824:  MOVLW  82
3826:  MOVWF  xDA
3828:  CALL   11C2
382C:  BNC   386C
....................       { 
....................          Banda+=0.1;delay_ms(200); 
382E:  BCF    FD8.1
3830:  MOVFF  C4,DD
3834:  MOVFF  C3,DC
3838:  MOVFF  C2,DB
383C:  MOVFF  C1,DA
3840:  MOVLW  CD
3842:  MOVWF  xE1
3844:  MOVLW  CC
3846:  MOVWF  xE0
3848:  MOVLW  4C
384A:  MOVWF  xDF
384C:  MOVLW  7B
384E:  MOVWF  xDE
3850:  CALL   0A62
3854:  MOVFF  03,C4
3858:  MOVFF  02,C3
385C:  MOVFF  01,C2
3860:  MOVFF  00,C1
3864:  MOVLW  C8
3866:  MOVWF  xE3
3868:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(DOWN) 
386C:  BSF    F96.0
386E:  BTFSS  F84.0
3870:  BRA    38D6
....................    { 
....................       if(Banda>0.1) 
3872:  MOVLW  CD
3874:  MOVWF  xD9
3876:  MOVLW  CC
3878:  MOVWF  xD8
387A:  MOVLW  4C
387C:  MOVWF  xD7
387E:  MOVLW  7B
3880:  MOVWF  xD6
3882:  MOVFF  C4,DD
3886:  MOVFF  C3,DC
388A:  MOVFF  C2,DB
388E:  MOVFF  C1,DA
3892:  CALL   11C2
3896:  BNC   38D6
....................       { 
....................          Banda-=0.1;delay_ms(200); 
3898:  BSF    FD8.1
389A:  MOVFF  C4,DD
389E:  MOVFF  C3,DC
38A2:  MOVFF  C2,DB
38A6:  MOVFF  C1,DA
38AA:  MOVLW  CD
38AC:  MOVWF  xE1
38AE:  MOVLW  CC
38B0:  MOVWF  xE0
38B2:  MOVLW  4C
38B4:  MOVWF  xDF
38B6:  MOVLW  7B
38B8:  MOVWF  xDE
38BA:  CALL   0A62
38BE:  MOVFF  03,C4
38C2:  MOVFF  02,C3
38C6:  MOVFF  01,C2
38CA:  MOVFF  00,C1
38CE:  MOVLW  C8
38D0:  MOVWF  xE3
38D2:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
38D6:  BSF    F96.1
38D8:  BTFSS  F84.1
38DA:  BRA    39DC
....................    { 
....................       BandaInt=(int8)Banda; 
38DC:  MOVFF  C4,D4
38E0:  MOVFF  C3,D3
38E4:  MOVFF  C2,D2
38E8:  MOVFF  C1,D1
38EC:  CALL   1238
38F0:  MOVFF  01,2D
....................       tmp=Banda-BandaInt; 
38F4:  CLRF   xDC
38F6:  MOVFF  2D,DB
38FA:  CALL   07A6
38FE:  BSF    FD8.1
3900:  MOVFF  C4,DD
3904:  MOVFF  C3,DC
3908:  MOVFF  C2,DB
390C:  MOVFF  C1,DA
3910:  MOVFF  03,E1
3914:  MOVFF  02,E0
3918:  MOVFF  01,DF
391C:  MOVFF  00,DE
3920:  CALL   0A62
3924:  MOVFF  03,C8
3928:  MOVFF  02,C7
392C:  MOVFF  01,C6
3930:  MOVFF  00,C5
....................       BandaDec=tmp*10; 
3934:  MOVFF  C8,E5
3938:  MOVFF  C7,E4
393C:  MOVFF  C6,E3
3940:  MOVFF  C5,E2
3944:  CLRF   xE9
3946:  CLRF   xE8
3948:  MOVLW  20
394A:  MOVWF  xE7
394C:  MOVLW  82
394E:  MOVWF  xE6
3950:  CALL   0E90
3954:  MOVFF  03,D4
3958:  MOVFF  02,D3
395C:  MOVFF  01,D2
3960:  MOVFF  00,D1
3964:  CALL   1238
3968:  MOVFF  01,2E
....................       write_eeprom(6,BandaInt); 
396C:  MOVLW  06
396E:  MOVWF  FA9
3970:  MOVFF  2D,FA8
3974:  BCF    FA6.6
3976:  BCF    FA6.7
3978:  BSF    FA6.2
397A:  MOVF   FF2,W
397C:  MOVWF  00
397E:  BCF    FF2.7
3980:  MOVLB  F
3982:  MOVLW  55
3984:  MOVWF  FA7
3986:  MOVLW  AA
3988:  MOVWF  FA7
398A:  BSF    FA6.1
398C:  BTFSC  FA6.1
398E:  BRA    398C
3990:  BCF    FA6.2
3992:  MOVF   00,W
3994:  IORWF  FF2,F
....................       write_eeprom(7,BandaDec); 
3996:  MOVLW  07
3998:  MOVWF  FA9
399A:  MOVFF  2E,FA8
399E:  BCF    FA6.6
39A0:  BCF    FA6.7
39A2:  BSF    FA6.2
39A4:  MOVFF  FF2,00
39A8:  BCF    FF2.7
39AA:  MOVLW  55
39AC:  MOVWF  FA7
39AE:  MOVLW  AA
39B0:  MOVWF  FA7
39B2:  BSF    FA6.1
39B4:  BTFSC  FA6.1
39B6:  BRA    39B4
39B8:  BCF    FA6.2
39BA:  MOVF   00,W
39BC:  IORWF  FF2,F
....................       delay_ms(500); 
39BE:  MOVLW  02
39C0:  MOVLB  0
39C2:  MOVWF  xD1
39C4:  MOVLW  FA
39C6:  MOVWF  xE3
39C8:  CALL   066E
39CC:  DECFSZ xD1,F
39CE:  BRA    39C4
....................       printf(lcd_putc,"\f"); 
39D0:  MOVLW  0C
39D2:  MOVWF  xE2
39D4:  CALL   088A
....................       Menu=100; 
39D8:  MOVLW  64
39DA:  MOVWF  18
....................    } 
....................     
....................    if(LEFT) 
39DC:  BSF    F96.2
39DE:  BTFSS  F84.2
39E0:  BRA    3A06
....................    { 
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
39E2:  MOVLW  01
39E4:  MOVWF  18
39E6:  CLRF   37
39E8:  MOVLW  04
39EA:  MOVWF  xD1
39EC:  MOVLW  FA
39EE:  MOVWF  xE3
39F0:  CALL   066E
39F4:  DECFSZ xD1,F
39F6:  BRA    39EC
39F8:  MOVLW  02
39FA:  MOVWF  1C
39FC:  MOVWF  1E
39FE:  MOVLW  0C
3A00:  MOVWF  xE2
3A02:  CALL   088A
....................    }   
....................   } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de Setpoint 
3A06:  MOVF   18,W
3A08:  SUBLW  07
3A0A:  BTFSS  FD8.2
3A0C:  BRA    3CBA
....................     
....................    lcd_gotoxy(1,1); 
3A0E:  MOVLW  01
3A10:  MOVWF  xE3
3A12:  MOVWF  xE4
3A14:  CALL   0828
....................    printf(lcd_putc,"    SetPoint  pH     "); 
3A18:  MOVLW  84
3A1A:  MOVWF  FF6
3A1C:  MOVLW  05
3A1E:  MOVWF  FF7
3A20:  CALL   08E8
....................    lcd_gotoxy(1,2); 
3A24:  MOVLW  01
3A26:  MOVWF  xE3
3A28:  MOVLW  02
3A2A:  MOVWF  xE4
3A2C:  CALL   0828
....................    printf(lcd_putc,"    Ingrese valor    "); 
3A30:  MOVLW  9A
3A32:  MOVWF  FF6
3A34:  MOVLW  05
3A36:  MOVWF  FF7
3A38:  CALL   08E8
....................    lcd_gotoxy(1,3); 
3A3C:  MOVLW  01
3A3E:  MOVWF  xE3
3A40:  MOVLW  03
3A42:  MOVWF  xE4
3A44:  CALL   0828
....................    printf(lcd_putc,"      +/-%2.1f   ",sPpH);  
3A48:  MOVLW  B0
3A4A:  MOVWF  FF6
3A4C:  MOVLW  05
3A4E:  MOVWF  FF7
3A50:  MOVLW  09
3A52:  MOVWF  xD5
3A54:  CALL   0CCC
3A58:  MOVLW  01
3A5A:  MOVWF  FE9
3A5C:  MOVFF  B8,D8
3A60:  MOVFF  B7,D7
3A64:  MOVFF  B6,D6
3A68:  MOVFF  B5,D5
3A6C:  MOVWF  xD9
3A6E:  CALL   103C
3A72:  MOVLW  20
3A74:  MOVWF  xE2
3A76:  CALL   088A
3A7A:  MOVLW  20
3A7C:  MOVWF  xE2
3A7E:  CALL   088A
3A82:  MOVLW  20
3A84:  MOVWF  xE2
3A86:  CALL   088A
....................     
....................           
....................    if(sPpH>14.0) 
3A8A:  CLRF   xD9
3A8C:  CLRF   xD8
3A8E:  MOVLW  60
3A90:  MOVWF  xD7
3A92:  MOVLW  82
3A94:  MOVWF  xD6
3A96:  MOVFF  B8,DD
3A9A:  MOVFF  B7,DC
3A9E:  MOVFF  B6,DB
3AA2:  MOVFF  B5,DA
3AA6:  CALL   11C2
3AAA:  BNC   3AB8
....................    { 
....................       sPpH=14.0; 
3AAC:  CLRF   xB8
3AAE:  CLRF   xB7
3AB0:  MOVLW  60
3AB2:  MOVWF  xB6
3AB4:  MOVLW  82
3AB6:  MOVWF  xB5
....................    } 
....................     
....................    if(UP) 
3AB8:  BSF    F92.5
3ABA:  BTFSS  F80.5
3ABC:  BRA    3B20
....................    { 
....................       if(sPpH<13.9) 
3ABE:  MOVFF  B8,D9
3AC2:  MOVFF  B7,D8
3AC6:  MOVFF  B6,D7
3ACA:  MOVFF  B5,D6
3ACE:  MOVLW  66
3AD0:  MOVWF  xDD
3AD2:  MOVWF  xDC
3AD4:  MOVLW  5E
3AD6:  MOVWF  xDB
3AD8:  MOVLW  82
3ADA:  MOVWF  xDA
3ADC:  CALL   11C2
3AE0:  BNC   3B20
....................       { 
....................          sPpH+=0.1;delay_ms(200); 
3AE2:  BCF    FD8.1
3AE4:  MOVFF  B8,DD
3AE8:  MOVFF  B7,DC
3AEC:  MOVFF  B6,DB
3AF0:  MOVFF  B5,DA
3AF4:  MOVLW  CD
3AF6:  MOVWF  xE1
3AF8:  MOVLW  CC
3AFA:  MOVWF  xE0
3AFC:  MOVLW  4C
3AFE:  MOVWF  xDF
3B00:  MOVLW  7B
3B02:  MOVWF  xDE
3B04:  CALL   0A62
3B08:  MOVFF  03,B8
3B0C:  MOVFF  02,B7
3B10:  MOVFF  01,B6
3B14:  MOVFF  00,B5
3B18:  MOVLW  C8
3B1A:  MOVWF  xE3
3B1C:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3B20:  BSF    F96.0
3B22:  BTFSS  F84.0
3B24:  BRA    3B8A
....................    { 
....................       if(sPpH>0.1) 
3B26:  MOVLW  CD
3B28:  MOVWF  xD9
3B2A:  MOVLW  CC
3B2C:  MOVWF  xD8
3B2E:  MOVLW  4C
3B30:  MOVWF  xD7
3B32:  MOVLW  7B
3B34:  MOVWF  xD6
3B36:  MOVFF  B8,DD
3B3A:  MOVFF  B7,DC
3B3E:  MOVFF  B6,DB
3B42:  MOVFF  B5,DA
3B46:  CALL   11C2
3B4A:  BNC   3B8A
....................       { 
....................          sPpH-=0.1;delay_ms(200); 
3B4C:  BSF    FD8.1
3B4E:  MOVFF  B8,DD
3B52:  MOVFF  B7,DC
3B56:  MOVFF  B6,DB
3B5A:  MOVFF  B5,DA
3B5E:  MOVLW  CD
3B60:  MOVWF  xE1
3B62:  MOVLW  CC
3B64:  MOVWF  xE0
3B66:  MOVLW  4C
3B68:  MOVWF  xDF
3B6A:  MOVLW  7B
3B6C:  MOVWF  xDE
3B6E:  CALL   0A62
3B72:  MOVFF  03,B8
3B76:  MOVFF  02,B7
3B7A:  MOVFF  01,B6
3B7E:  MOVFF  00,B5
3B82:  MOVLW  C8
3B84:  MOVWF  xE3
3B86:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
3B8A:  BSF    F96.1
3B8C:  BTFSS  F84.1
3B8E:  BRA    3C90
....................    { 
....................       spPhInt=(int8)sPpH; 
3B90:  MOVFF  B8,D4
3B94:  MOVFF  B7,D3
3B98:  MOVFF  B6,D2
3B9C:  MOVFF  B5,D1
3BA0:  CALL   1238
3BA4:  MOVFF  01,2F
....................       tmp=spPh-spPhInt; 
3BA8:  CLRF   xDC
3BAA:  MOVFF  2F,DB
3BAE:  CALL   07A6
3BB2:  BSF    FD8.1
3BB4:  MOVFF  B8,DD
3BB8:  MOVFF  B7,DC
3BBC:  MOVFF  B6,DB
3BC0:  MOVFF  B5,DA
3BC4:  MOVFF  03,E1
3BC8:  MOVFF  02,E0
3BCC:  MOVFF  01,DF
3BD0:  MOVFF  00,DE
3BD4:  CALL   0A62
3BD8:  MOVFF  03,C8
3BDC:  MOVFF  02,C7
3BE0:  MOVFF  01,C6
3BE4:  MOVFF  00,C5
....................       spPhDec=tmp*10; 
3BE8:  MOVFF  C8,E5
3BEC:  MOVFF  C7,E4
3BF0:  MOVFF  C6,E3
3BF4:  MOVFF  C5,E2
3BF8:  CLRF   xE9
3BFA:  CLRF   xE8
3BFC:  MOVLW  20
3BFE:  MOVWF  xE7
3C00:  MOVLW  82
3C02:  MOVWF  xE6
3C04:  CALL   0E90
3C08:  MOVFF  03,D4
3C0C:  MOVFF  02,D3
3C10:  MOVFF  01,D2
3C14:  MOVFF  00,D1
3C18:  CALL   1238
3C1C:  MOVFF  01,30
....................       write_eeprom(8,spPhInt); 
3C20:  MOVLW  08
3C22:  MOVWF  FA9
3C24:  MOVFF  2F,FA8
3C28:  BCF    FA6.6
3C2A:  BCF    FA6.7
3C2C:  BSF    FA6.2
3C2E:  MOVF   FF2,W
3C30:  MOVWF  00
3C32:  BCF    FF2.7
3C34:  MOVLB  F
3C36:  MOVLW  55
3C38:  MOVWF  FA7
3C3A:  MOVLW  AA
3C3C:  MOVWF  FA7
3C3E:  BSF    FA6.1
3C40:  BTFSC  FA6.1
3C42:  BRA    3C40
3C44:  BCF    FA6.2
3C46:  MOVF   00,W
3C48:  IORWF  FF2,F
....................       write_eeprom(9,spPhDec); 
3C4A:  MOVLW  09
3C4C:  MOVWF  FA9
3C4E:  MOVFF  30,FA8
3C52:  BCF    FA6.6
3C54:  BCF    FA6.7
3C56:  BSF    FA6.2
3C58:  MOVFF  FF2,00
3C5C:  BCF    FF2.7
3C5E:  MOVLW  55
3C60:  MOVWF  FA7
3C62:  MOVLW  AA
3C64:  MOVWF  FA7
3C66:  BSF    FA6.1
3C68:  BTFSC  FA6.1
3C6A:  BRA    3C68
3C6C:  BCF    FA6.2
3C6E:  MOVF   00,W
3C70:  IORWF  FF2,F
....................       delay_ms(500); 
3C72:  MOVLW  02
3C74:  MOVLB  0
3C76:  MOVWF  xD1
3C78:  MOVLW  FA
3C7A:  MOVWF  xE3
3C7C:  CALL   066E
3C80:  DECFSZ xD1,F
3C82:  BRA    3C78
....................       printf(lcd_putc,"\f"); 
3C84:  MOVLW  0C
3C86:  MOVWF  xE2
3C88:  CALL   088A
....................       Menu=100; 
3C8C:  MOVLW  64
3C8E:  MOVWF  18
....................    } 
....................     
....................    if(LEFT) 
3C90:  BSF    F96.2
3C92:  BTFSS  F84.2
3C94:  BRA    3CBA
....................    { 
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3C96:  MOVLW  01
3C98:  MOVWF  18
3C9A:  CLRF   37
3C9C:  MOVLW  04
3C9E:  MOVWF  xD1
3CA0:  MOVLW  FA
3CA2:  MOVWF  xE3
3CA4:  CALL   066E
3CA8:  DECFSZ xD1,F
3CAA:  BRA    3CA0
3CAC:  MOVLW  02
3CAE:  MOVWF  1C
3CB0:  MOVWF  1E
3CB2:  MOVLW  0C
3CB4:  MOVWF  xE2
3CB6:  CALL   088A
....................    }   
....................   } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8){ // Menu de Mantenimiento 
3CBA:  MOVF   18,W
3CBC:  SUBLW  08
3CBE:  BTFSS  FD8.2
3CC0:  BRA    3F50
....................     
....................    lcd_gotoxy(1,1); 
3CC2:  MOVLW  01
3CC4:  MOVWF  xE3
3CC6:  MOVWF  xE4
3CC8:  CALL   0828
....................    printf(lcd_putc,"MTO.  pH:%2.1f ",pVpH);    
3CCC:  MOVLW  C2
3CCE:  MOVWF  FF6
3CD0:  MOVLW  05
3CD2:  MOVWF  FF7
3CD4:  MOVLW  09
3CD6:  MOVWF  xD5
3CD8:  CALL   0CCC
3CDC:  MOVLW  01
3CDE:  MOVWF  FE9
3CE0:  MOVFF  B4,D8
3CE4:  MOVFF  B3,D7
3CE8:  MOVFF  B2,D6
3CEC:  MOVFF  B1,D5
3CF0:  MOVWF  xD9
3CF2:  CALL   103C
3CF6:  MOVLW  20
3CF8:  MOVWF  xE2
3CFA:  CALL   088A
....................    lcd_gotoxy(1,2); 
3CFE:  MOVLW  01
3D00:  MOVWF  xE3
3D02:  MOVLW  02
3D04:  MOVWF  xE4
3D06:  CALL   0828
....................    printf(lcd_putc,"b:%2.2f X=%2.0f X1=%2.0f" ,b,X0,X1); 
3D0A:  MOVLW  62
3D0C:  MOVWF  xE2
3D0E:  CALL   088A
3D12:  MOVLW  3A
3D14:  MOVWF  xE2
3D16:  CALL   088A
3D1A:  MOVLW  89
3D1C:  MOVWF  FE9
3D1E:  MOVFF  C0,D8
3D22:  MOVFF  BF,D7
3D26:  MOVFF  BE,D6
3D2A:  MOVFF  BD,D5
3D2E:  MOVLW  02
3D30:  MOVWF  xD9
3D32:  CALL   103C
3D36:  MOVLW  20
3D38:  MOVWF  xE2
3D3A:  CALL   088A
3D3E:  MOVLW  58
3D40:  MOVWF  xE2
3D42:  CALL   088A
3D46:  MOVLW  3D
3D48:  MOVWF  xE2
3D4A:  CALL   088A
3D4E:  MOVLW  01
3D50:  MOVWF  FE9
3D52:  MOVFF  A0,D8
3D56:  MOVFF  9F,D7
3D5A:  MOVFF  9E,D6
3D5E:  MOVFF  9D,D5
3D62:  CLRF   xD9
3D64:  CALL   103C
3D68:  MOVLW  E1
3D6A:  MOVWF  FF6
3D6C:  MOVLW  05
3D6E:  MOVWF  FF7
3D70:  MOVLW  04
3D72:  MOVWF  xD5
3D74:  CALL   0CCC
3D78:  MOVLW  01
3D7A:  MOVWF  FE9
3D7C:  MOVFF  A8,D8
3D80:  MOVFF  A7,D7
3D84:  MOVFF  A6,D6
3D88:  MOVFF  A5,D5
3D8C:  CLRF   xD9
3D8E:  CALL   103C
....................    lcd_gotoxy(1,3); 
3D92:  MOVLW  01
3D94:  MOVWF  xE3
3D96:  MOVLW  03
3D98:  MOVWF  xE4
3D9A:  CALL   0828
....................    printf(lcd_putc,"Y0=%2.1f Y1=%2.1f %02u" ,Y0,Y1,negativo); 
3D9E:  MOVLW  59
3DA0:  MOVWF  xE2
3DA2:  CALL   088A
3DA6:  MOVLW  30
3DA8:  MOVWF  xE2
3DAA:  CALL   088A
3DAE:  MOVLW  3D
3DB0:  MOVWF  xE2
3DB2:  CALL   088A
3DB6:  MOVLW  01
3DB8:  MOVWF  FE9
3DBA:  MOVFF  A4,D8
3DBE:  MOVFF  A3,D7
3DC2:  MOVFF  A2,D6
3DC6:  MOVFF  A1,D5
3DCA:  MOVWF  xD9
3DCC:  CALL   103C
3DD0:  MOVLW  F4
3DD2:  MOVWF  FF6
3DD4:  MOVLW  05
3DD6:  MOVWF  FF7
3DD8:  MOVLW  04
3DDA:  MOVWF  xD5
3DDC:  CALL   0CCC
3DE0:  MOVLW  01
3DE2:  MOVWF  FE9
3DE4:  MOVFF  AC,D8
3DE8:  MOVFF  AB,D7
3DEC:  MOVFF  AA,D6
3DF0:  MOVFF  A9,D5
3DF4:  MOVWF  xD9
3DF6:  CALL   103C
3DFA:  MOVLW  20
3DFC:  MOVWF  xE2
3DFE:  CALL   088A
3E02:  MOVFF  29,D5
3E06:  MOVLW  01
3E08:  MOVWF  xD6
3E0A:  CALL   1270
....................    lcd_gotoxy(1,4); 
3E0E:  MOVLW  01
3E10:  MOVWF  xE3
3E12:  MOVLW  04
3E14:  MOVWF  xE4
3E16:  CALL   0828
....................    printf(lcd_putc,"T. Pulso=%02u ADC:%2.0f ",tpulso,sensores(0)); 
3E1A:  CLRF   xD6
3E1C:  CALL   07DC
3E20:  MOVFF  00,D1
3E24:  MOVFF  01,D2
3E28:  MOVFF  02,D3
3E2C:  MOVFF  03,D4
3E30:  MOVLW  04
3E32:  MOVWF  FF6
3E34:  MOVLW  06
3E36:  MOVWF  FF7
3E38:  MOVLW  09
3E3A:  MOVWF  xD5
3E3C:  CALL   0CCC
3E40:  MOVFF  2C,D5
3E44:  MOVLW  01
3E46:  MOVWF  xD6
3E48:  CALL   1270
3E4C:  MOVLW  11
3E4E:  MOVWF  FF6
3E50:  MOVLW  06
3E52:  MOVWF  FF7
3E54:  MOVLW  05
3E56:  MOVWF  xD5
3E58:  CALL   0CCC
3E5C:  MOVLW  01
3E5E:  MOVWF  FE9
3E60:  MOVFF  D4,D8
3E64:  MOVFF  D3,D7
3E68:  MOVFF  D2,D6
3E6C:  MOVFF  D1,D5
3E70:  CLRF   xD9
3E72:  CALL   103C
3E76:  MOVLW  20
3E78:  MOVWF  xE2
3E7A:  CALL   088A
....................           
....................    if(tpulso>14.0) 
3E7E:  CLRF   xDC
3E80:  MOVFF  2C,DB
3E84:  CALL   07A6
3E88:  CLRF   xD9
3E8A:  CLRF   xD8
3E8C:  MOVLW  60
3E8E:  MOVWF  xD7
3E90:  MOVLW  82
3E92:  MOVWF  xD6
3E94:  MOVFF  03,DD
3E98:  MOVFF  02,DC
3E9C:  MOVFF  01,DB
3EA0:  MOVFF  00,DA
3EA4:  CALL   11C2
3EA8:  BNC   3EAE
....................    { 
....................       tpulso=14.0; 
3EAA:  MOVLW  0E
3EAC:  MOVWF  2C
....................    } 
....................     
....................    if(UP) 
3EAE:  BSF    F92.5
3EB0:  BTFSS  F80.5
3EB2:  BRA    3EC4
....................    { 
....................       if(tpulso<10) 
3EB4:  MOVF   2C,W
3EB6:  SUBLW  09
3EB8:  BNC   3EC4
....................       { 
....................          tpulso++;delay_ms(200); 
3EBA:  INCF   2C,F
3EBC:  MOVLW  C8
3EBE:  MOVWF  xE3
3EC0:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3EC4:  BSF    F96.0
3EC6:  BTFSS  F84.0
3EC8:  BRA    3ED8
....................    { 
....................       if(tpulso>0) 
3ECA:  MOVF   2C,F
3ECC:  BZ    3ED8
....................       { 
....................          tpulso--;delay_ms(200); 
3ECE:  DECF   2C,F
3ED0:  MOVLW  C8
3ED2:  MOVWF  xE3
3ED4:  CALL   066E
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
3ED8:  BSF    F96.1
3EDA:  BTFSS  F84.1
3EDC:  BRA    3F26
....................    {       
....................       write_eeprom(70,tpulso); 
3EDE:  MOVLW  46
3EE0:  MOVWF  FA9
3EE2:  MOVFF  2C,FA8
3EE6:  BCF    FA6.6
3EE8:  BCF    FA6.7
3EEA:  BSF    FA6.2
3EEC:  MOVF   FF2,W
3EEE:  MOVWF  00
3EF0:  BCF    FF2.7
3EF2:  MOVLB  F
3EF4:  MOVLW  55
3EF6:  MOVWF  FA7
3EF8:  MOVLW  AA
3EFA:  MOVWF  FA7
3EFC:  BSF    FA6.1
3EFE:  BTFSC  FA6.1
3F00:  BRA    3EFE
3F02:  BCF    FA6.2
3F04:  MOVF   00,W
3F06:  IORWF  FF2,F
....................       delay_ms(500); 
3F08:  MOVLW  02
3F0A:  MOVLB  0
3F0C:  MOVWF  xD1
3F0E:  MOVLW  FA
3F10:  MOVWF  xE3
3F12:  CALL   066E
3F16:  DECFSZ xD1,F
3F18:  BRA    3F0E
....................       printf(lcd_putc,"\f"); 
3F1A:  MOVLW  0C
3F1C:  MOVWF  xE2
3F1E:  CALL   088A
....................       Menu=100; 
3F22:  MOVLW  64
3F24:  MOVWF  18
....................    } 
....................     
....................    if(LEFT) 
3F26:  BSF    F96.2
3F28:  BTFSS  F84.2
3F2A:  BRA    3F50
....................    { 
....................       Menu=1;paso=0;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3F2C:  MOVLW  01
3F2E:  MOVWF  18
3F30:  CLRF   37
3F32:  MOVLW  04
3F34:  MOVWF  xD1
3F36:  MOVLW  FA
3F38:  MOVWF  xE3
3F3A:  CALL   066E
3F3E:  DECFSZ xD1,F
3F40:  BRA    3F36
3F42:  MOVLW  02
3F44:  MOVWF  1C
3F46:  MOVWF  1E
3F48:  MOVLW  0C
3F4A:  MOVWF  xE2
3F4C:  CALL   088A
....................    }   
....................   } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
3F50:  MOVF   18,W
3F52:  SUBLW  64
3F54:  BTFSS  FD8.2
3F56:  BRA    4144
....................     
....................    lcd_gotoxy(1,1); 
3F58:  MOVLW  01
3F5A:  MOVWF  xE3
3F5C:  MOVWF  xE4
3F5E:  CALL   0828
....................    printf(lcd_putc,"   JP SCRUBBER  "); 
3F62:  MOVLW  1E
3F64:  MOVWF  FF6
3F66:  MOVLW  06
3F68:  MOVWF  FF7
3F6A:  CALL   08E8
....................     
....................    lcd_gotoxy(1,2); 
3F6E:  MOVLW  01
3F70:  MOVWF  xE3
3F72:  MOVLW  02
3F74:  MOVWF  xE4
3F76:  CALL   0828
....................    printf(lcd_putc,"pH:%2.1f",pVpH); 
3F7A:  MOVLW  70
3F7C:  MOVWF  xE2
3F7E:  CALL   088A
3F82:  MOVLW  48
3F84:  MOVWF  xE2
3F86:  CALL   088A
3F8A:  MOVLW  3A
3F8C:  MOVWF  xE2
3F8E:  CALL   088A
3F92:  MOVLW  01
3F94:  MOVWF  FE9
3F96:  MOVFF  B4,D8
3F9A:  MOVFF  B3,D7
3F9E:  MOVFF  B2,D6
3FA2:  MOVFF  B1,D5
3FA6:  MOVWF  xD9
3FA8:  CALL   103C
....................     
....................    lcd_gotoxy(1,3); 
3FAC:  MOVLW  01
3FAE:  MOVWF  xE3
3FB0:  MOVLW  03
3FB2:  MOVWF  xE4
3FB4:  CALL   0828
....................    printf(lcd_putc,"Time: %03u:%02u (H:M)",horas,minutos); 
3FB8:  MOVLW  30
3FBA:  MOVWF  FF6
3FBC:  MOVLW  06
3FBE:  MOVWF  FF7
3FC0:  MOVLW  06
3FC2:  MOVWF  xD5
3FC4:  CALL   0CCC
3FC8:  MOVFF  23,D5
3FCC:  MOVLW  03
3FCE:  MOVWF  xD6
3FD0:  CALL   1270
3FD4:  MOVLW  3A
3FD6:  MOVWF  xE2
3FD8:  CALL   088A
3FDC:  MOVFF  22,D5
3FE0:  MOVLW  01
3FE2:  MOVWF  xD6
3FE4:  CALL   1270
3FE8:  MOVLW  3F
3FEA:  MOVWF  FF6
3FEC:  MOVLW  06
3FEE:  MOVWF  FF7
3FF0:  MOVLW  06
3FF2:  MOVWF  xD5
3FF4:  CALL   0CCC
....................     
....................    if(estadoba==1) 
3FF8:  BTFSS  17.1
3FFA:  BRA    401C
....................    { 
....................       lcd_gotoxy(1,4); 
3FFC:  MOVLW  01
3FFE:  MOVWF  xE3
4000:  MOVLW  04
4002:  MOVWF  xE4
4004:  CALL   0828
....................       printf(lcd_putc,"BOMBA:ON "); 
4008:  MOVLW  46
400A:  MOVWF  FF6
400C:  MOVLW  06
400E:  MOVWF  FF7
4010:  CALL   08E8
....................       Bomba_on; 
4014:  BSF    F8C.1
4016:  BCF    F95.1
....................       Grabar=0; 
4018:  BCF    17.7
....................    } 
....................    else 
401A:  BRA    40BA
....................    { 
....................       lcd_gotoxy(1,4); 
401C:  MOVLW  01
401E:  MOVWF  xE3
4020:  MOVLW  04
4022:  MOVWF  xE4
4024:  CALL   0828
....................       printf(lcd_putc,"BOMBA:OFF"); 
4028:  MOVLW  50
402A:  MOVWF  FF6
402C:  MOVLW  06
402E:  MOVWF  FF7
4030:  CALL   08E8
....................       Bomba_off; 
4034:  BCF    F8C.1
4036:  BCF    F95.1
....................       if(Grabar==0) 
4038:  BTFSC  17.7
403A:  BRA    40BA
....................       { 
....................          write_eeprom(50,segundos);write_eeprom(51,minutos);write_eeprom(52,horas); 
403C:  MOVLW  32
403E:  MOVWF  FA9
4040:  MOVFF  21,FA8
4044:  BCF    FA6.6
4046:  BCF    FA6.7
4048:  BSF    FA6.2
404A:  MOVF   FF2,W
404C:  MOVWF  00
404E:  BCF    FF2.7
4050:  MOVLB  F
4052:  MOVLW  55
4054:  MOVWF  FA7
4056:  MOVLW  AA
4058:  MOVWF  FA7
405A:  BSF    FA6.1
405C:  BTFSC  FA6.1
405E:  BRA    405C
4060:  BCF    FA6.2
4062:  MOVF   00,W
4064:  IORWF  FF2,F
4066:  MOVLW  33
4068:  MOVWF  FA9
406A:  MOVFF  22,FA8
406E:  BCF    FA6.6
4070:  BCF    FA6.7
4072:  BSF    FA6.2
4074:  MOVF   FF2,W
4076:  MOVWF  00
4078:  BCF    FF2.7
407A:  MOVLW  55
407C:  MOVWF  FA7
407E:  MOVLW  AA
4080:  MOVWF  FA7
4082:  BSF    FA6.1
4084:  BTFSC  FA6.1
4086:  BRA    4084
4088:  BCF    FA6.2
408A:  MOVF   00,W
408C:  IORWF  FF2,F
408E:  MOVLW  34
4090:  MOVWF  FA9
4092:  MOVFF  23,FA8
4096:  BCF    FA6.6
4098:  BCF    FA6.7
409A:  BSF    FA6.2
409C:  MOVF   FF2,W
409E:  MOVWF  00
40A0:  BCF    FF2.7
40A2:  MOVLW  55
40A4:  MOVWF  FA7
40A6:  MOVLW  AA
40A8:  MOVWF  FA7
40AA:  BSF    FA6.1
40AC:  BTFSC  FA6.1
40AE:  BRA    40AC
40B0:  BCF    FA6.2
40B2:  MOVF   00,W
40B4:  IORWF  FF2,F
....................          Grabar=1; 
40B6:  BSF    17.7
40B8:  MOVLB  0
....................       } 
....................    } 
....................     
....................    if(estadobp==1) 
40BA:  BTFSS  17.0
40BC:  BRA    40DC
....................    { 
....................       lcd_gotoxy(12,4); 
40BE:  MOVLW  0C
40C0:  MOVWF  xE3
40C2:  MOVLW  04
40C4:  MOVWF  xE4
40C6:  CALL   0828
....................       printf(lcd_putc,"BASE:ON "); 
40CA:  MOVLW  5A
40CC:  MOVWF  FF6
40CE:  MOVLW  06
40D0:  MOVWF  FF7
40D2:  CALL   08E8
....................       Peristaltica_on; 
40D6:  BSF    F8B.1
40D8:  BCF    F94.1
....................    } 
....................    else 
40DA:  BRA    40F8
....................    { 
....................       lcd_gotoxy(12,4); 
40DC:  MOVLW  0C
40DE:  MOVWF  xE3
40E0:  MOVLW  04
40E2:  MOVWF  xE4
40E4:  CALL   0828
....................       printf(lcd_putc,"BASE:OFF"); 
40E8:  MOVLW  64
40EA:  MOVWF  FF6
40EC:  MOVLW  06
40EE:  MOVWF  FF7
40F0:  CALL   08E8
....................       Peristaltica_off; 
40F4:  BCF    F8B.1
40F6:  BCF    F94.1
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia abajo 
40F8:  BSF    F96.0
40FA:  BTFSS  F84.0
40FC:  BRA    4118
....................    { 
....................       if(Flanco1 == 0) 
40FE:  BTFSC  17.3
4100:  BRA    4116
....................       { 
....................          estadoba=!estadoba;Flanco1 = 1;delay_ms(300); 
4102:  BTG    17.1
4104:  BSF    17.3
4106:  MOVLW  02
4108:  MOVWF  xD1
410A:  MOVLW  96
410C:  MOVWF  xE3
410E:  CALL   066E
4112:  DECFSZ xD1,F
4114:  BRA    410A
....................       } 
....................    } 
....................    else 
4116:  BRA    411A
....................    { 
....................       Flanco1 = 0; 
4118:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia izquierda 
411A:  BSF    F96.1
411C:  BTFSS  F84.1
411E:  BRA    4144
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2; 
4120:  MOVLW  0C
4122:  MOVWF  xE2
4124:  CALL   088A
4128:  MOVLW  02
412A:  MOVWF  xD1
412C:  MOVLW  96
412E:  MOVWF  xE3
4130:  CALL   066E
4134:  DECFSZ xD1,F
4136:  BRA    412C
4138:  MOVLW  01
413A:  MOVWF  18
413C:  CLRF   37
413E:  MOVLW  02
4140:  MOVWF  1C
4142:  MOVWF  1E
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................  
....................    if(treset>=10) 
4144:  MOVF   2A,W
4146:  SUBLW  09
4148:  BC    4150
....................    { 
....................       lcd_init(); 
414A:  CALL   0750
....................       treset=0; 
414E:  CLRF   2A
....................    } 
....................     
....................    if(tcontrol>10) 
4150:  MOVF   2B,W
4152:  SUBLW  0A
4154:  BC    4158
....................    { 
....................       tcontrol=0; 
4156:  CLRF   2B
....................    } 
....................     
....................    if(Lectura==1) 
4158:  BTFSS  17.6
415A:  BRA    417E
....................    { 
....................       pVpH=Leer_Sensor_ph(MediaMovil); 
415C:  MOVFF  27,D1
4160:  GOTO   12DC
4164:  MOVFF  03,B4
4168:  MOVFF  02,B3
416C:  MOVFF  01,B2
4170:  MOVFF  00,B1
....................        
....................       if(Menu>0) 
4174:  MOVF   18,F
4176:  BZ    417C
....................       { 
....................          Controla(); 
4178:  GOTO   1584
....................       } 
....................       Lectura=0; 
417C:  BCF    17.6
....................    } 
....................     
....................    } 
417E:  GOTO   1E28
.................... } 
....................  
4182:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
